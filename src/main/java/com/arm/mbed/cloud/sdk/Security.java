// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.internal.certificaterenewal.model.CertificateEnrollmentListResponse;
import com.arm.mbed.cloud.sdk.internal.connectorca.model.DeveloperCertificateResponseData;
import com.arm.mbed.cloud.sdk.internal.connectorca.model.ServerCredentialsResponseData;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerConfigListResponse;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerConfigResponse;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerInfo;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerInfoListResponse;
import com.arm.mbed.cloud.sdk.internal.iam.model.TrustedCertificateInternalResp;
import com.arm.mbed.cloud.sdk.internal.iam.model.TrustedCertificateResp;
import com.arm.mbed.cloud.sdk.internal.iam.model.TrustedCertificateRespList;
import com.arm.mbed.cloud.sdk.security.adapters.CertificateEnrollmentAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.CertificateIssuerAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.CertificateIssuerConfigAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.DeveloperCertificateAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.ServerCredentialsAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.SubtenantTrustedCertificateAdapter;
import com.arm.mbed.cloud.sdk.security.adapters.TrustedCertificateAdapter;
import com.arm.mbed.cloud.sdk.security.model.CertificateEnrollment;
import com.arm.mbed.cloud.sdk.security.model.CertificateEnrollmentListOptions;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuer;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigListOptions;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuerListOptions;
import com.arm.mbed.cloud.sdk.security.model.DeveloperCertificate;
import com.arm.mbed.cloud.sdk.security.model.SecurityEndpoints;
import com.arm.mbed.cloud.sdk.security.model.ServerCredentials;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificate;
import com.arm.mbed.cloud.sdk.security.model.TrustedCertificate;
import com.arm.mbed.cloud.sdk.security.model.TrustedCertificateListOptions;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.Map;
import retrofit2.Call;

/**
 * Specifies Security APIs.
 * <p>
 *  API definitions exposing functionality for dealing with securities */
@Preamble(
    description = "Specifies Security APIs."
)
@Internal
@SuppressWarnings("PMD.CyclomaticComplexity")
@Module
public class Security extends AbstractModule {
  /**
   * Parameter name. */
  @Internal
  private static final String TAG_ID = "id";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ENROLLMENT = "certificateEnrollment";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ISSUER_REQUEST = "certificateIssuerRequest";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ISSUER = "certificateIssuer";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ISSUER_UPDATE_REQUEST = "certificateIssuerUpdateRequest";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CREATE_CERTIFICATE_ISSUER_CONFIG = "createCertificateIssuerConfig";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ISSUER_CONFIG = "certificateIssuerConfig";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERTIFICATE_ISSUER_CONFIG_REQUEST = "certificateIssuerConfigRequest";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVELOPER_CERTIFICATE = "developerCertificate";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_CERT_ID = "certId";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_SUBTENANT_TRUSTED_CERTIFICATE = "subtenantTrustedCertificate";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_TRUSTED_CERTIFICATE = "trustedCertificate";

  /**
   * module endpoints. */
  @Internal
  private final SecurityEndpoints endpoints;

  /**
   * Constructor.
   * @param options connection options @see {@link ConnectionOptions}.
   */
  public Security(ConnectionOptions options) {
    super(options);
    this.endpoints = new SecurityEndpoints(this.serviceRegistry);
  }

  /**
   * Constructor.
   * @param client Cloud client @see {@link ApiClientWrapper}.
   */
  public Security(ApiClientWrapper client) {
    super(client);
    this.endpoints = new SecurityEndpoints(this.serviceRegistry);
  }

  /**
   * Constructor.
   * @param context SDK context @see {@link SdkContext}.
   */
  public Security(SdkContext context) {
    super(context);
    this.endpoints = new SecurityEndpoints(this.serviceRegistry);
  }

  /**
   * Gets module endpoints.
   * @return endpoints
   */
  public SecurityEndpoints getEndpoints() {
    return endpoints;
  }

  /**
   * Gets a certificate enrollment.
   * <p>
   * Get a certificate enrollment by ID.
   *
   * **Example usage:**
   *
   * ```
   * curl -H 'authorization: Bearer <valid access token>'
   * https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments/01612df56f3b0a580a010fc700000000
   * ```
   * 
   * @param id The ID of the certificate enrollment.
   * @return something
   */
  @API
  @Nullable
  public CertificateEnrollment getCertificateEnrollment(@NonNull String id) throws
      MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    return CloudCaller.call(this, "getCertificateEnrollment()",CertificateEnrollmentAdapter.getMapper(),new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.internal.certificaterenewal.model.CertificateEnrollment>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<com.arm.mbed.cloud.sdk.internal.certificaterenewal.model.CertificateEnrollment> call(
          ) {
        return endpoints.getCertificateEnrollmentsApi().getCertificateEnrollment(finalId);
      }
    } );
  }

  /**
   * Gets a certificate enrollment.
   * <p>
   * Similar to {@link #getCertificateEnrollment(String)}
   * @param certificateEnrollment a certificate enrollment.
   * @return something
   */
  @API
  @Nullable
  public CertificateEnrollment getCertificateEnrollment(
      @NonNull CertificateEnrollment certificateEnrollment) throws MbedCloudException {
    checkNotNull(certificateEnrollment,TAG_CERTIFICATE_ENROLLMENT);
    final CertificateEnrollment finalCertificateEnrollment = certificateEnrollment;
    return  getCertificateEnrollment(finalCertificateEnrollment.getId());
  }

  /**
   * Lists certificate enrollments matching filter options.
   * <p>
   *
   * Get certificate enrollments list, optionally filtered.
   *
   * **Example usage:**
   *
   * ```
   * curl -H 'authorization: Bearer <valid access token>'
   * https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments
   * ```
   * ```
   * curl -H 'authorization: Bearer <valid access token>'
   * https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments?device_id__eq=01612df56f3b0a580a010fc700000000
   * ```
   * 
   * @param deviceIdEq null
   * @param certificateNameEq null
   * @param enrollStatusNeq null
   * @param enrollStatusEq null
   * @param enrollResultNeq null
   * @param enrollResultEq null
   * @param createdAtLte null
   * @param createdAtGte null
   * @param updatedAtLte null
   * @param updatedAtGte null
   * @param options list options.
   * @return the list of certificate enrollments corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<CertificateEnrollment> listCertificateEnrollments(@Nullable String deviceIdEq,
      @Nullable String certificateNameEq, @Nullable String enrollStatusNeq,
      @Nullable String enrollStatusEq, @Nullable String enrollResultNeq,
      @Nullable String enrollResultEq, @Nullable String createdAtLte, @Nullable String createdAtGte,
      @Nullable String updatedAtLte, @Nullable String updatedAtGte,
      @Nullable CertificateEnrollmentListOptions options) throws MbedCloudException {
    final String finalDeviceIdEq = deviceIdEq;
    final String finalCertificateNameEq = certificateNameEq;
    final String finalEnrollStatusNeq = enrollStatusNeq;
    final String finalEnrollStatusEq = enrollStatusEq;
    final String finalEnrollResultNeq = enrollResultNeq;
    final String finalEnrollResultEq = enrollResultEq;
    final String finalCreatedAtLte = createdAtLte;
    final String finalCreatedAtGte = createdAtGte;
    final String finalUpdatedAtLte = updatedAtLte;
    final String finalUpdatedAtGte = updatedAtGte;
    final CertificateEnrollmentListOptions finalOptions = (options == null)? new CertificateEnrollmentListOptions() : options;
    return CloudCaller.call(this, "listCertificateEnrollments()",CertificateEnrollmentAdapter.getListMapper(),new CloudRequest.CloudCall<CertificateEnrollmentListResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateEnrollmentListResponse> call() {
        return endpoints.getCertificateEnrollmentsApi().getCertificateEnrollments(finalDeviceIdEq, finalCertificateNameEq, finalOptions.getPageSize(), finalOptions.getAfter(), finalOptions.getOrder().toString(), finalOptions.encodeInclude(), finalEnrollStatusNeq, finalEnrollStatusEq, finalEnrollResultNeq, finalEnrollResultEq, finalCreatedAtLte, finalCreatedAtGte, finalUpdatedAtLte, finalUpdatedAtGte);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of certificate enrollments matching filter options.
   * <p>
   * Gets an iterator over all certificate enrollments matching filter options.
   * @param deviceIdEq null
   * @param certificateNameEq null
   * @param enrollStatusNeq null
   * @param enrollStatusEq null
   * @param enrollResultNeq null
   * @param enrollResultEq null
   * @param createdAtLte null
   * @param createdAtGte null
   * @param updatedAtLte null
   * @param updatedAtGte null
   * @param options list options.
   * @return paginator over the list of certificate enrollments
   */
  @API
  @Nullable
  public Paginator<CertificateEnrollment> listAllCertificateEnrollments(@Nullable String deviceIdEq,
      @Nullable String certificateNameEq, @Nullable String enrollStatusNeq,
      @Nullable String enrollStatusEq, @Nullable String enrollResultNeq,
      @Nullable String enrollResultEq, @Nullable String createdAtLte, @Nullable String createdAtGte,
      @Nullable String updatedAtLte, @Nullable String updatedAtGte,
      @Nullable CertificateEnrollmentListOptions options) throws MbedCloudException {
    final String finalDeviceIdEq = deviceIdEq;
    final String finalCertificateNameEq = certificateNameEq;
    final String finalEnrollStatusNeq = enrollStatusNeq;
    final String finalEnrollStatusEq = enrollStatusEq;
    final String finalEnrollResultNeq = enrollResultNeq;
    final String finalEnrollResultEq = enrollResultEq;
    final String finalCreatedAtLte = createdAtLte;
    final String finalCreatedAtGte = createdAtGte;
    final String finalUpdatedAtLte = updatedAtLte;
    final String finalUpdatedAtGte = updatedAtGte;
    final CertificateEnrollmentListOptions finalOptions = (options == null)? new CertificateEnrollmentListOptions() : options;
    return new Paginator<CertificateEnrollment>(finalOptions, new PageRequester<CertificateEnrollment>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<CertificateEnrollment> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listCertificateEnrollments(finalDeviceIdEq, finalCertificateNameEq, finalEnrollStatusNeq, finalEnrollStatusEq, finalEnrollResultNeq, finalEnrollResultEq, finalCreatedAtLte, finalCreatedAtGte, finalUpdatedAtLte, finalUpdatedAtGte, (CertificateEnrollmentListOptions) options);
      }
    });
  }

  /**
   * Gets module name.
   * @return module name
   */
  @Override
  @Internal
  public String getModuleName() {
    return "Security";
  }

  /**
   * Clones this instance.
   * <p>
   * @see java.lang.Object#clone()
   * @return a cloned instance
   */
  @Override
  public Security clone() {
    return new Security(this);
  }

  /**
   * Adds a certificate issuer.
   * <p>
   * Create a certificate issuer.
   * The maximum number of issuers is limited to 20 per account.
   * Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it.
   * <br>
   * **Example usage:**
   *
   * ```
   * curl -X POST \
   * -H 'authorization: Bearer <valid access token>' \
   * -H 'content-type: application/json;charset=UTF-8' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \
   * -d '{
   *   "issuer_type": "GLOBAL_SIGN",
   *   "name": "GS Issuer",
   *   "description": "Sample GlobalSign certificate issuer",
   *   "issuer_attributes": null,
   *   "issuer_credentials": {
   *       "api_key": "e510e289e6cd8947",
   *       "api_secret": "a477a8393d17a55ecb2ba6a61f58feb84770b621",
   *       "client_certificate": "-----BEGIN CERTIFICATE-----MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko=-----END CERTIFICATE-----",
   *         "private_key":"-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\n\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg==\n-----END RSA PRIVATE KEY-----",
   *       "passphrase": "helloworld"
   *   }
   * }'
   * ```
   * 
   * @param issuerCredentials The credentials required for connecting to the certificate issuer.
   * When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.
   * When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.
   * 
   * @param certificateIssuerRequest a certificate issuer.
   * @return an added  certificate issuer
   */
  @API
  @Nullable
  public CertificateIssuer createCertificateIssuer(@Nullable Map<String, String> issuerCredentials,
      @NonNull CertificateIssuer certificateIssuerRequest) throws MbedCloudException {
    checkNotNull(certificateIssuerRequest,TAG_CERTIFICATE_ISSUER_REQUEST);
    checkModelValidity(certificateIssuerRequest,TAG_CERTIFICATE_ISSUER_REQUEST);
    final Map<String, String> finalIssuerCredentials = issuerCredentials;
    final CertificateIssuer finalCertificateIssuerRequest = certificateIssuerRequest;
    return CloudCaller.call(this, "createCertificateIssuer()",CertificateIssuerAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerInfo>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerInfo> call() {
        return endpoints.getCertificateIssuersApi().createCertificateIssuer(CertificateIssuerAdapter.reverseMapAddRequest(finalCertificateIssuerRequest));
      }
    } );
  }

  /**
   * Deletes a certificate issuer.
   * <p>
   * Delete a certificate issuer by ID.
   * <br>
   * **Example usage:**
   *
   * ```
   * curl -X DELETE \
   * -H 'authorization: <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000
   * ```
   * 
   * @param id Certificate issuer ID. <br> The ID of the certificate issuer.
   * An active certificate issuer may not be deleted.
   * 
   */
  @API
  public void deleteCertificateIssuer(@NonNull String id) throws MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    CloudCaller.call(this, "deleteCertificateIssuer()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getCertificateIssuersApi().deleteCertificateIssuer(finalId);
      }
    } );
  }

  /**
   * Deletes a certificate issuer.
   * <p>
   * Similar to {@link #deleteCertificateIssuer(String)}
   * @param certificateIssuer a certificate issuer.
   */
  @API
  public void deleteCertificateIssuer(@NonNull CertificateIssuer certificateIssuer) throws
      MbedCloudException {
    checkNotNull(certificateIssuer,TAG_CERTIFICATE_ISSUER);
    final CertificateIssuer finalCertificateIssuer = certificateIssuer;
     deleteCertificateIssuer(finalCertificateIssuer.getId());
  }

  /**
   * Gets a certificate issuer.
   * <p>
   * (No description provided)
   * @param id The ID of the certificate issuer.
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuer getCertificateIssuer(@NonNull String id) throws MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    return CloudCaller.call(this, "getCertificateIssuer()",CertificateIssuerAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerInfo>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerInfo> call() {
        return endpoints.getCertificateIssuersApi().getCertificateIssuer(finalId);
      }
    } );
  }

  /**
   * Gets a certificate issuer.
   * <p>
   * Similar to {@link #getCertificateIssuer(String)}
   * @param certificateIssuer a certificate issuer.
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuer getCertificateIssuer(@NonNull CertificateIssuer certificateIssuer) throws
      MbedCloudException {
    checkNotNull(certificateIssuer,TAG_CERTIFICATE_ISSUER);
    final CertificateIssuer finalCertificateIssuer = certificateIssuer;
    return  getCertificateIssuer(finalCertificateIssuer.getId());
  }

  /**
   * Lists certificate issuers matching filter options.
   * <p>
   * Note: This endpoint does not implement pagination and therefore, list control parameters such as `limit` or `after` will be ignored by the system.
   * 
   * @param options list options.
   * @return the list of certificate issuers corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<CertificateIssuer> listCertificateIssuers(
      @Nullable CertificateIssuerListOptions options) throws MbedCloudException {
    final CertificateIssuerListOptions finalOptions = (options == null)? new CertificateIssuerListOptions() : options;
    return CloudCaller.call(this, "listCertificateIssuers()",CertificateIssuerAdapter.getListMapper(),new CloudRequest.CloudCall<CertificateIssuerInfoListResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerInfoListResponse> call() {
        return endpoints.getCertificateIssuersApi().getCertificateIssuers(finalOptions.getPageSize(), finalOptions.getOrder().toString(), finalOptions.getAfter(), finalOptions.encodeInclude());
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of certificate issuers matching filter options.
   * <p>
   * Gets an iterator over all certificate issuers matching filter options.
   * @param options list options.
   * @return paginator over the list of certificate issuers
   */
  @API
  @Nullable
  public Paginator<CertificateIssuer> listAllCertificateIssuers(
      @Nullable CertificateIssuerListOptions options) throws MbedCloudException {
    final CertificateIssuerListOptions finalOptions = (options == null)? new CertificateIssuerListOptions() : options;
    return new Paginator<CertificateIssuer>(finalOptions, new PageRequester<CertificateIssuer>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<CertificateIssuer> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listCertificateIssuers((CertificateIssuerListOptions) options);
      }
    });
  }

  /**
   * Modifies a certificate issuer.
   * <p>
   * Update a certificate issuer.
   * <br>
   * **Example usage:**
   *
   * ```
   * curl -X PUT \
   * -H 'authorization: <valid access token>' \
   * -H 'content-type: application/json;charset=UTF-8' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \
   * -d '{
   *   "description": "Sample GlobalSign certificate issuer - updated.",
   *   "name": "GlobalSign Issuer"
   * }'
   * ```
   * 
   * @param issuerCredentials The credentials required for connecting to the certificate issuer.
   * When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.
   * When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.
   * 
   * @param id The ID of the certificate issuer.
   * @param certificateIssuerUpdateRequest a certificate issuer.
   * @return an updated  certificate issuer
   */
  @API
  @Nullable
  public CertificateIssuer updateCertificateIssuer(@Nullable Map<String, String> issuerCredentials,
      @NonNull String id, @NonNull CertificateIssuer certificateIssuerUpdateRequest) throws
      MbedCloudException {
    checkNotNull(id,TAG_ID);
    checkNotNull(certificateIssuerUpdateRequest,TAG_CERTIFICATE_ISSUER_UPDATE_REQUEST);
    checkModelValidity(certificateIssuerUpdateRequest,TAG_CERTIFICATE_ISSUER_UPDATE_REQUEST);
    final Map<String, String> finalIssuerCredentials = issuerCredentials;
    final String finalId = id;
    final CertificateIssuer finalCertificateIssuerUpdateRequest = certificateIssuerUpdateRequest;
    return CloudCaller.call(this, "updateCertificateIssuer()",CertificateIssuerAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerInfo>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerInfo> call() {
        return endpoints.getCertificateIssuersApi().updateCertificateIssuer(finalId, CertificateIssuerAdapter.reverseMapUpdateRequest(finalCertificateIssuerUpdateRequest));
      }
    } );
  }

  /**
   * Modifies a certificate issuer.
   * <p>
   * Similar to {@link #updateCertificateIssuer(Map,String,CertificateIssuer)}
   * @param issuerCredentials The credentials required for connecting to the certificate issuer.
   * When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.
   * When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.
   * 
   * @param certificateIssuer a certificate issuer.
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuer updateCertificateIssuer(@Nullable Map<String, String> issuerCredentials,
      @NonNull CertificateIssuer certificateIssuer) throws MbedCloudException {
    checkNotNull(certificateIssuer,TAG_CERTIFICATE_ISSUER);
    checkModelValidity(certificateIssuer,TAG_CERTIFICATE_ISSUER);
    final Map<String, String> finalIssuerCredentials = issuerCredentials;
    final CertificateIssuer finalCertificateIssuer = certificateIssuer;
    return  updateCertificateIssuer(finalIssuerCredentials, finalCertificateIssuer.getId(), finalCertificateIssuer.getCertificateIssuerUpdateRequest());
  }

  /**
   * Adds a certificate issuer config.
   * <p>
   * Configure the certificate issuer to be used when creating the device custom certificates.
   * <br>
   * **Example usage:**
   *
   * ```
   * curl -X POST \
   * -H 'authorization: <valid access token>' \
   * -H 'content-type: application/json;charset=UTF-8' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \
   * -d '{
   *   "reference": "customer.dlms",
   *   "certificate_issuer_id": "01621a36719d507b9d48a91b00000000"
   * }'
   * ```
   * 
   * @param createCertificateIssuerConfig a certificate issuer config.
   * @return an added  certificate issuer config
   */
  @API
  @Nullable
  public CertificateIssuerConfig createCertificateIssuerConfig(
      @NonNull CertificateIssuerConfig createCertificateIssuerConfig) throws MbedCloudException {
    checkNotNull(createCertificateIssuerConfig,TAG_CREATE_CERTIFICATE_ISSUER_CONFIG);
    checkModelValidity(createCertificateIssuerConfig,TAG_CREATE_CERTIFICATE_ISSUER_CONFIG);
    final CertificateIssuerConfig finalCreateCertificateIssuerConfig = createCertificateIssuerConfig;
    return CloudCaller.call(this, "createCertificateIssuerConfig()",CertificateIssuerConfigAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerConfigResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerConfigResponse> call() {
        return endpoints.getCertificateIssuersActivationApi().createCertificateIssuerConfig(CertificateIssuerConfigAdapter.reverseMapAddRequest(finalCreateCertificateIssuerConfig));
      }
    } );
  }

  /**
   * Deletes a certificate issuer config.
   * <p>
   * Delete the configured certificate issuer configuration.
   * You can only delete the configurations of custom certificates.
   * 
   * @param id The ID of the certificate issuer configuration.
   * 
   */
  @API
  public void deleteCertificateIssuerConfig(@NonNull String id) throws MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    CloudCaller.call(this, "deleteCertificateIssuerConfig()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getCertificateIssuersActivationApi().deleteCertificateIssuerConfigByID(finalId);
      }
    } );
  }

  /**
   * Deletes a certificate issuer config.
   * <p>
   * Similar to {@link #deleteCertificateIssuerConfig(String)}
   * @param certificateIssuerConfig a certificate issuer config.
   */
  @API
  public void deleteCertificateIssuerConfig(
      @NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
    checkNotNull(certificateIssuerConfig,TAG_CERTIFICATE_ISSUER_CONFIG);
    final CertificateIssuerConfig finalCertificateIssuerConfig = certificateIssuerConfig;
     deleteCertificateIssuerConfig(finalCertificateIssuerConfig.getId());
  }

  /**
   * Gets a certificate issuer config.
   * <p>
   * Provides the configured certificate issuer.
   * 
   * @param id The ID of the certificate issuer configuration.
   * 
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuerConfig getCertificateIssuerConfig(@NonNull String id) throws
      MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    return CloudCaller.call(this, "getCertificateIssuerConfig()",CertificateIssuerConfigAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerConfigResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerConfigResponse> call() {
        return endpoints.getCertificateIssuersActivationApi().getCertificateIssuerConfigByID(finalId);
      }
    } );
  }

  /**
   * Gets a certificate issuer config.
   * <p>
   * Similar to {@link #getCertificateIssuerConfig(String)}
   * @param certificateIssuerConfig a certificate issuer config.
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuerConfig getCertificateIssuerConfig(
      @NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
    checkNotNull(certificateIssuerConfig,TAG_CERTIFICATE_ISSUER_CONFIG);
    final CertificateIssuerConfig finalCertificateIssuerConfig = certificateIssuerConfig;
    return  getCertificateIssuerConfig(finalCertificateIssuerConfig.getId());
  }

  /**
   * Lists certificate issuer configs matching filter options.
   * <p>
   * Get certificate issuer configurations, optionally filtered by reference.
   * <br>
   * **Example usage:**
   *
   * ```
   * curl \
   * -H 'authorization: <valid access token>' \
   * -H 'content-type: application/json;charset=UTF-8' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \
   * ```
   * ```
   * curl \
   * -H 'authorization: <valid access token>' \
   * -H 'content-type: application/json;charset=UTF-8' \
   * https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq=dlms \
   * ```
   * Note: This endpoint does not implement pagination and therefore, list control parameters such as `limit` or `after` will be ignored by the system.
   * 
   * @param referenceEq null
   * @param options list options.
   * @return the list of certificate issuer configs corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<CertificateIssuerConfig> listCertificateIssuerConfigs(
      @Nullable String referenceEq, @Nullable CertificateIssuerConfigListOptions options) throws
      MbedCloudException {
    final String finalReferenceEq = referenceEq;
    final CertificateIssuerConfigListOptions finalOptions = (options == null)? new CertificateIssuerConfigListOptions() : options;
    return CloudCaller.call(this, "listCertificateIssuerConfigs()",CertificateIssuerConfigAdapter.getListMapper(),new CloudRequest.CloudCall<CertificateIssuerConfigListResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerConfigListResponse> call() {
        return endpoints.getCertificateIssuersActivationApi().getCertificateIssuerConfigs(finalOptions.getPageSize(), finalOptions.getOrder().toString(), finalOptions.getAfter(), finalOptions.encodeInclude(), finalReferenceEq);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of certificate issuer configs matching filter options.
   * <p>
   * Gets an iterator over all certificate issuer configs matching filter options.
   * @param referenceEq null
   * @param options list options.
   * @return paginator over the list of certificate issuer configs
   */
  @API
  @Nullable
  public Paginator<CertificateIssuerConfig> listAllCertificateIssuerConfigs(
      @Nullable String referenceEq, @Nullable CertificateIssuerConfigListOptions options) throws
      MbedCloudException {
    final String finalReferenceEq = referenceEq;
    final CertificateIssuerConfigListOptions finalOptions = (options == null)? new CertificateIssuerConfigListOptions() : options;
    return new Paginator<CertificateIssuerConfig>(finalOptions, new PageRequester<CertificateIssuerConfig>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<CertificateIssuerConfig> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listCertificateIssuerConfigs(finalReferenceEq, (CertificateIssuerConfigListOptions) options);
      }
    });
  }

  /**
   * Get certificate issuer configuration.
   * <p>
   * Provides the configured certificate issuer to be used when creating device
   * certificates for LwM2M communication.<br>
   * 
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuerConfig lwm2m() throws MbedCloudException {
    return CloudCaller.call(this, "lwm2m()",CertificateIssuerConfigAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerConfigResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerConfigResponse> call() {
        return endpoints.getCertificateIssuersActivationApi().getCertificateIssuerConfig();
      }
    } );
  }

  /**
   * Modifies a certificate issuer config.
   * <p>
   * Update the configured certificate issuer configuration.
   * 
   * @param id The ID of the certificate issuer configuration.
   * 
   * @param certificateIssuerConfigRequest a certificate issuer config.
   * @return an updated  certificate issuer config
   */
  @API
  @Nullable
  public CertificateIssuerConfig updateCertificateIssuerConfig(@NonNull String id,
      @NonNull CertificateIssuerConfig certificateIssuerConfigRequest) throws MbedCloudException {
    checkNotNull(id,TAG_ID);
    checkNotNull(certificateIssuerConfigRequest,TAG_CERTIFICATE_ISSUER_CONFIG_REQUEST);
    checkModelValidity(certificateIssuerConfigRequest,TAG_CERTIFICATE_ISSUER_CONFIG_REQUEST);
    final String finalId = id;
    final CertificateIssuerConfig finalCertificateIssuerConfigRequest = certificateIssuerConfigRequest;
    return CloudCaller.call(this, "updateCertificateIssuerConfig()",CertificateIssuerConfigAdapter.getMapper(),new CloudRequest.CloudCall<CertificateIssuerConfigResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<CertificateIssuerConfigResponse> call() {
        return endpoints.getCertificateIssuersActivationApi().updateCertificateIssuerConfigByID(finalId, CertificateIssuerConfigAdapter.reverseMapUpdateRequest(finalCertificateIssuerConfigRequest));
      }
    } );
  }

  /**
   * Modifies a certificate issuer config.
   * <p>
   * Similar to {@link #updateCertificateIssuerConfig(String,CertificateIssuerConfig)}
   * @param certificateIssuerConfig a certificate issuer config.
   * @return something
   */
  @API
  @Nullable
  public CertificateIssuerConfig updateCertificateIssuerConfig(
      @NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
    checkNotNull(certificateIssuerConfig,TAG_CERTIFICATE_ISSUER_CONFIG);
    checkModelValidity(certificateIssuerConfig,TAG_CERTIFICATE_ISSUER_CONFIG);
    final CertificateIssuerConfig finalCertificateIssuerConfig = certificateIssuerConfig;
    return  updateCertificateIssuerConfig(finalCertificateIssuerConfig.getId(), finalCertificateIssuerConfig.getCertificateIssuerConfigRequest());
  }

  /**
   * Adds a developer certificate.
   * <p>
   * This REST API is intended to be used by customers to get a developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).
   *
   * **Note:** The number of developer certificates allowed per account is limited. Please see [Using your own certificate authority](/docs/current/mbed-cloud-deploy/instructions-for-factory-setup-and-device-provision.html#using-your-own-certificate-authority-with-mbed-cloud).
   *
   * **Example usage:**
   * curl -X POST "http://api.us-east-1.mbedcloud.com/v3/developer-certificates" -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN" -H "content-type: application/json" -d "{ \"name\": \"THE_CERTIFICATE_NAME\", \"description\": \"THE_CERTIFICATE_DESCRIPTION\"}"
   * 
   * @param developerCertificate a developer certificate.
   * @return an added  developer certificate
   */
  @API
  @Nullable
  public DeveloperCertificate createDeveloperCertificate(
      @NonNull DeveloperCertificate developerCertificate) throws MbedCloudException {
    checkNotNull(developerCertificate,TAG_DEVELOPER_CERTIFICATE);
    checkModelValidity(developerCertificate,TAG_DEVELOPER_CERTIFICATE);
    final DeveloperCertificate finalDeveloperCertificate = developerCertificate;
    return CloudCaller.call(this, "createDeveloperCertificate()",DeveloperCertificateAdapter.getMapper(),new CloudRequest.CloudCall<DeveloperCertificateResponseData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeveloperCertificateResponseData> call() {
        return endpoints.getDeveloperCertificateApi().createDeveloperCertificate(DeveloperCertificateAdapter.reverseMapAddRequest(finalDeveloperCertificate));
      }
    } );
  }

  /**
   * Deletes a developer certificate.
   * <p>
   * An endpoint for deleting a trusted certificate.
   *
   * **Example usage:**
   * `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be deleted.
   */
  @API
  public void deleteDeveloperCertificate(@NonNull String certId) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    final String finalCertId = certId;
    CloudCaller.call(this, "deleteDeveloperCertificate()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getDeveloperApi().deleteCertificate(finalCertId);
      }
    } );
  }

  /**
   * Gets a developer certificate.
   * <p>
   * This REST API is intended to be used by customers to fetch an existing developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).
   *
   * **Example usage:**
   * curl -X GET "http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID" -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"
   * 
   * @param id mUUID that uniquely identifies the developer certificate.
   * @return something
   */
  @API
  @Nullable
  public DeveloperCertificate getDeveloperCertificate(@NonNull String id) throws
      MbedCloudException {
    checkNotNull(id,TAG_ID);
    final String finalId = id;
    return CloudCaller.call(this, "getDeveloperCertificate()",DeveloperCertificateAdapter.getMapper(),new CloudRequest.CloudCall<DeveloperCertificateResponseData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeveloperCertificateResponseData> call() {
        return endpoints.getDeveloperCertificateApi().getDeveloperCertificate(finalId);
      }
    } );
  }

  /**
   * Gets a developer certificate.
   * <p>
   * Similar to {@link #getDeveloperCertificate(String)}
   * @param developerCertificate a developer certificate.
   * @return something
   */
  @API
  @Nullable
  public DeveloperCertificate getDeveloperCertificate(
      @NonNull DeveloperCertificate developerCertificate) throws MbedCloudException {
    checkNotNull(developerCertificate,TAG_DEVELOPER_CERTIFICATE);
    final DeveloperCertificate finalDeveloperCertificate = developerCertificate;
    return  getDeveloperCertificate(finalDeveloperCertificate.getId());
  }

  /**
   * Fetch bootstrap server credentials.
   * <p>
   * This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.
   *
   * **Example usage:**
   * curl -X GET "http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap" -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"
   * 
   * @return something
   */
  @API
  @Nullable
  public ServerCredentials getBootstrap() throws MbedCloudException {
    return CloudCaller.call(this, "getBootstrap()",ServerCredentialsAdapter.getMapper(),new CloudRequest.CloudCall<ServerCredentialsResponseData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<ServerCredentialsResponseData> call() {
        return endpoints.getServerCredentialsApi().getBootstrapServerCredentials();
      }
    } );
  }

  /**
   * Fetch LwM2M server credentials.
   * <p>
   * This REST API is intended to be used by customers to fetch LwM2M server credentials that they will need to use with their clients to connect to LwM2M server.
   *
   * **Example usage:**
   * curl -X GET "http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m" -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"
   * 
   * @return something
   */
  @API
  @Nullable
  public ServerCredentials getLwm2m() throws MbedCloudException {
    return CloudCaller.call(this, "getLwm2m()",ServerCredentialsAdapter.getMapper(),new CloudRequest.CloudCall<ServerCredentialsResponseData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<ServerCredentialsResponseData> call() {
        return endpoints.getServerCredentialsApi().getL2M2MServerCredentials();
      }
    } );
  }

  /**
   * Adds a subtenant trusted certificate.
   * <p>
   * An endpoint for uploading new trusted certificates.
   *
   * **Example usage:**
   * `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates -d {"name": "myCert1", "description": "very important cert", "certificate": "certificate_data", "service": "lwm2m"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
   * @param accountID null
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   * @return an added  subtenant trusted certificate
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate createSubtenantTrustedCertificate(@Nullable String accountID,
      @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate) throws MbedCloudException {
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    checkModelValidity(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final String finalAccountID = accountID;
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
    return CloudCaller.call(this, "createSubtenantTrustedCertificate()",SubtenantTrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateResp> call() {
        return endpoints.getAggregatorAccountAdminApi().addAccountCertificate(finalAccountID, SubtenantTrustedCertificateAdapter.reverseMapAddRequest(finalSubtenantTrustedCertificate));
      }
    } );
  }

  /**
   * Adds a subtenant trusted certificate.
   * <p>
   * Similar to {@link #createSubtenantTrustedCertificate(String,SubtenantTrustedCertificate)}
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   * @return something
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate createSubtenantTrustedCertificate(
      @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate) throws MbedCloudException {
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    checkModelValidity(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
    return  createSubtenantTrustedCertificate(finalSubtenantTrustedCertificate.getAccountID(), finalSubtenantTrustedCertificate);
  }

  /**
   * Deletes a subtenant trusted certificate.
   * <p>
   * An endpoint for deleting the trusted certificate.
   *
   * **Example usage:**
   * `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be deleted.
   * @param accountID null
   */
  @API
  public void deleteSubtenantTrustedCertificate(@NonNull String certId, @Nullable String accountID)
      throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    final String finalCertId = certId;
    final String finalAccountID = accountID;
    CloudCaller.call(this, "deleteSubtenantTrustedCertificate()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getAggregatorAccountAdminApi().deleteAccountCertificate(finalAccountID, finalCertId);
      }
    } );
  }

  /**
   * Deletes a subtenant trusted certificate.
   * <p>
   * Similar to {@link #deleteSubtenantTrustedCertificate(String,String)}
   * @param certId The ID of the trusted certificate to be deleted.
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   */
  @API
  public void deleteSubtenantTrustedCertificate(@NonNull String certId,
      @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final String finalCertId = certId;
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
     deleteSubtenantTrustedCertificate(finalCertId, finalSubtenantTrustedCertificate.getAccountID());
  }

  /**
   * Gets a subtenant trusted certificate.
   * <p>
   * An endpoint for retrieving a trusted certificate by ID.
   *
   * **Example usage:**
   * `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be retrieved.
   * @param accountID null
   * @return something
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate getSubtenantTrustedCertificate(@NonNull String certId,
      @Nullable String accountID) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    final String finalCertId = certId;
    final String finalAccountID = accountID;
    return CloudCaller.call(this, "getSubtenantTrustedCertificate()",SubtenantTrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateInternalResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateInternalResp> call() {
        return endpoints.getAggregatorAccountAdminApi().getAccountCertificate(finalAccountID, finalCertId);
      }
    } );
  }

  /**
   * Gets a subtenant trusted certificate.
   * <p>
   * Similar to {@link #getSubtenantTrustedCertificate(String,String)}
   * @param certId The ID of the trusted certificate to be retrieved.
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   * @return something
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate getSubtenantTrustedCertificate(@NonNull String certId,
      @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final String finalCertId = certId;
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
    return  getSubtenantTrustedCertificate(finalCertId, finalSubtenantTrustedCertificate.getAccountID());
  }

  /**
   * Modifies a subtenant trusted certificate.
   * <p>
   * An endpoint for updating existing trusted certificates.
   *
   * **Example usage:**
   * `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} -d {"description": "very important cert"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be updated.
   * @param accountID null
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   * @return an updated  subtenant trusted certificate
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate updateSubtenantTrustedCertificate(@NonNull String certId,
      @Nullable String accountID, @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate)
      throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    checkModelValidity(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final String finalCertId = certId;
    final String finalAccountID = accountID;
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
    return CloudCaller.call(this, "updateSubtenantTrustedCertificate()",SubtenantTrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateInternalResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateInternalResp> call() {
        return endpoints.getAggregatorAccountAdminApi().updateAccountCertificate(finalAccountID, finalCertId, SubtenantTrustedCertificateAdapter.reverseMapUpdateRequest(finalSubtenantTrustedCertificate));
      }
    } );
  }

  /**
   * Modifies a subtenant trusted certificate.
   * <p>
   * Similar to {@link #updateSubtenantTrustedCertificate(String,String,SubtenantTrustedCertificate)}
   * @param certId The ID of the trusted certificate to be updated.
   * @param subtenantTrustedCertificate a subtenant trusted certificate.
   * @return something
   */
  @API
  @Nullable
  public SubtenantTrustedCertificate updateSubtenantTrustedCertificate(@NonNull String certId,
      @NonNull SubtenantTrustedCertificate subtenantTrustedCertificate) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    checkNotNull(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    checkModelValidity(subtenantTrustedCertificate,TAG_SUBTENANT_TRUSTED_CERTIFICATE);
    final String finalCertId = certId;
    final SubtenantTrustedCertificate finalSubtenantTrustedCertificate = subtenantTrustedCertificate;
    return  updateSubtenantTrustedCertificate(finalCertId, finalSubtenantTrustedCertificate.getAccountID(), finalSubtenantTrustedCertificate);
  }

  /**
   * Adds a trusted certificate.
   * <p>
   * An endpoint for uploading new trusted certificates.
   *
   * **Example usage:**
   * `curl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates -d {"name": "myCert1", "description": "very important cert", "certificate": "certificate_data", "service": "lwm2m"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
   * @param trustedCertificate a trusted certificate.
   * @return an added  trusted certificate
   */
  @API
  @Nullable
  public TrustedCertificate createTrustedCertificate(@NonNull TrustedCertificate trustedCertificate)
      throws MbedCloudException {
    checkNotNull(trustedCertificate,TAG_TRUSTED_CERTIFICATE);
    checkModelValidity(trustedCertificate,TAG_TRUSTED_CERTIFICATE);
    final TrustedCertificate finalTrustedCertificate = trustedCertificate;
    return CloudCaller.call(this, "createTrustedCertificate()",TrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateResp> call() {
        return endpoints.getAccountAdminApi().addCertificate(TrustedCertificateAdapter.reverseMapAddRequest(finalTrustedCertificate));
      }
    } );
  }

  /**
   * Deletes a trusted certificate.
   * <p>
   * An endpoint for deleting a trusted certificate.
   *
   * **Example usage:**
   * `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be deleted.
   */
  @API
  public void deleteTrustedCertificate(@NonNull String certId) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    final String finalCertId = certId;
    CloudCaller.call(this, "deleteTrustedCertificate()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getDeveloperApi().deleteCertificate(finalCertId);
      }
    } );
  }

  /**
   * Gets a trusted certificate.
   * <p>
   * An endpoint for retrieving a trusted certificate by ID.
   *
   * **Example usage:**
   * `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be retrieved.
   * @return something
   */
  @API
  @Nullable
  public TrustedCertificate getTrustedCertificate(@NonNull String certId) throws
      MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    final String finalCertId = certId;
    return CloudCaller.call(this, "getTrustedCertificate()",TrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateResp> call() {
        return endpoints.getDeveloperApi().getCertificate(finalCertId);
      }
    } );
  }

  /**
   * Lists trusted certificates matching filter options.
   * <p>
   * An endpoint for retrieving trusted certificates in an array.
   *
   * **Example usage:**
   * `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates -H 'Authorization: Bearer API_KEY'`
   * @param nameEq null
   * @param serviceEq null
   * @param expireEq null
   * @param deviceExecutionModeEq null
   * @param deviceExecutionModeNeq null
   * @param ownerEq null
   * @param enrollmentModeEq null
   * @param issuerLike null
   * @param subjectLike null
   * @param options list options.
   * @return the list of trusted certificates corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<TrustedCertificate> listTrustedCertificates(@Nullable String nameEq,
      @Nullable String serviceEq, @Nullable Integer expireEq,
      @Nullable Integer deviceExecutionModeEq, @Nullable Integer deviceExecutionModeNeq,
      @Nullable String ownerEq, @Nullable Boolean enrollmentModeEq, @Nullable String issuerLike,
      @Nullable String subjectLike, @Nullable TrustedCertificateListOptions options) throws
      MbedCloudException {
    final String finalNameEq = nameEq;
    final String finalServiceEq = serviceEq;
    final Integer finalExpireEq = expireEq;
    final Integer finalDeviceExecutionModeEq = deviceExecutionModeEq;
    final Integer finalDeviceExecutionModeNeq = deviceExecutionModeNeq;
    final String finalOwnerEq = ownerEq;
    final Boolean finalEnrollmentModeEq = enrollmentModeEq;
    final String finalIssuerLike = issuerLike;
    final String finalSubjectLike = subjectLike;
    final TrustedCertificateListOptions finalOptions = (options == null)? new TrustedCertificateListOptions() : options;
    return CloudCaller.call(this, "listTrustedCertificates()",TrustedCertificateAdapter.getListMapper(),new CloudRequest.CloudCall<TrustedCertificateRespList>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateRespList> call() {
        return endpoints.getDeveloperApi().getAllCertificates(finalOptions.getPageSize(), finalOptions.getAfter(), finalOptions.getOrder().toString(), finalOptions.encodeInclude(), finalNameEq, finalServiceEq, finalExpireEq, finalDeviceExecutionModeEq, finalDeviceExecutionModeNeq, finalOwnerEq, finalEnrollmentModeEq, finalIssuerLike, finalSubjectLike);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of trusted certificates matching filter options.
   * <p>
   * Gets an iterator over all trusted certificates matching filter options.
   * @param nameEq null
   * @param serviceEq null
   * @param expireEq null
   * @param deviceExecutionModeEq null
   * @param deviceExecutionModeNeq null
   * @param ownerEq null
   * @param enrollmentModeEq null
   * @param issuerLike null
   * @param subjectLike null
   * @param options list options.
   * @return paginator over the list of trusted certificates
   */
  @API
  @Nullable
  public Paginator<TrustedCertificate> listAllTrustedCertificates(@Nullable String nameEq,
      @Nullable String serviceEq, @Nullable Integer expireEq,
      @Nullable Integer deviceExecutionModeEq, @Nullable Integer deviceExecutionModeNeq,
      @Nullable String ownerEq, @Nullable Boolean enrollmentModeEq, @Nullable String issuerLike,
      @Nullable String subjectLike, @Nullable TrustedCertificateListOptions options) throws
      MbedCloudException {
    final String finalNameEq = nameEq;
    final String finalServiceEq = serviceEq;
    final Integer finalExpireEq = expireEq;
    final Integer finalDeviceExecutionModeEq = deviceExecutionModeEq;
    final Integer finalDeviceExecutionModeNeq = deviceExecutionModeNeq;
    final String finalOwnerEq = ownerEq;
    final Boolean finalEnrollmentModeEq = enrollmentModeEq;
    final String finalIssuerLike = issuerLike;
    final String finalSubjectLike = subjectLike;
    final TrustedCertificateListOptions finalOptions = (options == null)? new TrustedCertificateListOptions() : options;
    return new Paginator<TrustedCertificate>(finalOptions, new PageRequester<TrustedCertificate>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<TrustedCertificate> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listTrustedCertificates(finalNameEq, finalServiceEq, finalExpireEq, finalDeviceExecutionModeEq, finalDeviceExecutionModeNeq, finalOwnerEq, finalEnrollmentModeEq, finalIssuerLike, finalSubjectLike, (TrustedCertificateListOptions) options);
      }
    });
  }

  /**
   * Modifies a trusted certificate.
   * <p>
   * An endpoint for updating existing trusted certificates.
   *
   * **Example usage:**
   * `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} -d {"description": "very important cert"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
   * @param certId The ID of the trusted certificate to be updated.
   * @param trustedCertificate a trusted certificate.
   * @return an updated  trusted certificate
   */
  @API
  @Nullable
  public TrustedCertificate updateTrustedCertificate(@NonNull String certId,
      @NonNull TrustedCertificate trustedCertificate) throws MbedCloudException {
    checkNotNull(certId,TAG_CERT_ID);
    checkNotNull(trustedCertificate,TAG_TRUSTED_CERTIFICATE);
    checkModelValidity(trustedCertificate,TAG_TRUSTED_CERTIFICATE);
    final String finalCertId = certId;
    final TrustedCertificate finalTrustedCertificate = trustedCertificate;
    return CloudCaller.call(this, "updateTrustedCertificate()",TrustedCertificateAdapter.getMapper(),new CloudRequest.CloudCall<TrustedCertificateResp>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<TrustedCertificateResp> call() {
        return endpoints.getDeveloperApi().updateCertificate(finalCertId, TrustedCertificateAdapter.reverseMapUpdateRequest(finalTrustedCertificate));
      }
    } );
  }
}
