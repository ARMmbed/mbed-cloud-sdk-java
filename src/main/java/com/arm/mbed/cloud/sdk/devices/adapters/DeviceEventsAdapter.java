// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEvents;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.DeviceEventData;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.DeviceEventPage;
import java.util.List;

/**
 * Adapter for device events.
 */
@Preamble(description = "Adapter for device events.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class DeviceEventsAdapter {
    /**
     * Constructor.
     */
    private DeviceEventsAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps a device event data into a device events.
     * 
     * @param toBeMapped
     *            a device event data.
     * @return mapped a device events
     */
    @Internal
    public static DeviceEvents map(DeviceEventData toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final DeviceEvents deviceEvents = new DeviceEvents();
        deviceEvents.setChanges(toBeMapped.getChanges());
        deviceEvents.setCreatedAt(TranslationUtils.toDate(toBeMapped.getCreatedAt()));
        deviceEvents.setData(toBeMapped.getData());
        deviceEvents.setDateTime(TranslationUtils.toDate(toBeMapped.getDateTime()));
        deviceEvents.setDescription(toBeMapped.getDescription());
        deviceEvents.setDeviceId(toBeMapped.getDeviceId());
        deviceEvents.setEventType(toBeMapped.getEventType());
        deviceEvents.setEventTypeCategory(toBeMapped.getEventTypeCategory());
        deviceEvents.setEventTypeDescription(toBeMapped.getEventTypeDescription());
        deviceEvents.setId(toBeMapped.getId());
        deviceEvents.setStateChange(TranslationUtils.toBool(toBeMapped.isStateChange()));
        return deviceEvents;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<DeviceEventData, DeviceEvents> getMapper() {
        return new GenericAdapter.Mapper<DeviceEventData, DeviceEvents>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public DeviceEvents map(DeviceEventData toBeMapped) {
                return DeviceEventsAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a device event page into a device events.
     * 
     * @param toBeMapped
     *            a device event page.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<DeviceEvents> mapList(DeviceEventPage toBeMapped) {
        final DeviceEventPage finalList = toBeMapped;
        final GenericAdapter.RespList<DeviceEventData> respList = new GenericAdapter.RespList<DeviceEventData>() {
            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<DeviceEventData> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }

            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }
        };
        return GenericAdapter.mapList(respList, DeviceEventsAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<DeviceEventPage, ListResponse<DeviceEvents>> getListMapper() {
        return new GenericAdapter.Mapper<DeviceEventPage, ListResponse<DeviceEvents>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<DeviceEvents> map(DeviceEventPage toBeMapped) {
                return DeviceEventsAdapter.mapList(toBeMapped);
            }
        };
    }
}
