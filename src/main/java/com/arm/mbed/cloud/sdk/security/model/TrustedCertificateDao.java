// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import com.arm.mbed.cloud.sdk.Security;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for trusted certificates.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for trusted certificates.")
public class TrustedCertificateDao extends AbstractModelDao<TrustedCertificate> implements CrudDao<TrustedCertificate> {
    /**
     * Constructor.
     */
    public TrustedCertificateDao() throws MbedCloudException {
        super();
    }

    /**
     * Clones this instance.
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public TrustedCertificateDao clone() {
        try {
            return new TrustedCertificateDao().configureAndGet(module == null ? null : module.clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#createTrustedCertificate(TrustedCertificate)}
     */
    @Override
    public void create() throws MbedCloudException {
        checkDaoConfiguration();
        setModel(((Security) module).createTrustedCertificate(getModel()));
    }

    /**
     * Adds a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#createTrustedCertificate(TrustedCertificate)}
     * 
     * @param trustedCertificate
     *            a trusted certificate.
     */
    @Override
    public void create(@NonNull TrustedCertificate trustedCertificate) throws MbedCloudException {
        checkDaoConfiguration();
        setModel(trustedCertificate);
        create();
    }

    /**
     * Deletes a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#deleteTrustedCertificate(TrustedCertificate)}
     */
    @Override
    public void delete() throws MbedCloudException {
        checkDaoConfiguration();
        ((Security) module).deleteTrustedCertificate(getModel());
    }

    /**
     * Deletes a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#deleteTrustedCertificate(TrustedCertificate)}
     * 
     * @param trustedCertificate
     *            a trusted certificate.
     */
    @Override
    public void delete(@NonNull TrustedCertificate trustedCertificate) throws MbedCloudException {
        checkDaoConfiguration();
        setModel(trustedCertificate);
        delete();
    }

    /**
     * Deletes a trusted certificate.
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#deleteTrustedCertificate(String)}
     * 
     * @param id
     *            The ID of the trusted certificate to be deleted.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        checkDaoConfiguration();
        ((Security) module).deleteTrustedCertificate(id);
    }

    /**
     * Fetch an existing developer certificate to connect to the bootstrap server.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#getDeveloperCertificateInfo(TrustedCertificate)}
     * 
     * @return something
     */
    public DeveloperCertificate getDeveloperCertificateInfo() throws MbedCloudException {
        checkDaoConfiguration();
        return ((Security) module).getDeveloperCertificateInfo(getModel());
    }

    /**
     * Fetch an existing developer certificate to connect to the bootstrap server.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#getDeveloperCertificateInfo(String)}
     * 
     * @param id
     *            mUUID that uniquely identifies the developer certificate.
     * @return something
     */
    public DeveloperCertificate getDeveloperCertificateInfo(@NonNull String id) throws MbedCloudException {
        checkDaoConfiguration();
        return ((Security) module).getDeveloperCertificateInfo(id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected TrustedCertificate instantiateModel() {
        return new TrustedCertificate();
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Security(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Security(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Security(context);
    }

    /**
     * Gets a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#getTrustedCertificate(TrustedCertificate)}
     */
    @Override
    public void read() throws MbedCloudException {
        checkDaoConfiguration();
        setModel(((Security) module).getTrustedCertificate(getModel()));
    }

    /**
     * Gets a trusted certificate.
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#getTrustedCertificate(String)}
     * 
     * @param id
     *            Entity ID.
     */
    @Override
    public void read(@NonNull String id) throws MbedCloudException {
        checkDaoConfiguration();
        setModel(((Security) module).getTrustedCertificate(id));
    }

    /**
     * Modifies a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#updateTrustedCertificate(TrustedCertificate)}
     */
    @Override
    public void update() throws MbedCloudException {
        checkDaoConfiguration();
        setModel(((Security) module).updateTrustedCertificate(getModel()));
    }

    /**
     * Modifies a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#updateTrustedCertificate(TrustedCertificate)}
     * 
     * @param trustedCertificate
     *            a trusted certificate.
     */
    @Override
    public void update(@NonNull TrustedCertificate trustedCertificate) throws MbedCloudException {
        checkDaoConfiguration();
        setModel(trustedCertificate);
        update();
    }

    /**
     * Modifies a trusted certificate.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.TrustedCertificate#updateTrustedCertificate(String,TrustedCertificate)}
     * 
     * @param id
     *            Entity ID.
     */
    public void update(@NonNull String id) throws MbedCloudException {
        checkDaoConfiguration();
        setModel(((Security) module).updateTrustedCertificate(id, getModel()));
    }
}
