// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.accounts.adapters.AccountAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.ApiKeyAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.SubtenantUserAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.SubtenantUserInvitationAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.UserAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.UserInvitationAdapter;
import com.arm.mbed.cloud.sdk.accounts.model.Account;
import com.arm.mbed.cloud.sdk.accounts.model.AccountListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.AccountsEndpoints;
import com.arm.mbed.cloud.sdk.accounts.model.ApiKey;
import com.arm.mbed.cloud.sdk.accounts.model.ApiKeyListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitation;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.User;
import com.arm.mbed.cloud.sdk.accounts.model.UserInvitation;
import com.arm.mbed.cloud.sdk.accounts.model.UserInvitationListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.UserListOptions;
import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.AccountInfo;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.AccountInfoList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.ApiKeyInfoResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.ApiKeyInfoRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.TrustedCertificateRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInfoResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInfoRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInvitationResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInvitationRespList;
import com.arm.mbed.cloud.sdk.security.adapters.SubtenantTrustedCertificateAdapter;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificate;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions;
import retrofit2.Call;

/**
 * Specifies Accounts APIs.
 * <p>
 * API definitions exposing functionality for dealing with accounts
 */
@Preamble(description = "Specifies Accounts APIs.")
@Internal
@Module
public class Accounts extends AbstractModule {
    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ACCOUNT = "account";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ID = "id";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_API_KEY = "apiKey";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ACCOUNT_ID = "accountId";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_USER = "subtenantUser";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_USER_INVITATION = "subtenantUserInvitation";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_USER = "user";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_USER_INVITATION = "userInvitation";

    /**
     * module endpoints.
     */
    @Internal
    private final AccountsEndpoints endpoints;

    /**
     * Constructor.
     * 
     * @param client
     *            Cloud client @see {@link ApiClientWrapper}.
     */
    public Accounts(ApiClientWrapper client) {
        super(client);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            connection options @see {@link ConnectionOptions}.
     */
    public Accounts(ConnectionOptions options) {
        super(options);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param context
     *            SDK context @see {@link SdkContext}.
     */
    public Accounts(SdkContext context) {
        super(context);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     * <p>
     * Similar to
     * {@link #trustedCertificates(String,String,Integer,Integer,Integer,String,Boolean,String,String,String,SubtenantTrustedCertificateListOptions,Account)}
     * 
     * @param nameEq
     *            null
     * @param serviceEq
     *            null
     * @param expireEq
     *            null
     * @param deviceExecutionModeEq
     *            null
     * @param deviceExecutionModeNeq
     *            null
     * @param ownerEq
     *            null
     * @param enrollmentModeEq
     *            null
     * @param statusEq
     *            null
     * @param issuerLike
     *            null
     * @param subjectLike
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant trusted certificates
     */
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable String nameEq, @Nullable String serviceEq, @Nullable Integer expireEq,
                                  @Nullable Integer deviceExecutionModeEq, @Nullable Integer deviceExecutionModeNeq,
                                  @Nullable String ownerEq, @Nullable Boolean enrollmentModeEq,
                                  @Nullable String statusEq, @Nullable String issuerLike, @Nullable String subjectLike,
                                  @Nullable SubtenantTrustedCertificateListOptions options,
                                  @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final String finalNameEq = nameEq;
        final String finalServiceEq = serviceEq;
        final Integer finalExpireEq = expireEq;
        final Integer finalDeviceExecutionModeEq = deviceExecutionModeEq;
        final Integer finalDeviceExecutionModeNeq = deviceExecutionModeNeq;
        final String finalOwnerEq = ownerEq;
        final Boolean finalEnrollmentModeEq = enrollmentModeEq;
        final String finalStatusEq = statusEq;
        final String finalIssuerLike = issuerLike;
        final String finalSubjectLike = subjectLike;
        final SubtenantTrustedCertificateListOptions finalOptions = options;
        final Account finalAccount = account;
        return new Paginator<SubtenantTrustedCertificate>(finalOptions,
                                                          new PageRequester<SubtenantTrustedCertificate>() {
                                                              /**
                                                               * Makes one page request.
                                                               * 
                                                               * @param options
                                                               *            a list options.
                                                               * @return Corresponding page requester
                                                               */
                                                              @Override
                                                              public ListResponse<SubtenantTrustedCertificate>
                                                                     requestNewPage(ListOptions options) throws MbedCloudException {
                                                                  return trustedCertificates(finalNameEq,
                                                                                             finalServiceEq,
                                                                                             finalExpireEq,
                                                                                             finalDeviceExecutionModeEq,
                                                                                             finalDeviceExecutionModeNeq,
                                                                                             finalOwnerEq,
                                                                                             finalEnrollmentModeEq,
                                                                                             finalStatusEq,
                                                                                             finalIssuerLike,
                                                                                             finalSubjectLike,
                                                                                             (SubtenantTrustedCertificateListOptions) options,
                                                                                             finalAccount);
                                                              }
                                                          });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param nameEq
     *            null
     * @param serviceEq
     *            null
     * @param expireEq
     *            null
     * @param deviceExecutionModeEq
     *            null
     * @param deviceExecutionModeNeq
     *            null
     * @param ownerEq
     *            null
     * @param enrollmentModeEq
     *            null
     * @param statusEq
     *            null
     * @param issuerLike
     *            null
     * @param subjectLike
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     */
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@NonNull String id, @Nullable String nameEq, @Nullable String serviceEq,
                                  @Nullable Integer expireEq, @Nullable Integer deviceExecutionModeEq,
                                  @Nullable Integer deviceExecutionModeNeq, @Nullable String ownerEq,
                                  @Nullable Boolean enrollmentModeEq, @Nullable String statusEq,
                                  @Nullable String issuerLike, @Nullable String subjectLike,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalNameEq = nameEq;
        final String finalServiceEq = serviceEq;
        final Integer finalExpireEq = expireEq;
        final Integer finalDeviceExecutionModeEq = deviceExecutionModeEq;
        final Integer finalDeviceExecutionModeNeq = deviceExecutionModeNeq;
        final String finalOwnerEq = ownerEq;
        final Boolean finalEnrollmentModeEq = enrollmentModeEq;
        final String finalStatusEq = statusEq;
        final String finalIssuerLike = issuerLike;
        final String finalSubjectLike = subjectLike;
        final SubtenantTrustedCertificateListOptions finalOptions = (options == null) ? new SubtenantTrustedCertificateListOptions()
                                                                                      : options;
        return new Paginator<SubtenantTrustedCertificate>(finalOptions,
                                                          new PageRequester<SubtenantTrustedCertificate>() {
                                                              /**
                                                               * Makes one page request.
                                                               * 
                                                               * @param options
                                                               *            a list options.
                                                               * @return Corresponding page requester
                                                               */
                                                              @Override
                                                              public ListResponse<SubtenantTrustedCertificate>
                                                                     requestNewPage(ListOptions options) throws MbedCloudException {
                                                                  return trustedCertificates(finalId, finalNameEq,
                                                                                             finalServiceEq,
                                                                                             finalExpireEq,
                                                                                             finalDeviceExecutionModeEq,
                                                                                             finalDeviceExecutionModeNeq,
                                                                                             finalOwnerEq,
                                                                                             finalEnrollmentModeEq,
                                                                                             finalStatusEq,
                                                                                             finalIssuerLike,
                                                                                             finalSubjectLike,
                                                                                             (SubtenantTrustedCertificateListOptions) options);
                                                              }
                                                          });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of subtenant user invitations
     */
    @API
    @Nullable
    public Paginator<SubtenantUserInvitation>
           allUserInvitations(@NonNull String id, @Nullable String loginProfileEq,
                              @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserInvitationListOptions finalOptions = (options == null) ? new SubtenantUserInvitationListOptions()
                                                                                  : options;
        return new Paginator<SubtenantUserInvitation>(finalOptions, new PageRequester<SubtenantUserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<SubtenantUserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return userInvitations(finalId, finalLoginProfileEq, (SubtenantUserInvitationListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     * <p>
     * Similar to {@link #userInvitations(String,SubtenantUserInvitationListOptions,Account)}
     * 
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant user invitations
     */
    @API
    @Nullable
    public Paginator<SubtenantUserInvitation> allUserInvitations(@Nullable String loginProfileEq,
                                                                 @Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserInvitationListOptions finalOptions = options;
        final Account finalAccount = account;
        return new Paginator<SubtenantUserInvitation>(finalOptions, new PageRequester<SubtenantUserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<SubtenantUserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return userInvitations(finalLoginProfileEq, (SubtenantUserInvitationListOptions) options, finalAccount);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of subtenant users
     */
    @API
    @Nullable
    public Paginator<SubtenantUser> allUsers(@NonNull String id, @Nullable String emailEq, @Nullable String statusEq,
                                             @Nullable String statusIn, @Nullable String statusNin,
                                             @Nullable String loginProfileEq,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalEmailEq = emailEq;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserListOptions finalOptions = (options == null) ? new SubtenantUserListOptions() : options;
        return new Paginator<SubtenantUser>(finalOptions, new PageRequester<SubtenantUser>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<SubtenantUser> requestNewPage(ListOptions options) throws MbedCloudException {
                return users(finalId, finalEmailEq, finalStatusEq, finalStatusIn, finalStatusNin, finalLoginProfileEq,
                             (SubtenantUserListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     * <p>
     * Similar to {@link #users(String,String,String,String,String,SubtenantUserListOptions,Account)}
     * 
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant users
     */
    @API
    @Nullable
    public Paginator<SubtenantUser>
           allUsers(@Nullable String emailEq, @Nullable String statusEq, @Nullable String statusIn,
                    @Nullable String statusNin, @Nullable String loginProfileEq,
                    @Nullable SubtenantUserListOptions options, @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final String finalEmailEq = emailEq;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserListOptions finalOptions = options;
        final Account finalAccount = account;
        return new Paginator<SubtenantUser>(finalOptions, new PageRequester<SubtenantUser>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<SubtenantUser> requestNewPage(ListOptions options) throws MbedCloudException {
                return users(finalEmailEq, finalStatusEq, finalStatusIn, finalStatusNin, finalLoginProfileEq,
                             (SubtenantUserListOptions) options, finalAccount);
            }
        });
    }

    /**
     * Clones this instance.
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Accounts clone() {
        return new Accounts(this);
    }

    /**
     * Adds an account.
     * <p>
     * An endpoint for creating a new account.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts -d '{"display_name":
     * "MyAccount1", "admin_name": "accountAdmin1", "email": "example_admin@myaccount.info", "country": "United
     * Kingdom", "e nd_market": "Smart City", "address_line1": "110 Fulbourn Rd", "city": "Cambridge", "contact": "J.
     * Doe", "company": "Arm"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param action
     *            Action, either 'create' or 'enroll'.
     *            <ul>
     *            <li>'create' creates the account where its admin user has ACTIVE status if admin_password was defined
     *            in the request, or RESET status if no admin_password was defined. If the user already exists, its
     *            status is not modified.</li>
     *            <li>'enroll' creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish the enrollment or to notify the existing user
     *            about the new account is sent to the admin_email defined in the request.</li>
     *            </ul>
     *            .
     * @param account
     *            an account.
     * @return an added account
     */
    @API
    @Nullable
    public Account createAccount(@Nullable @DefaultValue("create") String action,
                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        final String finalAction = action;
        final Account finalAccount = account;
        return CloudCaller.call(this, "createAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .createAccount(AccountAdapter.reverseMapAddRequest(finalAccount),
                                                                       finalAction);
                                    }
                                });
    }

    /**
     * Adds an api key.
     * <p>
     * An endpoint for creating a new API key.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{"name": "MyKey1"}' -H
     * 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param apiKey
     *            an api key.
     * @return an added api key
     */
    @API
    @Nullable
    public ApiKey createApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        final ApiKey finalApiKey = apiKey;
        return CloudCaller.call(this, "createApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getDeveloperApi()
                                                        .createApiKey(ApiKeyAdapter.reverseMapAddRequest(finalApiKey));
                                    }
                                });
    }

    /**
     * Adds a subtenant user.
     * <p>
     * An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only,
     * other attributes are set in the 2nd step.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users -d {"email":
     * "myemail@company.com"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param action
     *            Create or invite user.
     * @param accountId
     *            The ID of the account.
     * @param subtenantUser
     *            a subtenant user.
     * @return an added subtenant user
     */
    @API
    @Nullable
    public SubtenantUser createSubtenantUser(@Nullable @DefaultValue("create") String action, @NonNull String accountId,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        final String finalAction = action;
        final String finalAccountId = accountId;
        final SubtenantUser finalSubtenantUser = subtenantUser;
        return CloudCaller.call(this, "createSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .createAccountUser(finalAccountId,
                                                                           SubtenantUserAdapter.reverseMapAddRequest(finalSubtenantUser),
                                                                           finalAction);
                                    }
                                });
    }

    /**
     * Adds a subtenant user.
     * <p>
     * Similar to {@link #createSubtenantUser(String,String,SubtenantUser)}
     * 
     * @param action
     *            Create or invite user.
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUser createSubtenantUser(@Nullable @DefaultValue("create") String action,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        return createSubtenantUser(action, subtenantUser.getAccountId(), subtenantUser);
    }

    /**
     * Adds a subtenant user invitation.
     * <p>
     * An endpoint for inviting a new or an existing user to join the account.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accouns/{account_id}/user-invitations -d
     * {"email": "myemail@company.com"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for. The default is 30 days. Value should be
     *            between 1 and 100 days.
     * @param accountId
     *            The ID of the account the user is invited to.
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return an added subtenant user invitation
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@Nullable int validForDays, @NonNull String accountId,
                                         @NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        checkModelValidity(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        final int finalValidForDays = validForDays;
        final String finalAccountId = accountId;
        final SubtenantUserInvitation finalSubtenantUserInvitation = subtenantUserInvitation;
        return CloudCaller.call(this, "createSubtenantUserInvitation()", SubtenantUserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .createAccountInvitation(finalAccountId,
                                                                                 SubtenantUserInvitationAdapter.reverseMapAddRequest(finalSubtenantUserInvitation)
                                                                                                               .validForDays(finalValidForDays));
                                    }
                                });
    }

    /**
     * Adds a subtenant user invitation.
     * <p>
     * Similar to {@link #createSubtenantUserInvitation(int,String,SubtenantUserInvitation)}
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for. The default is 30 days. Value should be
     *            between 1 and 100 days.
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@Nullable int validForDays,
                                         @NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        checkModelValidity(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return createSubtenantUserInvitation(validForDays, subtenantUserInvitation.getAccountId(),
                                             subtenantUserInvitation);
    }

    /**
     * Adds a user.
     * <p>
     * An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only,
     * other attributes are set in the 2nd step.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/users?action=invite -d {"email":
     * "myemail@company.com"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param action
     *            Action, either 'create' or 'invite'.
     * @param user
     *            a user.
     * @return an added user
     */
    @API
    @Nullable
    public User createUser(@Nullable @DefaultValue("create") String action,
                           @NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        final String finalAction = action;
        final User finalUser = user;
        return CloudCaller.call(this, "createUser()", UserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAccountAdminApi()
                                                        .createUser(UserAdapter.reverseMapAddRequest(finalUser),
                                                                    finalAction);
                                    }
                                });
    }

    /**
     * Adds a user invitation.
     * <p>
     * An endpoint for inviting a new or an existing user to join the account.
     * 
     * **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/user-invitations -d {"email":
     * "myemail@company.com"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for. The default is 30 days. Value should be
     *            between 1 and 100 days.
     * @param userInvitation
     *            a user invitation.
     * @return an added user invitation
     */
    @API
    @Nullable
    public UserInvitation createUserInvitation(@Nullable int validForDays,
                                               @NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        checkModelValidity(userInvitation, TAG_USER_INVITATION);
        final int finalValidForDays = validForDays;
        final UserInvitation finalUserInvitation = userInvitation;
        return CloudCaller.call(this, "createUserInvitation()", UserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAccountAdminApi()
                                                        .createInvitation(UserInvitationAdapter.reverseMapAddRequest(finalUserInvitation)
                                                                                               .validForDays(finalValidForDays));
                                    }
                                });
    }

    /**
     * Deletes an api key.
     * <p>
     * Similar to {@link #deleteApiKey(String)}
     * 
     * @param apiKey
     *            an api key.
     */
    @API
    public void deleteApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        deleteApiKey(apiKey.getId());
    }

    /**
     * Deletes an api key.
     * <p>
     * An endpoint for deleting the API key.
     * 
     * **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the API key to be deleted.
     */
    @API
    public void deleteApiKey(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteApiKey()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeveloperApi().deleteApiKey(finalId);
            }
        });
    }

    /**
     * Deletes a subtenant user.
     * <p>
     * An endpoint for deleting a user.
     * 
     * **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}
     * -H 'Authorization: Bearer API_KEY'`
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user to be deleted.
     */
    @API
    public void deleteSubtenantUser(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "deleteSubtenantUser()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAggregatorAccountAdminApi().deleteAccountUser(finalAccountId, finalId);
            }
        });
    }

    /**
     * Deletes a subtenant user.
     * <p>
     * Similar to {@link #deleteSubtenantUser(String,String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     */
    @API
    public void deleteSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        deleteSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId());
    }

    /**
     * Deletes a subtenant user invitation.
     * <p>
     * An endpoint for deleting an active user invitation which has been sent for a new or an existing user to join the
     * account.
     * 
     * **Example usage:** `curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the invitation to be deleted.
     */
    @API
    public void deleteSubtenantUserInvitation(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "deleteSubtenantUserInvitation()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAggregatorAccountAdminApi().deleteAccountInvitation(finalAccountId, finalId);
            }
        });
    }

    /**
     * Deletes a subtenant user invitation.
     * <p>
     * Similar to {@link #deleteSubtenantUserInvitation(String,String)}
     * 
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     */
    @API
    public void
           deleteSubtenantUserInvitation(@NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        deleteSubtenantUserInvitation(subtenantUserInvitation.getAccountId(), subtenantUserInvitation.getId());
    }

    /**
     * Deletes a user.
     * <p>
     * An endpoint for deleting a user.
     * 
     * **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the user to be deleted.
     */
    @API
    public void deleteUser(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteUser()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAccountAdminApi().deleteUser(finalId);
            }
        });
    }

    /**
     * Deletes a user.
     * <p>
     * Similar to {@link #deleteUser(String)}
     * 
     * @param user
     *            a user.
     */
    @API
    public void deleteUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        deleteUser(user.getId());
    }

    /**
     * Deletes a user invitation.
     * <p>
     * An endpoint for deleting an active user invitation which has been sent for a new or an existing user to join the
     * account.
     * 
     * **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} -H
     * 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the invitation to be deleted.
     */
    @API
    public void deleteUserInvitation(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteUserInvitation()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAccountAdminApi().deleteInvitation(finalId);
            }
        });
    }

    /**
     * Deletes a user invitation.
     * <p>
     * Similar to {@link #deleteUserInvitation(String)}
     * 
     * @param userInvitation
     *            a user invitation.
     */
    @API
    public void deleteUserInvitation(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        deleteUserInvitation(userInvitation.getId());
    }

    /**
     * Gets an account.
     * <p>
     * Similar to {@link #getAccount(String,String,String)}
     * 
     * @param include
     *            Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to be returned from account specific properties.
     * @param account
     *            an account.
     * @return something
     */
    @API
    @Nullable
    public Account getAccount(@Nullable String include, @Nullable String properties,
                              @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return getAccount(include, properties, account.getId());
    }

    /**
     * Gets an account.
     * <p>
     * Returns detailed information about the account.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} -H 'Authorization: Bearer
     * API_KEY'`.
     * 
     * @param include
     *            Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to be returned from account specific properties.
     * @param id
     *            Account ID.
     * @return something
     */
    @API
    @Nullable
    public Account getAccount(@Nullable String include, @Nullable String properties,
                              @NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalInclude = include;
        final String finalProperties = properties;
        final String finalId = id;
        return CloudCaller.call(this, "getAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAccountInfo(finalId, finalInclude, finalProperties);
                                    }
                                });
    }

    /**
     * Gets an api key.
     * <p>
     * Similar to {@link #getApiKey(String)}
     * 
     * @param apiKey
     *            an api key.
     * @return something
     */
    @API
    @Nullable
    public ApiKey getApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        return getApiKey(apiKey.getId());
    }

    /**
     * Gets an api key.
     * <p>
     * An endpoint for retrieving API key details.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} -H 'Authorization: Bearer
     * API_KEY'`
     * 
     * @param id
     *            The ID of the API key.
     * @return something
     */
    @API
    @Nullable
    public ApiKey getApiKey(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "getApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getDeveloperApi().getApiKey(finalId);
                                    }
                                });
    }

    /**
     * Gets module endpoints.
     * 
     * @return endpoints
     */
    public AccountsEndpoints getEndpoints() {
        return endpoints;
    }

    /**
     * Gets module name.
     * 
     * @return module name
     */
    @Override
    @Internal
    public String getModuleName() {
        return "Accounts";
    }

    /**
     * Gets a subtenant user.
     * <p>
     * An endpoint for retrieving details of the user.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} -H
     * 'Authorization: Bearer API_KEY'`
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUser getSubtenantUser(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        return CloudCaller.call(this, "getSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAggregatorAccountAdminApi().getAccountUser(finalAccountId,
                                                                                                       finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant user.
     * <p>
     * Similar to {@link #getSubtenantUser(String,String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUser getSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        return getSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId());
    }

    /**
     * Gets a subtenant user invitation.
     * <p>
     * An endpoint for retrieving the details of an active user invitation sent for a new or an existing user to join
     * the account.
     * 
     * **Example usage:** `curl
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param accountId
     *            The ID of the account the user is invited to.
     * @param id
     *            The ID of the invitation.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUserInvitation getSubtenantUserInvitation(@NonNull String accountId,
                                                              @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        return CloudCaller.call(this, "getSubtenantUserInvitation()", SubtenantUserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAccountInvitation(finalAccountId, finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant user invitation.
     * <p>
     * Similar to {@link #getSubtenantUserInvitation(String,String)}
     * 
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           getSubtenantUserInvitation(@NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return getSubtenantUserInvitation(subtenantUserInvitation.getAccountId(), subtenantUserInvitation.getId());
    }

    /**
     * Gets a user.
     * <p>
     * An endpoint for retrieving the details of a user.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -H 'Authorization: Bearer
     * API_KEY'`
     * 
     * @param id
     *            The ID of the user.
     * @return something
     */
    @API
    @Nullable
    public User getUser(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "getUser()", UserAdapter.getMapper(), new CloudRequest.CloudCall<UserInfoResp>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<UserInfoResp> call() {
                return endpoints.getAccountAdminApi().getUser(finalId);
            }
        });
    }

    /**
     * Gets a user.
     * <p>
     * Similar to {@link #getUser(String)}
     * 
     * @param user
     *            a user.
     * @return something
     */
    @API
    @Nullable
    public User getUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        return getUser(user.getId());
    }

    /**
     * Gets a user invitation.
     * <p>
     * An endpoint for retrieving the details of an active user invitation sent for a new or an existing user to join
     * the account.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} -H
     * 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the invitation.
     * @return something
     */
    @API
    @Nullable
    public UserInvitation getUserInvitation(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "getUserInvitation()", UserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAccountAdminApi().getInvitation(finalId);
                                    }
                                });
    }

    /**
     * Gets a user invitation.
     * <p>
     * Similar to {@link #getUserInvitation(String)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @return something
     */
    @API
    @Nullable
    public UserInvitation getUserInvitation(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        return getUserInvitation(userInvitation.getId());
    }

    /**
     * Lists accounts matching filter options.
     * <p>
     * Returns an array of account objects, optionally filtered by status and tier level.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts -H 'Authorization: Bearer API_KEY'`.
     * 
     * @param format
     *            Format information for the response to the query, supported: format=breakdown.
     * @param properties
     *            Property name to be returned from account specific properties.
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param tierEq
     *            null
     * @param parentEq
     *            null
     * @param endMarketEq
     *            null
     * @param countryLike
     *            null
     * @param options
     *            list options.
     * @return the list of accounts corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<Account>
           listAccounts(@Nullable String format, @Nullable String properties, @Nullable String statusEq,
                        @Nullable String statusIn, @Nullable String statusNin, @Nullable String tierEq,
                        @Nullable String parentEq, @Nullable String endMarketEq, @Nullable String countryLike,
                        @Nullable AccountListOptions options) throws MbedCloudException {
        final String finalFormat = format;
        final String finalProperties = properties;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalTierEq = tierEq;
        final String finalParentEq = parentEq;
        final String finalEndMarketEq = endMarketEq;
        final String finalCountryLike = countryLike;
        final AccountListOptions finalOptions = (options == null) ? new AccountListOptions() : options;
        return CloudCaller.call(this, "listAccounts()", AccountAdapter.getListMapper(),
                                new CloudRequest.CloudCall<AccountInfoList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfoList> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAllAccounts(finalStatusEq, finalStatusIn, finalStatusNin,
                                                                        finalTierEq, finalParentEq, finalEndMarketEq,
                                                                        finalCountryLike, finalOptions.getPageSize(),
                                                                        finalOptions.getAfter(),
                                                                        finalOptions.getOrder().toString(),
                                                                        finalOptions.encodeInclude(), finalFormat,
                                                                        finalProperties);
                                    }
                                });
    }

    /**
     * Creates a {@link Paginator} for the list of accounts matching filter options.
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param format
     *            Format information for the response to the query, supported: format=breakdown.
     * @param properties
     *            Property name to be returned from account specific properties.
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param tierEq
     *            null
     * @param parentEq
     *            null
     * @param endMarketEq
     *            null
     * @param countryLike
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of accounts
     */
    @API
    @Nullable
    public Paginator<Account>
           listAllAccounts(@Nullable String format, @Nullable String properties, @Nullable String statusEq,
                           @Nullable String statusIn, @Nullable String statusNin, @Nullable String tierEq,
                           @Nullable String parentEq, @Nullable String endMarketEq, @Nullable String countryLike,
                           @Nullable AccountListOptions options) throws MbedCloudException {
        final String finalFormat = format;
        final String finalProperties = properties;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalTierEq = tierEq;
        final String finalParentEq = parentEq;
        final String finalEndMarketEq = endMarketEq;
        final String finalCountryLike = countryLike;
        final AccountListOptions finalOptions = (options == null) ? new AccountListOptions() : options;
        return new Paginator<Account>(finalOptions, new PageRequester<Account>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<Account> requestNewPage(ListOptions options) throws MbedCloudException {
                return listAccounts(finalFormat, finalProperties, finalStatusEq, finalStatusIn, finalStatusNin,
                                    finalTierEq, finalParentEq, finalEndMarketEq, finalCountryLike,
                                    (AccountListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of api keys matching filter options.
     * <p>
     * Gets an iterator over all api keys matching filter options.
     * 
     * @param keyEq
     *            null
     * @param ownerEq
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of api keys
     */
    @API
    @Nullable
    public Paginator<ApiKey> listAllApiKeys(@Nullable String keyEq, @Nullable String ownerEq,
                                            @Nullable ApiKeyListOptions options) throws MbedCloudException {
        final String finalKeyEq = keyEq;
        final String finalOwnerEq = ownerEq;
        final ApiKeyListOptions finalOptions = (options == null) ? new ApiKeyListOptions() : options;
        return new Paginator<ApiKey>(finalOptions, new PageRequester<ApiKey>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<ApiKey> requestNewPage(ListOptions options) throws MbedCloudException {
                return listApiKeys(finalKeyEq, finalOwnerEq, (ApiKeyListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of user invitations matching filter options.
     * <p>
     * Gets an iterator over all user invitations matching filter options.
     * 
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of user invitations
     */
    @API
    @Nullable
    public Paginator<UserInvitation>
           listAllUserInvitations(@Nullable String loginProfileEq,
                                  @Nullable UserInvitationListOptions options) throws MbedCloudException {
        final String finalLoginProfileEq = loginProfileEq;
        final UserInvitationListOptions finalOptions = (options == null) ? new UserInvitationListOptions() : options;
        return new Paginator<UserInvitation>(finalOptions, new PageRequester<UserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<UserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return listUserInvitations(finalLoginProfileEq, (UserInvitationListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of users matching filter options.
     * <p>
     * Gets an iterator over all users matching filter options.
     * 
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return paginator over the list of users
     */
    @API
    @Nullable
    public Paginator<User> listAllUsers(@Nullable String emailEq, @Nullable String statusEq, @Nullable String statusIn,
                                        @Nullable String statusNin, @Nullable String loginProfileEq,
                                        @Nullable UserListOptions options) throws MbedCloudException {
        final String finalEmailEq = emailEq;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalLoginProfileEq = loginProfileEq;
        final UserListOptions finalOptions = (options == null) ? new UserListOptions() : options;
        return new Paginator<User>(finalOptions, new PageRequester<User>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             */
            @Override
            public ListResponse<User> requestNewPage(ListOptions options) throws MbedCloudException {
                return listUsers(finalEmailEq, finalStatusEq, finalStatusIn, finalStatusNin, finalLoginProfileEq,
                                 (UserListOptions) options);
            }
        });
    }

    /**
     * Lists api keys matching filter options.
     * <p>
     * An endpoint for retrieving API keys in an array, optionally filtered by the owner.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H 'Authorization: Bearer API_KEY'`
     * 
     * @param keyEq
     *            null
     * @param ownerEq
     *            null
     * @param options
     *            list options.
     * @return the list of api keys corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<ApiKey> listApiKeys(@Nullable String keyEq, @Nullable String ownerEq,
                                            @Nullable ApiKeyListOptions options) throws MbedCloudException {
        final String finalKeyEq = keyEq;
        final String finalOwnerEq = ownerEq;
        final ApiKeyListOptions finalOptions = (options == null) ? new ApiKeyListOptions() : options;
        return CloudCaller.call(this, "listApiKeys()", ApiKeyAdapter.getListMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoRespList> call() {
                                        return endpoints.getDeveloperApi().getAllApiKeys(finalOptions.getPageSize(),
                                                                                         finalOptions.getAfter(),
                                                                                         finalOptions.getOrder()
                                                                                                     .toString(),
                                                                                         finalOptions.encodeInclude(),
                                                                                         finalKeyEq, finalOwnerEq);
                                    }
                                });
    }

    /**
     * Lists user invitations matching filter options.
     * <p>
     * An endpoint for retrieving the details of all the active user invitations sent for new or existing users to join
     * the account.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/user-invitations -H 'Authorization: Bearer
     * API_KEY'`
     * 
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return the list of user invitations corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<UserInvitation>
           listUserInvitations(@Nullable String loginProfileEq,
                               @Nullable UserInvitationListOptions options) throws MbedCloudException {
        final String finalLoginProfileEq = loginProfileEq;
        final UserInvitationListOptions finalOptions = (options == null) ? new UserInvitationListOptions() : options;
        return CloudCaller.call(this, "listUserInvitations()", UserInvitationAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInvitationRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationRespList> call() {
                                        return endpoints.getAccountAdminApi()
                                                        .getAllInvitations(finalOptions.getPageSize(),
                                                                           finalOptions.getAfter(),
                                                                           finalOptions.getOrder().toString(),
                                                                           finalLoginProfileEq);
                                    }
                                });
    }

    /**
     * Lists users matching filter options.
     * <p>
     * An endpoint for retrieving the details of all users.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/users -H 'Authorization: Bearer API_KEY'`
     * 
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return the list of users corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<User> listUsers(@Nullable String emailEq, @Nullable String statusEq, @Nullable String statusIn,
                                        @Nullable String statusNin, @Nullable String loginProfileEq,
                                        @Nullable UserListOptions options) throws MbedCloudException {
        final String finalEmailEq = emailEq;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalLoginProfileEq = loginProfileEq;
        final UserListOptions finalOptions = (options == null) ? new UserListOptions() : options;
        return CloudCaller.call(this, "listUsers()", UserAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoRespList> call() {
                                        return endpoints.getAccountAdminApi()
                                                        .getAllUsers(finalOptions.getPageSize(),
                                                                     finalOptions.getAfter(),
                                                                     finalOptions.getOrder().toString(),
                                                                     finalOptions.encodeInclude(), finalEmailEq,
                                                                     finalStatusEq, finalStatusIn, finalStatusNin,
                                                                     finalLoginProfileEq);
                                    }
                                });
    }

    /**
     * Gets my account.
     * <p>
     * Returns detailed information about the account.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies -H 'Authorization:
     * Bearer API_KEY'`.
     * 
     * @param include
     *            Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to be returned from account specific properties.
     * @return something
     */
    @API
    @Nullable
    public Account myAccount(@Nullable String include, @Nullable String properties) throws MbedCloudException {
        final String finalInclude = include;
        final String finalProperties = properties;
        return CloudCaller.call(this, "myAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getDeveloperApi().getMyAccountInfo(finalInclude,
                                                                                            finalProperties);
                                    }
                                });
    }

    /**
     * Gets my api key.
     * <p>
     * An endpoint for retrieving API key details.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H 'Authorization: Bearer API_KEY'`
     * 
     * @return something
     */
    @API
    @Nullable
    public ApiKey myApiKey() throws MbedCloudException {
        return CloudCaller.call(this, "myApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getDeveloperApi().getMyApiKey();
                                    }
                                });
    }

    /**
     * Get all trusted certificates.
     * 
     * <p>
     * Similar to
     * {@link #trustedCertificates(String,String,String,Integer,Integer,Integer,String,Boolean,String,String,String,SubtenantTrustedCertificateListOptions)}
     * 
     * @param nameEq
     *            null
     * @param serviceEq
     *            null
     * @param expireEq
     *            null
     * @param deviceExecutionModeEq
     *            null
     * @param deviceExecutionModeNeq
     *            null
     * @param ownerEq
     *            null
     * @param enrollmentModeEq
     *            null
     * @param statusEq
     *            null
     * @param issuerLike
     *            null
     * @param subjectLike
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable String nameEq, @Nullable String serviceEq, @Nullable Integer expireEq,
                               @Nullable Integer deviceExecutionModeEq, @Nullable Integer deviceExecutionModeNeq,
                               @Nullable String ownerEq, @Nullable Boolean enrollmentModeEq, @Nullable String statusEq,
                               @Nullable String issuerLike, @Nullable String subjectLike,
                               @Nullable SubtenantTrustedCertificateListOptions options,
                               @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return trustedCertificates(account.getId(), nameEq, serviceEq, expireEq, deviceExecutionModeEq,
                                   deviceExecutionModeNeq, ownerEq, enrollmentModeEq, statusEq, issuerLike, subjectLike,
                                   options);
    }

    /**
     * Get all trusted certificates.
     * 
     * <p>
     * An endpoint for retrieving trusted certificates in an array.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates -H
     * 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            Account ID.
     * @param nameEq
     *            null
     * @param serviceEq
     *            null
     * @param expireEq
     *            null
     * @param deviceExecutionModeEq
     *            null
     * @param deviceExecutionModeNeq
     *            null
     * @param ownerEq
     *            null
     * @param enrollmentModeEq
     *            null
     * @param statusEq
     *            null
     * @param issuerLike
     *            null
     * @param subjectLike
     *            null
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@NonNull String id, @Nullable String nameEq, @Nullable String serviceEq,
                               @Nullable Integer expireEq, @Nullable Integer deviceExecutionModeEq,
                               @Nullable Integer deviceExecutionModeNeq, @Nullable String ownerEq,
                               @Nullable Boolean enrollmentModeEq, @Nullable String statusEq,
                               @Nullable String issuerLike, @Nullable String subjectLike,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalNameEq = nameEq;
        final String finalServiceEq = serviceEq;
        final Integer finalExpireEq = expireEq;
        final Integer finalDeviceExecutionModeEq = deviceExecutionModeEq;
        final Integer finalDeviceExecutionModeNeq = deviceExecutionModeNeq;
        final String finalOwnerEq = ownerEq;
        final Boolean finalEnrollmentModeEq = enrollmentModeEq;
        final String finalStatusEq = statusEq;
        final String finalIssuerLike = issuerLike;
        final String finalSubjectLike = subjectLike;
        final SubtenantTrustedCertificateListOptions finalOptions = (options == null) ? new SubtenantTrustedCertificateListOptions()
                                                                                      : options;
        return CloudCaller.call(this, "trustedCertificates()", SubtenantTrustedCertificateAdapter.getListMapper(),
                                new CloudRequest.CloudCall<TrustedCertificateRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<TrustedCertificateRespList> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAllAccountCertificates(finalId, finalOptions.getPageSize(),
                                                                                   finalOptions.getAfter(),
                                                                                   finalOptions.getOrder().toString(),
                                                                                   finalOptions.encodeInclude(),
                                                                                   finalNameEq, finalServiceEq,
                                                                                   finalExpireEq,
                                                                                   finalDeviceExecutionModeEq,
                                                                                   finalDeviceExecutionModeNeq,
                                                                                   finalOwnerEq, finalEnrollmentModeEq,
                                                                                   finalStatusEq, finalIssuerLike,
                                                                                   finalSubjectLike);
                                    }
                                });
    }

    /**
     * Modifies an account.
     * <p>
     * Similar to {@link #updateAccount(String,Account)}
     * 
     * @param account
     *            an account.
     * @return something
     */
    @API
    @Nullable
    public Account updateAccount(@NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return updateAccount(account.getId(), account);
    }

    /**
     * Modifies an account.
     * <p>
     * An endpoint for updating an account.
     * 
     * **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} -d '{"phone_number":
     * "12345678"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            Account ID.
     * @param account
     *            an account.
     * @return an updated account
     */
    @API
    @Nullable
    public Account updateAccount(@NonNull String id, @NonNull Account account) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        final String finalId = id;
        final Account finalAccount = account;
        return CloudCaller.call(this, "updateAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .updateAccount(finalId,
                                                                       AccountAdapter.reverseMapUpdateRequest(finalAccount));
                                    }
                                });
    }

    /**
     * Modifies an api key.
     * <p>
     * Similar to {@link #updateApiKey(String,ApiKey)}
     * 
     * @param apiKey
     *            an api key.
     * @return something
     */
    @API
    @Nullable
    public ApiKey updateApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        return updateApiKey(apiKey.getId(), apiKey);
    }

    /**
     * Modifies an api key.
     * <p>
     * An endpoint for updating API key details.
     * 
     * **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} -d '{"name":
     * "TestApiKey25"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the API key.
     * @param apiKey
     *            an api key.
     * @return an updated api key
     */
    @API
    @Nullable
    public ApiKey updateApiKey(@NonNull String id, @NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        final String finalId = id;
        final ApiKey finalApiKey = apiKey;
        return CloudCaller.call(this, "updateApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getDeveloperApi()
                                                        .updateApiKey(finalId,
                                                                      ApiKeyAdapter.reverseMapUpdateRequest(finalApiKey));
                                    }
                                });
    }

    /**
     * Modifies a subtenant user.
     * <p>
     * An endpoint for updating user details.
     * 
     * **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} -d
     * '{"username": "myusername"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @param subtenantUser
     *            a subtenant user.
     * @return an updated subtenant user
     */
    @API
    @Nullable
    public SubtenantUser updateSubtenantUser(@NonNull String accountId, @NonNull String id,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        final String finalAccountId = accountId;
        final String finalId = id;
        final SubtenantUser finalSubtenantUser = subtenantUser;
        return CloudCaller.call(this, "updateSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .updateAccountUser(finalAccountId, finalId,
                                                                           SubtenantUserAdapter.reverseMapUpdateRequest(finalSubtenantUser));
                                    }
                                });
    }

    /**
     * Modifies a subtenant user.
     * <p>
     * Similar to {@link #updateSubtenantUser(String,String,SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     */
    @API
    @Nullable
    public SubtenantUser updateSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        return updateSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId(), subtenantUser);
    }

    /**
     * Modifies a user.
     * <p>
     * An endpoint for updating user details.
     * 
     * **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -d '{"username":
     * "myusername"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            The ID of the user.
     * @param user
     *            a user.
     * @return an updated user
     */
    @API
    @Nullable
    public User updateUser(@NonNull String id, @NonNull User user) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        final String finalId = id;
        final User finalUser = user;
        return CloudCaller.call(this, "updateUser()", UserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAccountAdminApi()
                                                        .updateUser(finalId,
                                                                    UserAdapter.reverseMapUpdateRequest(finalUser));
                                    }
                                });
    }

    /**
     * Modifies a user.
     * <p>
     * Similar to {@link #updateUser(String,User)}
     * 
     * @param user
     *            a user.
     * @return something
     */
    @API
    @Nullable
    public User updateUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        return updateUser(user.getId(), user);
    }

    /**
     * Get the details of all the user invitations.
     * 
     * <p>
     * An endpoint for retrieving the details of all the active user invitations sent for new or existing users to join
     * the account.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations -H
     * 'Authorization: Bearer API_KEY'`
     * 
     * @param id
     *            Account ID.
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantUserInvitation>
           userInvitations(@NonNull String id, @Nullable String loginProfileEq,
                           @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserInvitationListOptions finalOptions = (options == null) ? new SubtenantUserInvitationListOptions()
                                                                                  : options;
        return CloudCaller.call(this, "userInvitations()", SubtenantUserInvitationAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInvitationRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationRespList> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAllAccountInvitations(finalId, finalOptions.getPageSize(),
                                                                                  finalOptions.getAfter(),
                                                                                  finalOptions.getOrder().toString(),
                                                                                  finalLoginProfileEq);
                                    }
                                });
    }

    /**
     * Get the details of all the user invitations.
     * 
     * <p>
     * Similar to {@link #userInvitations(String,String,SubtenantUserInvitationListOptions)}
     * 
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantUserInvitation> userInvitations(@Nullable String loginProfileEq,
                                                                 @Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return userInvitations(account.getId(), loginProfileEq, options);
    }

    /**
     * Get all user details.
     * 
     * <p>
     * An endpoint for retrieving details of all users.
     * 
     * **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param id
     *            Account ID.
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @return the list of subtenant users corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantUser> users(@NonNull String id, @Nullable String emailEq, @Nullable String statusEq,
                                             @Nullable String statusIn, @Nullable String statusNin,
                                             @Nullable String loginProfileEq,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final String finalEmailEq = emailEq;
        final String finalStatusEq = statusEq;
        final String finalStatusIn = statusIn;
        final String finalStatusNin = statusNin;
        final String finalLoginProfileEq = loginProfileEq;
        final SubtenantUserListOptions finalOptions = (options == null) ? new SubtenantUserListOptions() : options;
        return CloudCaller.call(this, "users()", SubtenantUserAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoRespList> call() {
                                        return endpoints.getAggregatorAccountAdminApi()
                                                        .getAllAccountUsers(finalId, finalOptions.getPageSize(),
                                                                            finalOptions.getAfter(),
                                                                            finalOptions.getOrder().toString(),
                                                                            finalOptions.encodeInclude(), finalEmailEq,
                                                                            finalStatusEq, finalStatusIn,
                                                                            finalStatusNin, finalLoginProfileEq);
                                    }
                                });
    }

    /**
     * Get all user details.
     * 
     * <p>
     * Similar to {@link #users(String,String,String,String,String,String,SubtenantUserListOptions)}
     * 
     * @param emailEq
     *            null
     * @param statusEq
     *            null
     * @param statusIn
     *            null
     * @param statusNin
     *            null
     * @param loginProfileEq
     *            null
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant users corresponding to filter options (One page).
     */
    @API
    @Nullable
    public ListResponse<SubtenantUser>
           users(@Nullable String emailEq, @Nullable String statusEq, @Nullable String statusIn,
                 @Nullable String statusNin, @Nullable String loginProfileEq,
                 @Nullable SubtenantUserListOptions options, @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return users(account.getId(), emailEq, statusEq, statusIn, statusNin, loginProfileEq, options);
    }

    /**
     * Validate the user email.
     * 
     * <p>
     * An endpoint for validating the user email.
     * 
     * **Example usage:** `curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/validate-email -H 'Authorization:
     * Bearer API_KEY'`
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user whose email is validated.
     */
    @API
    public void validateEmail(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "validateEmail()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAggregatorAccountAdminApi().validateAccountUserEmail(finalAccountId, finalId);
            }
        });
    }

    /**
     * Validate the user email.
     * 
     * <p>
     * Similar to {@link #validateEmail(String,String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     */
    @API
    public void validateEmail(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        validateEmail(subtenantUser.getAccountId(), subtenantUser.getId());
    }
}
