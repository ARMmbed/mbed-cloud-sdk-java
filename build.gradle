// Project properties
version = SDKVersion
group = SDKGroup

buildscript {
  repositories {
   jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    classpath "de.aaschmid:gradle-cpd-plugin:1.0"
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
  }
}



apply plugin: 'java-library-distribution'
apply plugin: 'checkstyle' //code style checks
apply plugin: 'jdepend'// design quality
apply plugin: 'findbugs' //static analysis
apply plugin: 'pmd' //static analysis
apply plugin: "de.aaschmid.cpd" //Code duplication
apply plugin: 'project-report'
apply plugin: "com.github.johnrengelman.shadow"

apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"    


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

allprojects {
	//The following is to override the version/group values contained in subproject build files
	tasks.whenTaskAdded { task ->
		 if (project != project(':lwm2m')){
			 project.version = SDKVersion
			 project.group = SDKGroup
			 if (task.hasProperty('version')){
					task.version = SDKVersion
			 }
			 if (task.hasProperty('group')){
					task.group = SDKGroup
			 }
		 }
		
	}

    task info {
        doLast { task ->
            println "Building $task.project.name project..."
            println "Version: $task.project.version"
            println "Group: $task.project.group"
        }
    }
    compileJava.dependsOn info
    
    apply plugin: 'java-library'
    apply plugin: 'license-report'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
	apply plugin: 'maven'
    apply plugin: 'build-dashboard'
    apply plugin: 'project-report'
	
	compileJava {
		// Java SDK compatibility
		sourceCompatibility  JavaVersion.VERSION_1_7.toString()
		targetCompatibility  JavaVersion.VERSION_1_7.toString()

		options.compilerArgs += ["-deprecation","-parameters"]
		options.fork = true
		doFirst {
			println 'Compiler args for compiled SDK : ' + options.compilerArgs
		}
	}
	jar {
		manifest {
			attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
					   'Implementation-Version': project.version,
					   'Implementation-Vendor': 'Arm Limited')
		}
		doLast {
			updateArtifactList("SDK_JAR",jar.archivePath)
		}
	}
	compileTestJava {
		options.compilerArgs += ["-g","-deprecation","-parameters"]
		options.fork = true
		doFirst {
			println 'Compiler args for testing: ' + options.compilerArgs
		}
	}
}

subprojects {

}


dependencies {
   api 'org.slf4j:slf4j-api:1.7.7'
   api 'com.squareup.okhttp3:logging-interceptor:3.8.0'
   compile project(':support-annotations')
   compile project(':lwm2m')
   compile project(':backends:connector_ca')
   compile project(':backends:device_directory')
   compile project(':backends:iam')
   compile project(':backends:mds')
   compile project(':backends:statistics')
   compile project(':backends:update_service')
   testCompile 'io.vertx:vertx-web:3.4.2'
   testCompile 'org.reflections:reflections:0.9.10'
   testCompile 'org.slf4j:slf4j-simple:1.7.7'
   testImplementation 'junit:junit:4.12'
}


//Disable javadoc step as comment formatting is incorrect in parts of the project (e.g. Endpoint or Resource)
project(':backends:mds').javadoc.enabled = false
project(':backends:statistics').javadoc.enabled = false

checkstyle {
    toolVersion = '7.2'
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleMain {
   reports {
      xml.enabled true
      html.enabled true
   }
}
jdepend {
   sourceSets = [sourceSets.main]
   ignoreFailures = true
}
jdependMain {
   reports {
      xml.enabled true
   }
}
jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

pmd {
   toolVersion = "5.0.4"
   sourceSets = [sourceSets.main]
   ignoreFailures = false
   ruleSets = []
   ruleSetFiles = files("$rootDir/config/pmd/pmd-rules.xml")
}
pmdMain {
   excludes = []
   reports {
      xml.enabled false
      html.enabled true
   }
}

cpd {
    toolVersion = '5.4.2'
}
cpdCheck {
    reports {
        text.enabled = false
        xml.enabled = true
    }
    ignoreFailures = true
    source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
}

findbugs {
    //toolVersion = "2.0.1"
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = file("$rootProject.projectDir/config/findbugs/findbugs-exlude.xml")
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def updateArtifactList(propertyName, value){
        def props = new Properties()
        def propFile = new File("artifacts.properties");
        if( propFile.exists()){
            propFile.withReader { props.load(it) }
        }
        props.setProperty(propertyName.toString(), value.toString())
        props.sort()
        def fileWriter = propFile.newWriter()
        props.store(fileWriter, "Arm Mbed Cloud JAVA SDK artifacts");
        fileWriter.close()
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    doLast {
        updateArtifactList("SOURCE_JAR",sourcesJar.archivePath)
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    doLast {
        updateArtifactList("JAVADOC_JAR",javadocJar.archivePath)
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

shadowJar {
   classifier = 'full'
    doLast {
        updateArtifactList("SDK_FULL_JAR",shadowJar.archivePath)
    }
}

task testJar(type: Jar) {
    dependsOn compileTestJava,jar
    manifest {
        attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'Arm Limited',
                   'Main-Class': 'com.arm.mbed.cloud.sdk.TestServer')
    }
    baseName = project.name + '-test'
    from sourceSets.test.output+sourceSets.test.allSource
    doLast {
        updateArtifactList("TEST_JAR",testJar.archivePath)
    }
}

task shadowTestJar(type: Jar) {
    description 'Generates the fat jar containing all necessary code for the test server to run'
    group 'Verification'
    dependsOn testJar, shadowJar
    manifest {
        attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'Arm Limited',
                   'Main-Class': 'com.arm.mbed.cloud.sdk.TestServer')
    }
    baseName = project.name + '-test-full'
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.test.output
    with jar
    doLast {
        updateArtifactList("TEST_FULL_JAR",shadowTestJar.archivePath)
    }
}
publishing {
	publications {
		mavenJava(MavenPublication) {

			from components.java
			artifact sourcesJar
			artifact javadocJar

			pom.withXml {
					asNode().appendNode('description',
								'Arm Mbed Cloud SDK')
			   }
		}
	}
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"  
    publish {
        repository {
            repoKey = "${artifactory_deployment_repository}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
        defaults {
            //List of Gradle Publications (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
            publications ('mavenJava')
            ////List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory. 
            publishConfigs('archives')
            publishBuildInfo = true   //Publish build-info to Artifactory.
            publishArtifacts = true   //Publish artifacts to Artifactory.
            publishPom = true   //Publish generated POM files to Artifactory.                
        }
    }
}