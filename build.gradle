// Java SDK version
version = '1.0.0'

buildscript {
  repositories {
   jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    classpath "de.aaschmid:gradle-cpd-plugin:1.0"
  }
}


apply plugin: 'java-library'
apply plugin: 'java-library-distribution'
apply plugin:'license-report'
apply plugin: 'checkstyle' //code style checks
apply plugin: 'jdepend'// design quality
apply plugin: 'findbugs' //static analysis
apply plugin: 'pmd' //static analysis
apply plugin: "de.aaschmid.cpd" //Code duplication
apply plugin: "jacoco" //Code coverage
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'build-dashboard'
apply plugin: 'project-report'
apply plugin: "com.github.johnrengelman.shadow"


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
   // testImplementation 'junit:junit:4.12'
   api 'org.slf4j:slf4j-api:1.7.7'
   compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
   compile project(':support-annotations')
   compile project(':lwm2m')
   compile project(':backends:connector_ca')
   compile project(':backends:device_directory')
   compile project(':backends:iam')
   compile project(':backends:mds')
   compile project(':backends:statistics')
   compile project(':backends:update_service')
   testCompile 'io.vertx:vertx-web:3.4.2'
   testCompile 'org.reflections:reflections:0.9.10'
   testCompile 'org.slf4j:slf4j-simple:1.7.7'
   testImplementation 'junit:junit:4.12'
}

allprojects {
    task info {
        doLast { task ->
            println "Building $task.project.name project..."
        }
    }
    compileJava.dependsOn info
}

subprojects {
    apply plugin: 'java-library'
    apply plugin:'license-report'
    apply plugin: "jacoco"
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'build-dashboard'
}

//Disable javadoc step as comment formatting is incorrect in parts of the project (e.g. Endpoint or Resource)
project(':backends:mds').javadoc.enabled = false
project(':backends:statistics').javadoc.enabled = false

checkstyle {
    toolVersion = '7.2'
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleMain {
   reports {
      xml.enabled true
      html.enabled true
   }
}
jdepend {
   sourceSets = [sourceSets.main]
   ignoreFailures = true
}
jdependMain {
   reports {
      xml.enabled true
   }
}
jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

pmd {
   toolVersion = "5.0.4"
   sourceSets = [sourceSets.main]
   ignoreFailures = false
   ruleSets = []
   ruleSetFiles = files("$rootDir/config/pmd/pmd-rules.xml")
}
pmdMain {
   excludes = []
   reports {
      xml.enabled false
      html.enabled true
   }
}

cpd {
    toolVersion = '5.4.2'
}
cpdCheck {
    reports {
        text.enabled = false
        xml.enabled = true
    }
    ignoreFailures = true
    source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
}

findbugs {
    //toolVersion = "2.0.1"
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = file("$rootProject.projectDir/config/findbugs/findbugs-exlude.xml")
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def updateArtifactList(propertyName, value){
        def props = new Properties()
        def propFile = new File("artifacts.properties");
        if( propFile.exists()){
            propFile.withReader { props.load(it) }
        }
        println propFile.toString()
        props.setProperty(propertyName.toString(), value.toString())
        props.sort()
        def fileWriter = propFile.newWriter()
        props.store(fileWriter, "Arm Mbed Cloud JAVA SDK artifacts");
        fileWriter.close()
}

compileJava {
    // Java SDK compatibility
    sourceCompatibility  JavaVersion.VERSION_1_7.toString()
    targetCompatibility  JavaVersion.VERSION_1_7.toString()

	options.compilerArgs += ["-deprecation","-parameters"]
	options.fork = true
    println 'Compiler args for compiled SDK : ' + options.compilerArgs
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    doLast {
        updateArtifactList("SOURCE_JAR",sourcesJar.archivePath)
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    doLast {
        updateArtifactList("JAVADOC_JAR",javadocJar.archivePath)
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


jar {
    manifest {
        attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'Arm Limited')
    }
    doLast {
        updateArtifactList("SDK_JAR",jar.archivePath)
    }
}

shadowJar {
   classifier = 'full'
    doLast {
        updateArtifactList("SDK_FULL_JAR",shadowJar.archivePath)
    }
}

compileTestJava {
	options.compilerArgs += ["-g","-deprecation","-parameters"]
	options.fork = true
    println 'Compiler args for testing: ' + options.compilerArgs
}

task testJar(type: Jar) {
    dependsOn compileTestJava,jar
    manifest {
        attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'Arm Limited',
                   'Main-Class': 'com.arm.mbed.cloud.sdk.TestServer')
    }
    baseName = project.name + '-test'
    from sourceSets.test.output+sourceSets.test.allSource
    doLast {
        updateArtifactList("TEST_JAR",testJar.archivePath)
    }
}

task shadowTestJar(type: Jar) {
    description 'Generates the fat jar containing all necessary code for the test server to run'
    group 'Verification'
    dependsOn testJar, shadowJar
    manifest {
        attributes('Implementation-Title': 'Arm Mbed Cloud SDK for Java',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'Arm Limited',
                   'Main-Class': 'com.arm.mbed.cloud.sdk.TestServer')
    }
    baseName = project.name + '-test-full'
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.test.output
    with jar
    doLast {
        updateArtifactList("TEST_FULL_JAR",shadowTestJar.archivePath)
    }
}