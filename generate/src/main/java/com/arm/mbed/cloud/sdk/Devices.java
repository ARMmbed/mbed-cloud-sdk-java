// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.adapters.DataFileAdapter;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.common.model.DataFile;
import com.arm.mbed.cloud.sdk.devices.adapters.DeviceAdapter;
import com.arm.mbed.cloud.sdk.devices.adapters.DeviceEnrollmentAdapter;
import com.arm.mbed.cloud.sdk.devices.adapters.DeviceEnrollmentBulkCreateAdapter;
import com.arm.mbed.cloud.sdk.devices.adapters.DeviceEnrollmentBulkDeleteAdapter;
import com.arm.mbed.cloud.sdk.devices.adapters.DeviceEventsAdapter;
import com.arm.mbed.cloud.sdk.devices.model.Device;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEnrollment;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEnrollmentBulkCreate;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEnrollmentBulkDelete;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEnrollmentListOptions;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEvents;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEventsListOptions;
import com.arm.mbed.cloud.sdk.devices.model.DeviceListOptions;
import com.arm.mbed.cloud.sdk.devices.model.DevicesEndpoints;
import com.arm.mbed.cloud.sdk.internal.devicedirectory.model.DeviceData;
import com.arm.mbed.cloud.sdk.internal.devicedirectory.model.DeviceEventData;
import com.arm.mbed.cloud.sdk.internal.devicedirectory.model.DeviceEventPage;
import com.arm.mbed.cloud.sdk.internal.devicedirectory.model.DevicePage;
import com.arm.mbed.cloud.sdk.internal.enrollment.model.BulkResponse;
import com.arm.mbed.cloud.sdk.internal.enrollment.model.EnrollmentIdentities;
import com.arm.mbed.cloud.sdk.internal.enrollment.model.EnrollmentIdentity;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import okhttp3.MultipartBody;
import retrofit2.Call;

/**
 * Specifies Devices APIs.
 * <p>
 *  API definitions exposing functionality for dealing with devices */
@Preamble(
    description = "Specifies Devices APIs."
)
@Internal
@Module
public class Devices extends AbstractModule {
  /**
   * Parameter name. */
  @Internal
  private static final String TAG_ARG0 = "arg0";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVICE = "device";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_ARG1 = "arg1";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVICE_ENROLLMENT = "deviceEnrollment";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_ENROLLMENT_IDENTITIES = "enrollmentIdentities";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVICE_ENROLLMENT_BULK_CREATE = "deviceEnrollmentBulkCreate";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVICE_ENROLLMENT_BULK_DELETE = "deviceEnrollmentBulkDelete";

  /**
   * Parameter name. */
  @Internal
  private static final String TAG_DEVICE_EVENTS = "deviceEvents";

  /**
   * module endpoints. */
  @Internal
  private final DevicesEndpoints endpoints;

  /**
   * Constructor.
   * @param options connection options @see {@link ConnectionOptions}.
   */
  public Devices(ConnectionOptions options) {
    super(options);
    this.endpoints = new DevicesEndpoints(this.serviceRegistry);
  }

  /**
   * Constructor.
   * @param client Cloud client @see {@link ApiClientWrapper}.
   */
  public Devices(ApiClientWrapper client) {
    super(client);
    this.endpoints = new DevicesEndpoints(this.serviceRegistry);
  }

  /**
   * Constructor.
   * @param context SDK context @see {@link SdkContext}.
   */
  public Devices(SdkContext context) {
    super(context);
    this.endpoints = new DevicesEndpoints(this.serviceRegistry);
  }

  /**
   * Gets module endpoints.
   * @return endpoints
   */
  public DevicesEndpoints getEndpoints() {
    return endpoints;
  }

  /**
   * Adds a device.
   * <p>
   * Create a new device.
   * @param arg0 a device.
   * @return an added  device
   */
  @API
  @Nullable
  public Device createDevice(@NonNull Device arg0) throws MbedCloudException {
    checkNotNull(arg0,TAG_ARG0);
    checkModelValidity(arg0,TAG_ARG0);
    final Device finalArg0 = arg0;
    return CloudCaller.call(this, "createDevice()",DeviceAdapter.getMapper(),new CloudRequest.CloudCall<DeviceData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeviceData> call() {
        return endpoints.getDefaultApi().deviceCreate(DeviceAdapter.reverseMapAddRequest(finalArg0));
      }
    } );
  }

  /**
   * Adds a device.
   * <p>
   * Similar to {@link #createDevice(Device)}
   * @param device a device.
   * @return something
   */
  @API
  @Nullable
  public Device createDevice(@NonNull Device device) throws MbedCloudException {
    checkNotNull(device,TAG_DEVICE);
    checkModelValidity(device,TAG_DEVICE);
    final Device finalDevice = device;
    return  createDevice(finalDevice.getArg0());
  }

  /**
   * Deletes a device.
   * <p>
   * Delete device. Only available for devices with a developer certificate. Attempts to delete a device with a production certicate will return a 400 response.
   * @param arg0 null
   */
  @API
  public void deleteDevice(@Nullable String arg0) throws MbedCloudException {
    final String finalArg0 = arg0;
    CloudCaller.call(this, "deleteDevice()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getDefaultApi().deviceDestroy(finalArg0);
      }
    } );
  }

  /**
   * Deletes a device.
   * <p>
   * Similar to {@link #deleteDevice(String)}
   * @param device a device.
   */
  @API
  public void deleteDevice(@NonNull Device device) throws MbedCloudException {
    checkNotNull(device,TAG_DEVICE);
    final Device finalDevice = device;
     deleteDevice(finalDevice.getArg0());
  }

  /**
   * Gets a device.
   * <p>
   * Retrieve information about a specific device.
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public Device getDevice(@Nullable String arg0) throws MbedCloudException {
    final String finalArg0 = arg0;
    return CloudCaller.call(this, "getDevice()",DeviceAdapter.getMapper(),new CloudRequest.CloudCall<DeviceData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeviceData> call() {
        return endpoints.getDefaultApi().deviceRetrieve(finalArg0);
      }
    } );
  }

  /**
   * Gets a device.
   * <p>
   * Similar to {@link #getDevice(String)}
   * @param device a device.
   * @return something
   */
  @API
  @Nullable
  public Device getDevice(@NonNull Device device) throws MbedCloudException {
    checkNotNull(device,TAG_DEVICE);
    final Device finalDevice = device;
    return  getDevice(finalDevice.getArg0());
  }

  /**
   * Lists devices matching filter options.
   * <p>
   * List all devices.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param options list options.
   * @return the list of devices corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<Device> listDevices(@Nullable Integer arg0, @Nullable String arg1,
      @Nullable String arg2, @Nullable String arg3, @Nullable String arg4,
      @Nullable DeviceListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final String finalArg4 = arg4;
    final DeviceListOptions finalOptions = (options == null)? new DeviceListOptions() : options;
    return CloudCaller.call(this, "listDevices()",DeviceAdapter.getListMapper(),new CloudRequest.CloudCall<DevicePage>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DevicePage> call() {
        return endpoints.getDefaultApi().deviceList(finalArg0, finalArg1, finalArg2, finalArg3, finalArg4);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of devices matching filter options.
   * <p>
   * Gets an iterator over all devices matching filter options.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param options list options.
   * @return paginator over the list of devices
   */
  @API
  @Nullable
  public Paginator<Device> listAllDevices(@Nullable Integer arg0, @Nullable String arg1,
      @Nullable String arg2, @Nullable String arg3, @Nullable String arg4,
      @Nullable DeviceListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final String finalArg4 = arg4;
    final DeviceListOptions finalOptions = (options == null)? new DeviceListOptions() : options;
    return new Paginator<Device>(finalOptions, new PageRequester<Device>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<Device> requestNewPage(ListOptions options) throws MbedCloudException {
        return listDevices(finalArg0, finalArg1, finalArg2, finalArg3, finalArg4, (DeviceListOptions) options);
      }
    });
  }

  /**
   * Modifies a device.
   * <p>
   * Update a specific device.
   * @param arg0 null
   * @param arg1 a device.
   * @return an updated  device
   */
  @API
  @Nullable
  public Device updateDevice(@Nullable String arg0, @NonNull Device arg1) throws
      MbedCloudException {
    checkNotNull(arg1,TAG_ARG1);
    checkModelValidity(arg1,TAG_ARG1);
    final String finalArg0 = arg0;
    final Device finalArg1 = arg1;
    return CloudCaller.call(this, "updateDevice()",DeviceAdapter.getMapper(),new CloudRequest.CloudCall<DeviceData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeviceData> call() {
        return endpoints.getDefaultApi().deviceUpdate(finalArg0, DeviceAdapter.reverseMapUpdateRequest(finalArg1));
      }
    } );
  }

  /**
   * Modifies a device.
   * <p>
   * Similar to {@link #updateDevice(String,Device)}
   * @param device a device.
   * @return something
   */
  @API
  @Nullable
  public Device updateDevice(@NonNull Device device) throws MbedCloudException {
    checkNotNull(device,TAG_DEVICE);
    checkModelValidity(device,TAG_DEVICE);
    final Device finalDevice = device;
    return  updateDevice(finalDevice.getArg0(), finalDevice.getArg1());
  }

  /**
   * Gets module name.
   * @return module name
   */
  @Override
  @Internal
  public String getModuleName() {
    return "Devices";
  }

  /**
   * Adds a device enrollment.
   * <p>
   * When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account.
   * <br>
   * **Example usage:**
   * ```
   * curl -X POST \
   * -H 'Authorization: Bearer <valid access token>' \
   * -H 'content-type: application/json' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments \
   * -d '{"enrollment_identity": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5"}'
   * ```
   * 
   * @param arg0 a device enrollment.
   * @return an added  device enrollment
   */
  @API
  @Nullable
  public DeviceEnrollment createDeviceEnrollment(@NonNull DeviceEnrollment arg0) throws
      MbedCloudException {
    checkNotNull(arg0,TAG_ARG0);
    checkModelValidity(arg0,TAG_ARG0);
    final DeviceEnrollment finalArg0 = arg0;
    return CloudCaller.call(this, "createDeviceEnrollment()",DeviceEnrollmentAdapter.getMapper(),new CloudRequest.CloudCall<EnrollmentIdentity>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<EnrollmentIdentity> call() {
        return endpoints.getPublicApiApi().createDeviceEnrollment(DeviceEnrollmentAdapter.reverseMapAddRequest(finalArg0));
      }
    } );
  }

  /**
   * Adds a device enrollment.
   * <p>
   * Similar to {@link #createDeviceEnrollment(DeviceEnrollment)}
   * @param deviceEnrollment a device enrollment.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollment createDeviceEnrollment(@NonNull DeviceEnrollment deviceEnrollment) throws
      MbedCloudException {
    checkNotNull(deviceEnrollment,TAG_DEVICE_ENROLLMENT);
    checkModelValidity(deviceEnrollment,TAG_DEVICE_ENROLLMENT);
    final DeviceEnrollment finalDeviceEnrollment = deviceEnrollment;
    return  createDeviceEnrollment(finalDeviceEnrollment.getArg0());
  }

  /**
   * Deletes a device enrollment.
   * <p>
   * To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership-first-to-claim-by-enrollment-list.html).
   * <br>
   * **Example usage:**
   * ```
   * curl -X DELETE \
   * -H 'Authorization: Bearer <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}
   * ```
   * 
   * @param arg0 null
   */
  @API
  public void deleteDeviceEnrollment(@Nullable String arg0) throws MbedCloudException {
    final String finalArg0 = arg0;
    CloudCaller.call(this, "deleteDeviceEnrollment()",null,new CloudRequest.CloudCall<Void>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<Void> call() {
        return endpoints.getPublicApiApi().deleteDeviceEnrollment(finalArg0);
      }
    } );
  }

  /**
   * Deletes a device enrollment.
   * <p>
   * Similar to {@link #deleteDeviceEnrollment(String)}
   * @param deviceEnrollment a device enrollment.
   */
  @API
  public void deleteDeviceEnrollment(@NonNull DeviceEnrollment deviceEnrollment) throws
      MbedCloudException {
    checkNotNull(deviceEnrollment,TAG_DEVICE_ENROLLMENT);
    final DeviceEnrollment finalDeviceEnrollment = deviceEnrollment;
     deleteDeviceEnrollment(finalDeviceEnrollment.getArg0());
  }

  /**
   * Gets a device enrollment.
   * <p>
   * To check the enrollment info in detail, for example date of claim and expiration date.
   * **Example usage:**
   * ```
   * curl -X GET \
   * -H 'Authorization: Bearer <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}
   * ```
   * 
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollment getDeviceEnrollment(@Nullable String arg0) throws MbedCloudException {
    final String finalArg0 = arg0;
    return CloudCaller.call(this, "getDeviceEnrollment()",DeviceEnrollmentAdapter.getMapper(),new CloudRequest.CloudCall<EnrollmentIdentity>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<EnrollmentIdentity> call() {
        return endpoints.getPublicApiApi().getDeviceEnrollment(finalArg0);
      }
    } );
  }

  /**
   * Gets a device enrollment.
   * <p>
   * Similar to {@link #getDeviceEnrollment(String)}
   * @param deviceEnrollment a device enrollment.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollment getDeviceEnrollment(@NonNull DeviceEnrollment deviceEnrollment) throws
      MbedCloudException {
    checkNotNull(deviceEnrollment,TAG_DEVICE_ENROLLMENT);
    final DeviceEnrollment finalDeviceEnrollment = deviceEnrollment;
    return  getDeviceEnrollment(finalDeviceEnrollment.getArg0());
  }

  /**
   * Lists device enrollments matching filter options.
   * <p>
   * Provides a list of pending and claimed enrollments.
   * **Example usage:**
   * ```
   * curl -X GET \
   * -H 'Authorization: Bearer <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments
   * ```
   * With query parameters:
   * ```
   * curl -X GET \
   * -H 'Authorization: Bearer <valid access token>' \
   * 'https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit=10'
   * ```
   * 
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param options list options.
   * @return the list of device enrollments corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<DeviceEnrollment> listDeviceEnrollments(@Nullable Integer arg0,
      @Nullable String arg1, @Nullable String arg2, @Nullable String arg3,
      @Nullable DeviceEnrollmentListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final DeviceEnrollmentListOptions finalOptions = (options == null)? new DeviceEnrollmentListOptions() : options;
    return CloudCaller.call(this, "listDeviceEnrollments()",DeviceEnrollmentAdapter.getListMapper(),new CloudRequest.CloudCall<EnrollmentIdentities>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<EnrollmentIdentities> call() {
        return endpoints.getPublicApiApi().getDeviceEnrollments(finalArg0, finalArg1, finalArg2, finalArg3);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of device enrollments matching filter options.
   * <p>
   * Gets an iterator over all device enrollments matching filter options.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param options list options.
   * @return paginator over the list of device enrollments
   */
  @API
  @Nullable
  public Paginator<DeviceEnrollment> listAllDeviceEnrollments(@Nullable Integer arg0,
      @Nullable String arg1, @Nullable String arg2, @Nullable String arg3,
      @Nullable DeviceEnrollmentListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final DeviceEnrollmentListOptions finalOptions = (options == null)? new DeviceEnrollmentListOptions() : options;
    return new Paginator<DeviceEnrollment>(finalOptions, new PageRequester<DeviceEnrollment>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<DeviceEnrollment> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listDeviceEnrollments(finalArg0, finalArg1, finalArg2, finalArg3, (DeviceEnrollmentListOptions) options);
      }
    });
  }

  /**
   * Adds a device enrollment bulk create.
   * <p>
   * With bulk upload, you can upload a `CSV` file containing a number of enrollment IDs.
   *
   * **Example usage:**
   * ```
   * curl -X POST \
   * -H 'Authorization: Bearer <valid access token>' \
   * -F 'enrollment_identities=@/path/to/enrollments/enrollments.csv' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads
   *
   * ```
   * **The validation rules for an CSV file.**
   * 1. The first line in the uploaded CSV file is assumed to be the header and is ignored.
   * 1. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. Everything after the first comma is ignored.
   * 1. Valid enrollments begin with A followed by a - and 95 characters in the format as below.
   * 1. Up to one enrollment ID is expected per line. Empty lines are ignored.
   * 1. Trailing comma at the end of the line is optional.
   * 1. Lines are terminated with either a line feed \n, a carriage return \r, or both together \r\n.
   * 1. Leading and trailing whitespace characters (Unicode U+0000 - U+0020) are removed from the identity before validation.
   * 1. Empty identities are ignored.
   * 1. Valid enrollment identities may be enclosed within quotes. Whitespace inside quotes is not trimmed and will fail validation. Empty quotes are also considered to be an invalid enrollment identity.
   * 1. UTF-8 encoding is expected.
   *
   *
   * **A valid enrollment file:**
   * ```
   * "Examples of valid identites, notes"
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12",
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12"
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12, This text is ignored,
   *  A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12       , Whitespace is trimmed before validation
   *   "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12"       , Whitespace around quotes is also trimmed
   *
   * ```
   *
   * **A file containing invalid identities:**
   * ```
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12", First line is ignored
   * A_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Invalid version identifier
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Too short identity
   * "", Empty quotes are an invalid identity
   * " A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12 ", Whitespace inside quotes is not trimmed causing an error
   *
   * ```
   *
   * **An empty file:**
   * ```
   * "Examples of blank lines that are ignored"
   *
   * ,,
   * , This is also considered to a blank line
   * ```
   * 
   * @param enrollmentIdentities The `CSV` file containing the enrollment IDs. The maximum file size is 10MB.
   * 
   * @param arg0 null
   * @return an added  device enrollment bulk create
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkCreate createDeviceEnrollmentBulkCreate(
      @NonNull DataFile enrollmentIdentities, @Nullable MultipartBody.Part arg0) throws
      MbedCloudException {
    checkNotNull(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    checkModelValidity(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    final DataFile finalEnrollmentIdentities = enrollmentIdentities;
    final MultipartBody.Part finalArg0 = arg0;
    return CloudCaller.call(this, "createDeviceEnrollmentBulkCreate()",DeviceEnrollmentBulkCreateAdapter.getMapper(),new CloudRequest.CloudCall<BulkResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<BulkResponse> call() {
        return endpoints.getPublicApiApi().createBulkDeviceEnrollment(DataFileAdapter.reverseMap(finalArg0));
      }
    } );
  }

  /**
   * Adds a device enrollment bulk create.
   * <p>
   * Similar to {@link #createDeviceEnrollmentBulkCreate(DataFile,Part)}
   * @param enrollmentIdentities The `CSV` file containing the enrollment IDs. The maximum file size is 10MB.
   * 
   * @param deviceEnrollmentBulkCreate a device enrollment bulk create.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkCreate createDeviceEnrollmentBulkCreate(
      @NonNull DataFile enrollmentIdentities,
      @NonNull DeviceEnrollmentBulkCreate deviceEnrollmentBulkCreate) throws MbedCloudException {
    checkNotNull(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    checkNotNull(deviceEnrollmentBulkCreate,TAG_DEVICE_ENROLLMENT_BULK_CREATE);
    checkModelValidity(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    checkModelValidity(deviceEnrollmentBulkCreate,TAG_DEVICE_ENROLLMENT_BULK_CREATE);
    final DataFile finalEnrollmentIdentities = enrollmentIdentities;
    final DeviceEnrollmentBulkCreate finalDeviceEnrollmentBulkCreate = deviceEnrollmentBulkCreate;
    return  createDeviceEnrollmentBulkCreate(finalEnrollmentIdentities, finalDeviceEnrollmentBulkCreate.getArg0());
  }

  /**
   * Gets a device enrollment bulk create.
   * <p>
   * Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided.
   * **Report file format:**
   * The report files have a header line and the value are separated by commas. The lines are delimited by a line break (CRLF). The report file is compliant with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).
   * An example of a full report file:
   * ```
   * "entity__id","entity__created_at","error__code","error__type","error__message","error__fields"
   * "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","2018-09-07T12:10:58.428Z","","","",""
   * "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","2018-09-07T12:10:58.428Z","","","",""
   * ```
   * An example of an error report file:
   * ```
   * "entity__id","error__code","error__type","error__message","error__fields"
   * "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","409","duplicate","Enrollment identity is already claimed in the mbed Cloud.",""
   * "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","409","duplicate","Enrollment identity is already claimed in the mbed Cloud.",""
   * ```
   * **Example usage:**
   * ```
   * curl -X GET \
   * -H 'Authorization: Bearer <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id}
   * ```
   * 
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkCreate getDeviceEnrollmentBulkCreate(@Nullable String arg0) throws
      MbedCloudException {
    final String finalArg0 = arg0;
    return CloudCaller.call(this, "getDeviceEnrollmentBulkCreate()",DeviceEnrollmentBulkCreateAdapter.getMapper(),new CloudRequest.CloudCall<BulkResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<BulkResponse> call() {
        return endpoints.getPublicApiApi().getBulkDeviceEnrollment(finalArg0);
      }
    } );
  }

  /**
   * Gets a device enrollment bulk create.
   * <p>
   * Similar to {@link #getDeviceEnrollmentBulkCreate(String)}
   * @param deviceEnrollmentBulkCreate a device enrollment bulk create.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkCreate getDeviceEnrollmentBulkCreate(
      @NonNull DeviceEnrollmentBulkCreate deviceEnrollmentBulkCreate) throws MbedCloudException {
    checkNotNull(deviceEnrollmentBulkCreate,TAG_DEVICE_ENROLLMENT_BULK_CREATE);
    final DeviceEnrollmentBulkCreate finalDeviceEnrollmentBulkCreate = deviceEnrollmentBulkCreate;
    return  getDeviceEnrollmentBulkCreate(finalDeviceEnrollmentBulkCreate.getArg0());
  }

  /**
   * Deletes a device enrollment bulk delete.
   * <p>
   * With bulk delete, you can upload a `CSV` file containing a number of enrollment IDs to be deleted.
   *
   * **Example usage:**
   * ```
   * curl -X POST \
   * -H 'Authorization: Bearer <valid access token>' \
   * -F 'enrollment_identities=@/path/to/enrollments/enrollments.csv' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes
   *
   * ```
   * **The validation rules for an CSV file.**
   * 1. The first line in the uploaded CSV file is assumed to be the header and is ignored.
   * 1. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. Everything after the first comma is ignored.
   * 1. Valid enrollments begin with A followed by a - and 95 characters in the format as below.
   * 1. Up to one enrollment ID is expected per line. Empty lines are ignored.
   * 1. Trailing comma at the end of the line is optional.
   * 1. Lines are terminated with either a line feed \n, a carriage return \r, or both together \r\n.
   * 1. Leading and trailing whitespace characters (Unicode U+0000 - U+0020) are removed from the identity before validation.
   * 1. Empty identities are ignored.
   * 1. Valid enrollment identities may be enclosed within quotes. Whitespace inside quotes is not trimmed and will fail validation. Empty quotes are also considered to be an invalid enrollment identity.
   * 1. UTF-8 encoding is expected.
   *
   *
   * **A valid enrollment file:**
   * ```
   * "Examples of valid identites, notes"
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12",
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12"
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12, This text is ignored,
   *  A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12       , Whitespace is trimmed before validation
   *   "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12"       , Whitespace around quotes is also trimmed
   *
   * ```
   *
   * **A file containing invalid identities:**
   * ```
   * "A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12", First line is ignored
   * A_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Invalid version identifier
   * A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Too short identity
   * "", Empty quotes are an invalid identity
   * " A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12 ", Whitespace inside quotes is not trimmed causing an error
   *
   * ```
   *
   * **An empty file:**
   * ```
   * "Examples of blank lines that are ignored"
   *
   * ,,
   * , This is also considered to a blank line
   * ```
   * 
   * @param enrollmentIdentities The `CSV` file containing the enrollment IDs. The maximum file size is 10MB.
   * 
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkDelete deleteDeviceEnrollmentBulkDelete(
      @NonNull DataFile enrollmentIdentities, @Nullable MultipartBody.Part arg0) throws
      MbedCloudException {
    checkNotNull(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    checkModelValidity(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    final DataFile finalEnrollmentIdentities = enrollmentIdentities;
    final MultipartBody.Part finalArg0 = arg0;
    return CloudCaller.call(this, "deleteDeviceEnrollmentBulkDelete()",DeviceEnrollmentBulkDeleteAdapter.getMapper(),new CloudRequest.CloudCall<BulkResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<BulkResponse> call() {
        return endpoints.getPublicApiApi().deleteBulkDeviceEnrollment(DataFileAdapter.reverseMap(finalArg0));
      }
    } );
  }

  /**
   * Deletes a device enrollment bulk delete.
   * <p>
   * Similar to {@link #deleteDeviceEnrollmentBulkDelete(DataFile,Part)}
   * @param enrollmentIdentities The `CSV` file containing the enrollment IDs. The maximum file size is 10MB.
   * 
   * @param deviceEnrollmentBulkDelete a device enrollment bulk delete.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkDelete deleteDeviceEnrollmentBulkDelete(
      @NonNull DataFile enrollmentIdentities,
      @NonNull DeviceEnrollmentBulkDelete deviceEnrollmentBulkDelete) throws MbedCloudException {
    checkNotNull(enrollmentIdentities,TAG_ENROLLMENT_IDENTITIES);
    checkNotNull(deviceEnrollmentBulkDelete,TAG_DEVICE_ENROLLMENT_BULK_DELETE);
    final DataFile finalEnrollmentIdentities = enrollmentIdentities;
    final DeviceEnrollmentBulkDelete finalDeviceEnrollmentBulkDelete = deviceEnrollmentBulkDelete;
    return  deleteDeviceEnrollmentBulkDelete(finalEnrollmentIdentities, finalDeviceEnrollmentBulkDelete.getArg0());
  }

  /**
   * Gets a device enrollment bulk delete.
   * <p>
   * Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided.
   * **Report file format:**
   * The report files have a header line and the value are separated by commas. The lines are delimited by a line break (CRLF). The report file is compliant with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).
   * An example of a full report file:
   * ```
   * "entity__id","entity__deleted_at","error__code","error__type","error__message","error__fields"
   * "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","2018-09-07T12:10:58.428Z","","","",""
   * "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","2018-09-07T12:10:58.428Z","","","",""
   * ```
   * An example of an error report file:
   * ```
   * "entity__id","error__code","error__type","error__message","error__fields"
   * "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","409","duplicate","Enrollment identity is already claimed in the mbed Cloud.",""
   * "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","409","duplicate","Enrollment identity is already claimed in the mbed Cloud.",""
   * ```
   * **Example usage:**
   * ```
   * curl -X GET \
   * -H 'Authorization: Bearer <valid access token>' \
   * https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id}
   * ```
   * 
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkDelete getDeviceEnrollmentBulkDelete(@Nullable String arg0) throws
      MbedCloudException {
    final String finalArg0 = arg0;
    return CloudCaller.call(this, "getDeviceEnrollmentBulkDelete()",DeviceEnrollmentBulkDeleteAdapter.getMapper(),new CloudRequest.CloudCall<BulkResponse>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<BulkResponse> call() {
        return endpoints.getPublicApiApi().getBulkDeviceEnrollmentDelete(finalArg0);
      }
    } );
  }

  /**
   * Gets a device enrollment bulk delete.
   * <p>
   * Similar to {@link #getDeviceEnrollmentBulkDelete(String)}
   * @param deviceEnrollmentBulkDelete a device enrollment bulk delete.
   * @return something
   */
  @API
  @Nullable
  public DeviceEnrollmentBulkDelete getDeviceEnrollmentBulkDelete(
      @NonNull DeviceEnrollmentBulkDelete deviceEnrollmentBulkDelete) throws MbedCloudException {
    checkNotNull(deviceEnrollmentBulkDelete,TAG_DEVICE_ENROLLMENT_BULK_DELETE);
    final DeviceEnrollmentBulkDelete finalDeviceEnrollmentBulkDelete = deviceEnrollmentBulkDelete;
    return  getDeviceEnrollmentBulkDelete(finalDeviceEnrollmentBulkDelete.getArg0());
  }

  /**
   * Gets a device events.
   * <p>
   * Retrieve a specific device event.
   * @param arg0 null
   * @return something
   */
  @API
  @Nullable
  public DeviceEvents getDeviceEvents(@Nullable String arg0) throws MbedCloudException {
    final String finalArg0 = arg0;
    return CloudCaller.call(this, "getDeviceEvents()",DeviceEventsAdapter.getMapper(),new CloudRequest.CloudCall<DeviceEventData>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeviceEventData> call() {
        return endpoints.getDefaultApi().deviceEventRetrieve(finalArg0);
      }
    } );
  }

  /**
   * Gets a device events.
   * <p>
   * Similar to {@link #getDeviceEvents(String)}
   * @param deviceEvents a device events.
   * @return something
   */
  @API
  @Nullable
  public DeviceEvents getDeviceEvents(@NonNull DeviceEvents deviceEvents) throws
      MbedCloudException {
    checkNotNull(deviceEvents,TAG_DEVICE_EVENTS);
    final DeviceEvents finalDeviceEvents = deviceEvents;
    return  getDeviceEvents(finalDeviceEvents.getArg0());
  }

  /**
   * Lists device events matching filter options.
   * <p>
   * List all device events for an account.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param options list options.
   * @return the list of device events corresponding to filter options (One page).
   */
  @API
  @Nullable
  public ListResponse<DeviceEvents> listDeviceEventss(@Nullable Integer arg0, @Nullable String arg1,
      @Nullable String arg2, @Nullable String arg3, @Nullable String arg4,
      @Nullable DeviceEventsListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final String finalArg4 = arg4;
    final DeviceEventsListOptions finalOptions = (options == null)? new DeviceEventsListOptions() : options;
    return CloudCaller.call(this, "listDeviceEventss()",DeviceEventsAdapter.getListMapper(),new CloudRequest.CloudCall<DeviceEventPage>() {
      /**
       * Makes the low level call to the Cloud.
       * @return Corresponding Retrofit2 Call object
       */
      @Override
      public Call<DeviceEventPage> call() {
        return endpoints.getDefaultApi().deviceEventList(finalArg0, finalArg1, finalArg2, finalArg3, finalArg4);
      }
    } );
  }

  /**
   * Creates a {@link Paginator} for the list of device events matching filter options.
   * <p>
   * Gets an iterator over all device events matching filter options.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param options list options.
   * @return paginator over the list of device events
   */
  @API
  @Nullable
  public Paginator<DeviceEvents> listAllDeviceEventss(@Nullable Integer arg0, @Nullable String arg1,
      @Nullable String arg2, @Nullable String arg3, @Nullable String arg4,
      @Nullable DeviceEventsListOptions options) throws MbedCloudException {
    final Integer finalArg0 = arg0;
    final String finalArg1 = arg1;
    final String finalArg2 = arg2;
    final String finalArg3 = arg3;
    final String finalArg4 = arg4;
    final DeviceEventsListOptions finalOptions = (options == null)? new DeviceEventsListOptions() : options;
    return new Paginator<DeviceEvents>(finalOptions, new PageRequester<DeviceEvents>() {
      /**
       * Makes one page request.
       * @param options a list options.
       * @return Corresponding page requester
       */
      @Override
      public ListResponse<DeviceEvents> requestNewPage(ListOptions options) throws
          MbedCloudException {
        return listDeviceEventss(finalArg0, finalArg1, finalArg2, finalArg3, finalArg4, (DeviceEventsListOptions) options);
      }
    });
  }
}
