// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [AccountDao]
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CreateDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;
import com.arm.mbed.cloud.sdk.common.dao.UpdateDao;
import java.lang.Boolean;
import java.lang.CloneNotSupportedException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

/**
 * Data Access Object (DAO) for accounts.
 * <p>
 * @see <a  href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access Object</a> */
@Preamble(
    description = "Data Access Object (DAO) for accounts."
)
public abstract class AbstractAccountDao extends AbstractModelDao<Account> implements CreateDao<Account>, UpdateDao<Account>, ReadDao<Account> {
  /**
   * Constructor.
   */
  public AbstractAccountDao() throws MbedCloudException {
    super();
  }

  /**
   * Adds an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#createAccount(String,Account,String)}
   * @param action Action, either 'create' or 'enroll'. <ul><li>'create' creates the account where its admin user has ACTIVE status if admin_password was defined in the request, or RESET status if no admin_password was defined. If the user already exists, its status is not modified. </li><li>'enroll' creates the account where its admin user has ENROLLING status. If the user already exists, its status is not modified. Email to finish the enrollment or to notify the existing user about the new account is sent to the admin_email defined in the request. </li></ul>.
   * @param arg1 null
   */
  public void create(
      @Nullable @DefaultValue("create") @Nullable @DefaultValue("create") String action,
      @Nullable @Nullable String arg1) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.createAccount(action, getModel(), arg1));
  }

  /**
   * Adds an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#createAccount(String,Account)}
   * @param action Action, either 'create' or 'enroll'. <ul><li>'create' creates the account where its admin user has ACTIVE status if admin_password was defined in the request, or RESET status if no admin_password was defined. If the user already exists, its status is not modified. </li><li>'enroll' creates the account where its admin user has ENROLLING status. If the user already exists, its status is not modified. Email to finish the enrollment or to notify the existing user about the new account is sent to the admin_email defined in the request. </li></ul>.
   */
  public void create(
      @Nullable @DefaultValue("create") @Nullable @DefaultValue("create") String action) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.createAccount(action, getModel()));
  }

  /**
   * Gets an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#getAccount(String,String,String,String,String)}
   * @param include Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
   * @param properties Property name to be returned from account specific properties.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   */
  public void read(@Nullable @Nullable String include, @Nullable @Nullable String properties,
      @Nullable @Nullable String arg0, @Nullable @Nullable String arg1,
      @Nullable @Nullable String arg2) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.getAccount(include, properties, arg0, arg1, arg2));
  }

  /**
   * Gets an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#getAccount(String,String,Account)}
   * @param include Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
   * @param properties Property name to be returned from account specific properties.
   */
  public void read(@Nullable @Nullable String include, @Nullable @Nullable String properties) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.getAccount(include, properties, getModel()));
  }

  /**
   * Get account info.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#me(String,String,String,String)}
   * @param include Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
   * @param properties Property name to be returned from account specific properties.
   * @param arg0 null
   * @param arg1 null
   */
  public void me(@Nullable @Nullable String include, @Nullable @Nullable String properties,
      @Nullable @Nullable String arg0, @Nullable @Nullable String arg1) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.me(include, properties, arg0, arg1));
  }

  /**
   * Get account info.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#me(String,String,Account)}
   * @param include Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
   * @param properties Property name to be returned from account specific properties.
   */
  public void me(@Nullable @Nullable String include, @Nullable @Nullable String properties) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.me(include, properties, getModel()));
  }

  /**
   * Get API key details.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myApiKey()}
   */
  public void myApiKey() throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myApiKey());
  }

  /**
   * Get all API keys.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myApiKeys(String,String,int,AccountOrder,Integer,String,String,String,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param arg5 null
   */
  public void myApiKeys(@Nullable @Nullable String after, @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") AccountOrder order,
      @Nullable @Nullable Integer arg0, @Nullable @Nullable String arg1,
      @Nullable @Nullable String arg2, @Nullable @Nullable String arg3,
      @Nullable @Nullable String arg4, @Nullable @Nullable String arg5) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myApiKeys(after, include, limit, order, arg0, arg1, arg2, arg3, arg4, arg5));
  }

  /**
   * Get all API keys.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myApiKeys(String,String,int,AccountOrder,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   */
  public void myApiKeys(@Nullable @Nullable String after, @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") AccountOrder order) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myApiKeys(after, include, limit, order, getModel()));
  }

  /**
   * Get all trusted certificates.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myTrustedCertificates(String,int,int,boolean,int,String,String,int,String,String,String,String,String,Integer,String,String,String,String,String,Integer,Integer,Integer,String,Boolean,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param deviceExecutionModeEq Device execution mode, as 1 for developer certificates or as another natural integer value.
   * @param deviceExecutionModeNeq Device execution mode not equals filter.
   * @param enrollmentModeEq Enrollment mode filter.
   * @param expireEq Expire filter in days.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param issuerLike Issuer filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param nameEq Filter for certificate name.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param ownerEq Owner name filter.
   * @param serviceEq Service filter, either lwm2m or bootstrap.
   * @param subjectLike Subject filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param arg5 null
   * @param arg6 null
   * @param arg7 null
   * @param arg8 null
   * @param arg9 null
   * @param arg10 null
   * @param arg11 null
   * @param arg12 null
   */
  public void myTrustedCertificates(@Nullable @Nullable String after,
      @Nullable @Nullable int deviceExecutionModeEq, @Nullable @Nullable int deviceExecutionModeNeq,
      @Nullable @Nullable boolean enrollmentModeEq, @Nullable @Nullable int expireEq,
      @Nullable @Nullable String include, @Nullable @Nullable String issuerLike,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @Nullable String nameEq,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String ownerEq, @Nullable @Nullable String serviceEq,
      @Nullable @Nullable String subjectLike, @Nullable @Nullable Integer arg0,
      @Nullable @Nullable String arg1, @Nullable @Nullable String arg2,
      @Nullable @Nullable String arg3, @Nullable @Nullable String arg4,
      @Nullable @Nullable String arg5, @Nullable @Nullable Integer arg6,
      @Nullable @Nullable Integer arg7, @Nullable @Nullable Integer arg8,
      @Nullable @Nullable String arg9, @Nullable @Nullable Boolean arg10,
      @Nullable @Nullable String arg11, @Nullable @Nullable String arg12) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myTrustedCertificates(after, deviceExecutionModeEq, deviceExecutionModeNeq, enrollmentModeEq, expireEq, include, issuerLike, limit, nameEq, order, ownerEq, serviceEq, subjectLike, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12));
  }

  /**
   * Get all trusted certificates.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myTrustedCertificates(String,int,int,boolean,int,String,String,int,String,String,String,String,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param deviceExecutionModeEq Device execution mode, as 1 for developer certificates or as another natural integer value.
   * @param deviceExecutionModeNeq Device execution mode not equals filter.
   * @param enrollmentModeEq Enrollment mode filter.
   * @param expireEq Expire filter in days.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param issuerLike Issuer filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param nameEq Filter for certificate name.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param ownerEq Owner name filter.
   * @param serviceEq Service filter, either lwm2m or bootstrap.
   * @param subjectLike Subject filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
   */
  public void myTrustedCertificates(@Nullable @Nullable String after,
      @Nullable @Nullable int deviceExecutionModeEq, @Nullable @Nullable int deviceExecutionModeNeq,
      @Nullable @Nullable boolean enrollmentModeEq, @Nullable @Nullable int expireEq,
      @Nullable @Nullable String include, @Nullable @Nullable String issuerLike,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @Nullable String nameEq,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String ownerEq, @Nullable @Nullable String serviceEq,
      @Nullable @Nullable String subjectLike) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myTrustedCertificates(after, deviceExecutionModeEq, deviceExecutionModeNeq, enrollmentModeEq, expireEq, include, issuerLike, limit, nameEq, order, ownerEq, serviceEq, subjectLike, getModel()));
  }

  /**
   * Get the details of all the user invitations.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myUserInvitations(String,int,String,Integer,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   */
  public void myUserInvitations(@Nullable @Nullable String after,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable Integer arg0, @Nullable @Nullable String arg1,
      @Nullable @Nullable String arg2) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myUserInvitations(after, limit, order, arg0, arg1, arg2));
  }

  /**
   * Get the details of all the user invitations.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myUserInvitations(String,int,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   */
  public void myUserInvitations(@Nullable @Nullable String after,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myUserInvitations(after, limit, order, getModel()));
  }

  /**
   * Get the details of all users.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myUsers(String,String,String,int,String,String,String,String,Integer,String,String,String,String,String,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param emailEq Filter for email address.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param statusEq Filter for status, for example active or reset.
   * @param statusIn An optional filter for getting users with a specified set of statuses.
   * @param statusNin An optional filter for excluding users with a specified set of statuses.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param arg5 null
   * @param arg6 null
   * @param arg7 null
   */
  public void myUsers(@Nullable @Nullable String after, @Nullable @Nullable String emailEq,
      @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String statusEq, @Nullable @Nullable String statusIn,
      @Nullable @Nullable String statusNin, @Nullable @Nullable Integer arg0,
      @Nullable @Nullable String arg1, @Nullable @Nullable String arg2,
      @Nullable @Nullable String arg3, @Nullable @Nullable String arg4,
      @Nullable @Nullable String arg5, @Nullable @Nullable String arg6,
      @Nullable @Nullable String arg7) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myUsers(after, emailEq, include, limit, order, statusEq, statusIn, statusNin, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  }

  /**
   * Get the details of all users.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#myUsers(String,String,String,int,String,String,String,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param emailEq Filter for email address.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param statusEq Filter for status, for example active or reset.
   * @param statusIn An optional filter for getting users with a specified set of statuses.
   * @param statusNin An optional filter for excluding users with a specified set of statuses.
   */
  public void myUsers(@Nullable @Nullable String after, @Nullable @Nullable String emailEq,
      @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String statusEq, @Nullable @Nullable String statusIn,
      @Nullable @Nullable String statusNin) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.myUsers(after, emailEq, include, limit, order, statusEq, statusIn, statusNin, getModel()));
  }

  /**
   * Get all trusted certificates.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#trustedCertificates(String,int,int,boolean,int,String,String,int,String,String,String,String,String,String,Integer,String,String,String,String,String,Integer,Integer,Integer,String,Boolean,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param deviceExecutionModeEq Filter for developer certificates.
   * @param deviceExecutionModeNeq Filter for not developer certificates.
   * @param enrollmentModeEq Enrollment mode filter.
   * @param expireEq Filter for expire.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param issuerLike Filter for issuer. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param nameEq Filter for certificate name.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param ownerEq Owner name filter.
   * @param serviceEq Filter for service.
   * @param subjectLike Filter for subject. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param arg5 null
   * @param arg6 null
   * @param arg7 null
   * @param arg8 null
   * @param arg9 null
   * @param arg10 null
   * @param arg11 null
   * @param arg12 null
   * @param arg13 null
   */
  public void trustedCertificates(@Nullable @Nullable String after,
      @Nullable @Nullable int deviceExecutionModeEq, @Nullable @Nullable int deviceExecutionModeNeq,
      @Nullable @Nullable boolean enrollmentModeEq, @Nullable @Nullable int expireEq,
      @Nullable @Nullable String include, @Nullable @Nullable String issuerLike,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @Nullable String nameEq,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String ownerEq, @Nullable @Nullable String serviceEq,
      @Nullable @Nullable String subjectLike, @Nullable @Nullable String arg0,
      @Nullable @Nullable Integer arg1, @Nullable @Nullable String arg2,
      @Nullable @Nullable String arg3, @Nullable @Nullable String arg4,
      @Nullable @Nullable String arg5, @Nullable @Nullable String arg6,
      @Nullable @Nullable Integer arg7, @Nullable @Nullable Integer arg8,
      @Nullable @Nullable Integer arg9, @Nullable @Nullable String arg10,
      @Nullable @Nullable Boolean arg11, @Nullable @Nullable String arg12,
      @Nullable @Nullable String arg13) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.trustedCertificates(after, deviceExecutionModeEq, deviceExecutionModeNeq, enrollmentModeEq, expireEq, include, issuerLike, limit, nameEq, order, ownerEq, serviceEq, subjectLike, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13));
  }

  /**
   * Get all trusted certificates.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#trustedCertificates(String,int,int,boolean,int,String,String,int,String,String,String,String,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param deviceExecutionModeEq Filter for developer certificates.
   * @param deviceExecutionModeNeq Filter for not developer certificates.
   * @param enrollmentModeEq Enrollment mode filter.
   * @param expireEq Filter for expire.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param issuerLike Filter for issuer. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param nameEq Filter for certificate name.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param ownerEq Owner name filter.
   * @param serviceEq Filter for service.
   * @param subjectLike Filter for subject. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
   */
  public void trustedCertificates(@Nullable @Nullable String after,
      @Nullable @Nullable int deviceExecutionModeEq, @Nullable @Nullable int deviceExecutionModeNeq,
      @Nullable @Nullable boolean enrollmentModeEq, @Nullable @Nullable int expireEq,
      @Nullable @Nullable String include, @Nullable @Nullable String issuerLike,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @Nullable String nameEq,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String ownerEq, @Nullable @Nullable String serviceEq,
      @Nullable @Nullable String subjectLike) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.trustedCertificates(after, deviceExecutionModeEq, deviceExecutionModeNeq, enrollmentModeEq, expireEq, include, issuerLike, limit, nameEq, order, ownerEq, serviceEq, subjectLike, getModel()));
  }

  /**
   * Modifies an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#updateAccount(String,Account)}
   * @param arg0 null
   */
  public void update(@Nullable @Nullable String arg0) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.updateAccount(arg0, getModel()));
  }

  /**
   * Modifies an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#updateAccount(Account)}
   */
  @Override
  public void update() throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.updateAccount(getModel()));
  }

  /**
   * Modifies an account.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#updateAccount(Account)}
   * @param account an account.
   */
  @Override
  public void update(@NonNull @NonNull Account account) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(account);
    update();
  }

  /**
   * Get the details of all the user invitations.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#userInvitations(String,int,String,String,Integer,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   */
  public void userInvitations(@Nullable @Nullable String after,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String arg0, @Nullable @Nullable Integer arg1,
      @Nullable @Nullable String arg2, @Nullable @Nullable String arg3) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.userInvitations(after, limit, order, arg0, arg1, arg2, arg3));
  }

  /**
   * Get the details of all the user invitations.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#userInvitations(String,int,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   */
  public void userInvitations(@Nullable @Nullable String after,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order) throws
      MbedCloudException {
    checkDaoConfiguration();
    setModel(module.userInvitations(after, limit, order, getModel()));
  }

  /**
   * Get all user details.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#users(String,String,String,int,String,String,String,String,String,Integer,String,String,String,String,String,String,String)}
   * @param after The entity ID to fetch after the given one.
   * @param emailEq Filter for email address.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param statusEq Filter for status.
   * @param statusIn An optional filter for getting users with a specified set of statuses.
   * @param statusNin An optional filter for excluding users with a specified set of statuses.
   * @param arg0 null
   * @param arg1 null
   * @param arg2 null
   * @param arg3 null
   * @param arg4 null
   * @param arg5 null
   * @param arg6 null
   * @param arg7 null
   * @param arg8 null
   */
  public void users(@Nullable @Nullable String after, @Nullable @Nullable String emailEq,
      @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String statusEq, @Nullable @Nullable String statusIn,
      @Nullable @Nullable String statusNin, @Nullable @Nullable String arg0,
      @Nullable @Nullable Integer arg1, @Nullable @Nullable String arg2,
      @Nullable @Nullable String arg3, @Nullable @Nullable String arg4,
      @Nullable @Nullable String arg5, @Nullable @Nullable String arg6,
      @Nullable @Nullable String arg7, @Nullable @Nullable String arg8) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.users(after, emailEq, include, limit, order, statusEq, statusIn, statusNin, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
  }

  /**
   * Get all user details.
   * <p>
   * Similar to {@link com.arm.mbed.cloud.sdk.accounts.model.Account#users(String,String,String,int,String,String,String,String,Account)}
   * @param after The entity ID to fetch after the given one.
   * @param emailEq Filter for email address.
   * @param include Comma separated additional data to return. Currently supported: total_count.
   * @param limit The number of results to return (2-1000), default is 50.
   * @param order The order of the records based on creation time, ASC or DESC; by default ASC.
   * @param statusEq Filter for status.
   * @param statusIn An optional filter for getting users with a specified set of statuses.
   * @param statusNin An optional filter for excluding users with a specified set of statuses.
   */
  public void users(@Nullable @Nullable String after, @Nullable @Nullable String emailEq,
      @Nullable @Nullable String include,
      @Nullable @DefaultValue("50") @Nullable @DefaultValue("50") int limit,
      @Nullable @DefaultValue("ASC") @Nullable @DefaultValue("ASC") String order,
      @Nullable @Nullable String statusEq, @Nullable @Nullable String statusIn,
      @Nullable @Nullable String statusNin) throws MbedCloudException {
    checkDaoConfiguration();
    setModel(module.users(after, emailEq, include, limit, order, statusEq, statusIn, statusNin, getModel()));
  }

  /**
   * Instantiates modules.
   * @param client an api client wrapper.
   * @return instantiated module
   */
  @Override
  @Internal
  protected SdkContext instantiateModule(ApiClientWrapper client) {
    return new Accounts(client);
  }

  /**
   * Instantiates modules.
   * @param context an sdk context.
   * @return instantiated module
   */
  @Override
  @Internal
  protected SdkContext instantiateModule(SdkContext context) {
    return new Accounts(context);
  }

  /**
   * Instantiates modules.
   * @param options a connection options.
   * @return instantiated module
   */
  @Override
  @Internal
  protected SdkContext instantiateModule(ConnectionOptions options) {
    return new Accounts(options);
  }

  /**
   * Instantiates model.
   * @return instantiated model
   */
  @Override
  @Internal
  protected Account instantiateModel() {
    return new Account();
  }

  /**
   * Clones this instance.
   * <p>
   * @see java.lang.Object#clone()
   * @return a cloned instance
   */
  @Override
  public Object clone() {
    try {
      return super.clone();
    }
    catch(CloneNotSupportedException exception) {
      return null;
    }
  }
}
