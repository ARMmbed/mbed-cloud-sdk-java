// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.Account;
import com.arm.mbed.cloud.sdk.accounts.model.AccountMfaStatus;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.internal.iam.model.AccountCreationReq;
import com.arm.mbed.cloud.sdk.internal.iam.model.AccountInfo;
import com.arm.mbed.cloud.sdk.internal.iam.model.AccountInfoList;
import com.arm.mbed.cloud.sdk.internal.iam.model.AccountUpdateRootReq;
import com.arm.mbed.cloud.sdk.internal.iam.model.UserInfoRespList;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Adapter for accounts. */
@Preamble(
    description = "Adapter for accounts."
)
@Internal
public class AccountAdapter {
  /**
   * Constructor.
   */
  protected AccountAdapter() {
    super();
    // Nothing to do;
  }

  /**
   * Maps a user info resp list into an account.
   * @param toBeMapped a user info resp list.
   * @return mapped an account
   */
  @Internal
  public static Account map(UserInfoRespList toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final Account account = new Account();
    //No field equivalent to addressLine1 in Account was found in UserInfoRespList;
    //No field equivalent to addressLine2 in Account was found in UserInfoRespList;
    //No field equivalent to adminEmail in Account was found in UserInfoRespList;
    //No field equivalent to adminFullName in Account was found in UserInfoRespList;
    //No field equivalent to adminId in Account was found in UserInfoRespList;
    //No field equivalent to adminKey in Account was found in UserInfoRespList;
    //No field equivalent to adminName in Account was found in UserInfoRespList;
    //No field equivalent to adminPassword in Account was found in UserInfoRespList;
    //No field equivalent to aliases in Account was found in UserInfoRespList;
    //No field equivalent to city in Account was found in UserInfoRespList;
    //No field equivalent to company in Account was found in UserInfoRespList;
    //No field equivalent to contact in Account was found in UserInfoRespList;
    //No field equivalent to contractNumber in Account was found in UserInfoRespList;
    //No field equivalent to country in Account was found in UserInfoRespList;
    //No field equivalent to createdAt in Account was found in UserInfoRespList;
    //No field equivalent to creationTime in Account was found in UserInfoRespList;
    //No field equivalent to customFields in Account was found in UserInfoRespList;
    //No field equivalent to customerNumber in Account was found in UserInfoRespList;
    //No field equivalent to displayName in Account was found in UserInfoRespList;
    //No field equivalent to email in Account was found in UserInfoRespList;
    //No field equivalent to endMarket in Account was found in UserInfoRespList;
    //No field equivalent to expirationWarningThreshold in Account was found in UserInfoRespList;
    //No field equivalent to groups in Account was found in UserInfoRespList;
    //No field equivalent to id in Account was found in UserInfoRespList;
    //No field equivalent to idleTimeout in Account was found in UserInfoRespList;
    //No field equivalent to key in Account was found in UserInfoRespList;
    //No field equivalent to lastLoginTime in Account was found in UserInfoRespList;
    //No field equivalent to limits in Account was found in UserInfoRespList;
    //No field equivalent to mfaStatus in Account was found in UserInfoRespList;
    //No field equivalent to name in Account was found in UserInfoRespList;
    //No field equivalent to notificationEmails in Account was found in UserInfoRespList;
    //No field equivalent to owner in Account was found in UserInfoRespList;
    //No field equivalent to parentId in Account was found in UserInfoRespList;
    //No field equivalent to passwordPolicy in Account was found in UserInfoRespList;
    //No field equivalent to phoneNumber in Account was found in UserInfoRespList;
    //No field equivalent to policies in Account was found in UserInfoRespList;
    //No field equivalent to postalCode in Account was found in UserInfoRespList;
    //No field equivalent to reason in Account was found in UserInfoRespList;
    //No field equivalent to referenceNote in Account was found in UserInfoRespList;
    //No field equivalent to salesContact in Account was found in UserInfoRespList;
    //No field equivalent to state in Account was found in UserInfoRespList;
    //No field equivalent to status in Account was found in UserInfoRespList;
    //No field equivalent to subAccounts in Account was found in UserInfoRespList;
    //No field equivalent to templateId in Account was found in UserInfoRespList;
    //No field equivalent to tier in Account was found in UserInfoRespList;
    //No field equivalent to updatedAt in Account was found in UserInfoRespList;
    //No field equivalent to upgradedAt in Account was found in UserInfoRespList;
    return account;
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<UserInfoRespList, Account> getMapper() {
    return new GenericAdapter.Mapper<UserInfoRespList, Account>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public Account map(UserInfoRespList toBeMapped) {
        return AccountAdapter.map(toBeMapped);
      }
    };
  }

  /**
   * Maps an account into an account creation req.
   * @param toBeMapped an account.
   * @return mapped an account creation req
   */
  @Internal
  public static AccountCreationReq reverseMapAddRequest(Account toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final AccountCreationReq accountCreationReq = new AccountCreationReq();
    accountCreationReq.setAddressLine1(toBeMapped.getAddressLine1());
    accountCreationReq.setAddressLine2(toBeMapped.getAddressLine2());
    accountCreationReq.setAdminEmail(toBeMapped.getAdminEmail());
    accountCreationReq.setAdminFullName(toBeMapped.getAdminFullName());
    accountCreationReq.setAdminName(toBeMapped.getAdminName());
    accountCreationReq.setAdminPassword(toBeMapped.getAdminPassword());
    accountCreationReq.setAliases(toBeMapped.getAliases());
    accountCreationReq.setCity(toBeMapped.getCity());
    accountCreationReq.setCompany(toBeMapped.getCompany());
    accountCreationReq.setContact(toBeMapped.getContact());
    accountCreationReq.setContractNumber(toBeMapped.getContractNumber());
    accountCreationReq.setCountry(toBeMapped.getCountry());
    accountCreationReq.setCustomerNumber(toBeMapped.getCustomerNumber());
    accountCreationReq.setDisplayName(toBeMapped.getDisplayName());
    accountCreationReq.setEmail(toBeMapped.getEmail());
    accountCreationReq.setEndMarket(toBeMapped.getEndMarket());
    accountCreationReq.setPhoneNumber(toBeMapped.getPhoneNumber());
    accountCreationReq.setPostalCode(toBeMapped.getPostalCode());
    accountCreationReq.setState(toBeMapped.getState());
    return accountCreationReq;
  }

  /**
   * Maps an account info list into an account.
   * @param toBeMapped an account info list.
   * @return mapped list response
   */
  @Internal
  public static ListResponse<Account> mapList(AccountInfoList toBeMapped) {
    final AccountInfoList finalList = toBeMapped;
    final GenericAdapter.RespList<AccountInfo> respList = new GenericAdapter.RespList<AccountInfo>() {
      /**
       * @return something
       */
      @Override
      public List<AccountInfo> getData() {
        return (finalList == null) ? null : finalList.getData();
      }

      /**
       * @return something
       */
      @Override
      public String getContinuationMarker() {
        return null;
      }

      /**
       * @return something
       */
      @Override
      public String getOrder() {
        return (finalList == null) ? null : finalList.getOrder();
      }

      /**
       * @return something
       */
      @Override
      public Boolean getHasMore() {
        return (finalList == null) ? null : finalList.isHasMore();
      }

      /**
       * @return something
       */
      @Override
      public String getAfter() {
        return (finalList == null) ? null : finalList.getAfter();
      }

      /**
       * @return something
       */
      @Override
      public Integer getTotalCount() {
        return (finalList == null) ? null : finalList.getTotalCount();
      }

      /**
       * @return something
       */
      @Override
      public Integer getLimit() {
        return (finalList == null) ? null : finalList.getLimit();
      }
    };
    return GenericAdapter.mapList(respList,AccountAdapter.getMapper();
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<AccountInfoList, ListResponse<Account>> getListMapper() {
    return new GenericAdapter.Mapper<AccountInfoList, ListResponse<Account>>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public ListResponse<Account> map(AccountInfoList toBeMapped) {
        return AccountAdapter.mapList(toBeMapped);
      }
    };
  }

  /**
   * Maps an account into an account update root req.
   * @param toBeMapped an account.
   * @return mapped an account update root req
   */
  @Internal
  public static AccountUpdateRootReq reverseMapUpdateRequest(Account toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final AccountUpdateRootReq accountUpdateRootReq = new AccountUpdateRootReq();
    accountUpdateRootReq.setAddressLine1(toBeMapped.getAddressLine1());
    accountUpdateRootReq.setAddressLine2(toBeMapped.getAddressLine2());
    accountUpdateRootReq.setAliases(toBeMapped.getAliases());
    accountUpdateRootReq.setCity(toBeMapped.getCity());
    accountUpdateRootReq.setCompany(toBeMapped.getCompany());
    accountUpdateRootReq.setContact(toBeMapped.getContact());
    accountUpdateRootReq.setContractNumber(toBeMapped.getContractNumber());
    accountUpdateRootReq.setCountry(toBeMapped.getCountry());
    accountUpdateRootReq.setCustomFields(toBeMapped.getCustomFields());
    accountUpdateRootReq.setCustomerNumber(toBeMapped.getCustomerNumber());
    accountUpdateRootReq.setDisplayName(toBeMapped.getDisplayName());
    accountUpdateRootReq.setEmail(toBeMapped.getEmail());
    accountUpdateRootReq.setEndMarket(toBeMapped.getEndMarket());
    accountUpdateRootReq.setExpirationWarningThreshold(toBeMapped.getExpirationWarningThreshold());
    accountUpdateRootReq.setIdleTimeout(toBeMapped.getIdleTimeout());
    accountUpdateRootReq.setMfaStatus(translateToComArmMbedCloudSdkInternalIamModelAccountupdaterootreqMfastatusenum(toBeMapped.getMfaStatus()));
    accountUpdateRootReq.setNotificationEmails(toBeMapped.getNotificationEmails());
    accountUpdateRootReq.setPasswordPolicy(PasswordPolicyAdapter.reverseMapUpdateRequest(toBeMapped.getPasswordPolicy()));
    accountUpdateRootReq.setPhoneNumber(toBeMapped.getPhoneNumber());
    accountUpdateRootReq.setPostalCode(toBeMapped.getPostalCode());
    accountUpdateRootReq.setSalesContact(toBeMapped.getSalesContact());
    accountUpdateRootReq.setState(toBeMapped.getState());
    return accountUpdateRootReq;
  }

  /**
   * Maps the enum value.
   * @param toBeMapped an account mfa status.
   * @return mapped enum value
   */
  @Internal
  protected static AccountUpdateRootReq.MfaStatusEnum translateToComArmMbedCloudSdkInternalIamModelAccountupdaterootreqMfastatusenum(
      AccountMfaStatus toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    switch(toBeMapped) {
      case ENFORCED:
      return AccountUpdateRootReq.MfaStatusEnum.ENFORCED;
      case OPTIONAL:
      return AccountUpdateRootReq.MfaStatusEnum.OPTIONAL;
      default:
      return null;
    }
  }
}
