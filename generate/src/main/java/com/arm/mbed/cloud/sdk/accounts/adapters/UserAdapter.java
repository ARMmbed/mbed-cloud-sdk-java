// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.User;
import com.arm.mbed.cloud.sdk.accounts.model.UserStatus;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.internal.iam.model.UserInfoReq;
import com.arm.mbed.cloud.sdk.internal.iam.model.UserInfoResp;
import com.arm.mbed.cloud.sdk.internal.iam.model.UserInfoRespList;
import com.arm.mbed.cloud.sdk.internal.iam.model.UserUpdateReq;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Adapter for users. */
@Preamble(
    description = "Adapter for users."
)
@Internal
public class UserAdapter {
  /**
   * Constructor.
   */
  protected UserAdapter() {
    super();
    // Nothing to do;
  }

  /**
   * Maps a user info resp into a user.
   * @param toBeMapped a user info resp.
   * @return mapped a user
   */
  @Internal
  public static User map(UserInfoResp toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final User user = new User();
    user.setAccountId(toBeMapped.getAccountId());
    user.setAddress(toBeMapped.getAddress());
    user.setCreatedAt(TranslationUtils.toDate(toBeMapped.getCreatedAt()));
    user.setCreationTime(TranslationUtils.toLong(toBeMapped.getCreationTime()));
    user.setEmail(toBeMapped.getEmail());
    user.setEmailVerified(TranslationUtils.toBool(toBeMapped.isEmailVerified()));
    user.setFullName(toBeMapped.getFullName());
    user.setGroups(toBeMapped.getGroups());
    user.setId(toBeMapped.getId());
    user.setLastLoginTime(TranslationUtils.toLong(toBeMapped.getLastLoginTime()));
    user.setLoginHistory(LoginHistoryAdapter.mapSimpleList(toBeMapped.getLoginHistory()));
    user.setMarketingAccepted(TranslationUtils.toBool(toBeMapped.isMarketingAccepted()));
    user.setPassword(toBeMapped.getPassword());
    user.setPasswordChangedTime(TranslationUtils.toLong(toBeMapped.getPasswordChangedTime()));
    user.setPhoneNumber(toBeMapped.getPhoneNumber());
    user.setStatus(translateToUserStatus(toBeMapped.getStatus()));
    user.setTermsAccepted(TranslationUtils.toBool(toBeMapped.isGtcAccepted()));
    user.setTwoFactorAuthentication(TranslationUtils.toBool(toBeMapped.isTotpEnabled()));
    user.setUpdatedAt(TranslationUtils.toDate(toBeMapped.getUpdatedAt()));
    user.setUsername(toBeMapped.getUsername());
    return user;
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<UserInfoResp, User> getMapper() {
    return new GenericAdapter.Mapper<UserInfoResp, User>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public User map(UserInfoResp toBeMapped) {
        return UserAdapter.map(toBeMapped);
      }
    };
  }

  /**
   * Maps a user into a user info req.
   * @param toBeMapped a user.
   * @return mapped a user info req
   */
  @Internal
  public static UserInfoReq reverseMapAddRequest(User toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final UserInfoReq userInfoReq = new UserInfoReq();
    userInfoReq.setAddress(toBeMapped.getAddress());
    userInfoReq.setEmail(toBeMapped.getEmail());
    userInfoReq.setFullName(toBeMapped.getFullName());
    userInfoReq.setGroups(toBeMapped.getGroups());
    userInfoReq.setIsGtcAccepted(toBeMapped.isTermsAccepted());
    userInfoReq.setIsMarketingAccepted(toBeMapped.isMarketingAccepted());
    //No field equivalent to loginProfiles in UserInfoReq was found in User;
    userInfoReq.setPassword(toBeMapped.getPassword());
    userInfoReq.setPhoneNumber(toBeMapped.getPhoneNumber());
    userInfoReq.setUsername(toBeMapped.getUsername());
    return userInfoReq;
  }

  /**
   * Maps a user info resp list into a user.
   * @param toBeMapped a user info resp list.
   * @return mapped list response
   */
  @Internal
  public static ListResponse<User> mapList(UserInfoRespList toBeMapped) {
    final UserInfoRespList finalList = toBeMapped;
    final GenericAdapter.RespList<UserInfoResp> respList = new GenericAdapter.RespList<UserInfoResp>() {
      /**
       * @return something
       */
      @Override
      public List<UserInfoResp> getData() {
        return (finalList == null) ? null : finalList.getData();
      }

      /**
       * @return something
       */
      @Override
      public String getContinuationMarker() {
        return null;
      }

      /**
       * @return something
       */
      @Override
      public String getOrder() {
        return (finalList == null) ? null : finalList.getOrder();
      }

      /**
       * @return something
       */
      @Override
      public Boolean getHasMore() {
        return (finalList == null) ? null : finalList.isHasMore();
      }

      /**
       * @return something
       */
      @Override
      public String getAfter() {
        return (finalList == null) ? null : finalList.getAfter();
      }

      /**
       * @return something
       */
      @Override
      public Integer getTotalCount() {
        return (finalList == null) ? null : finalList.getTotalCount();
      }

      /**
       * @return something
       */
      @Override
      public Integer getLimit() {
        return (finalList == null) ? null : finalList.getLimit();
      }
    };
    return GenericAdapter.mapList(respList,UserAdapter.getMapper();
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<UserInfoRespList, ListResponse<User>> getListMapper() {
    return new GenericAdapter.Mapper<UserInfoRespList, ListResponse<User>>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public ListResponse<User> map(UserInfoRespList toBeMapped) {
        return UserAdapter.mapList(toBeMapped);
      }
    };
  }

  /**
   * Maps a user into a user update req.
   * @param toBeMapped a user.
   * @return mapped a user update req
   */
  @Internal
  public static UserUpdateReq reverseMapUpdateRequest(User toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final UserUpdateReq userUpdateReq = new UserUpdateReq();
    userUpdateReq.setAddress(toBeMapped.getAddress());
    userUpdateReq.setEmail(toBeMapped.getEmail());
    userUpdateReq.setFullName(toBeMapped.getFullName());
    userUpdateReq.setGroups(toBeMapped.getGroups());
    userUpdateReq.setIsGtcAccepted(toBeMapped.isTermsAccepted());
    userUpdateReq.setIsMarketingAccepted(toBeMapped.isMarketingAccepted());
    userUpdateReq.setIsTotpEnabled(toBeMapped.isTwoFactorAuthentication());
    //No field equivalent to loginProfiles in UserUpdateReq was found in User;
    userUpdateReq.setPhoneNumber(toBeMapped.getPhoneNumber());
    userUpdateReq.setStatus(toBeMapped.getStatus());
    userUpdateReq.setUsername(toBeMapped.getUsername());
    return userUpdateReq;
  }

  /**
   * Maps the enum value.
   * @param toBeMapped a status enum.
   * @return mapped enum value
   */
  @Internal
  protected static UserStatus translateToUserStatus(UserInfoResp.StatusEnum toBeMapped) {
    if(toBeMapped == null) {
      return UserStatus.getUnknownEnum();
    }
    switch(toBeMapped) {
      case ENROLLING:
      return UserStatus.ENROLLING;
      case INVITED:
      return UserStatus.INVITED;
      case ACTIVE:
      return UserStatus.ACTIVE;
      case RESET:
      return UserStatus.RESET;
      case INACTIVE:
      return UserStatus.INACTIVE;
      default:
      return UserStatus.getUnknownEnum();
    }
  }

  /**
   * Maps the enum value.
   * @param toBeMapped a user status.
   * @return mapped enum value
   */
  @Internal
  protected static String translateToJavaLangString(UserStatus toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    switch(toBeMapped) {
      default:
      return null;
    }
  }
}
