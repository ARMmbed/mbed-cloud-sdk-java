// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerInfo;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerInfoListResponse;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerRequest;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerUpdateRequest;
import com.arm.mbed.cloud.sdk.internal.externalca.model.CertificateIssuerVerifyResponse;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuer;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuerIssuerType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Adapter for certificate issuers. */
@Preamble(
    description = "Adapter for certificate issuers."
)
@Internal
public class CertificateIssuerAdapter {
  /**
   * Constructor.
   */
  protected CertificateIssuerAdapter() {
    super();
    // Nothing to do;
  }

  /**
   * Maps a certificate issuer verify response into a certificate issuer.
   * @param toBeMapped a certificate issuer verify response.
   * @return mapped a certificate issuer
   */
  @Internal
  public static CertificateIssuer map(CertificateIssuerVerifyResponse toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final CertificateIssuer certificateIssuer = new CertificateIssuer();
    //No field equivalent to createdAt in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    //No field equivalent to description in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    //No field equivalent to id in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    //No field equivalent to issuerAttributes in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    //No field equivalent to issuerType in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    //No field equivalent to name in CertificateIssuer was found in CertificateIssuerVerifyResponse;
    certificateIssuer.setSuccessful(TranslationUtils.toBool(toBeMapped.isSuccessful()));
    return certificateIssuer;
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<CertificateIssuerVerifyResponse, CertificateIssuer> getMapper(
      ) {
    return new GenericAdapter.Mapper<CertificateIssuerVerifyResponse, CertificateIssuer>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public CertificateIssuer map(CertificateIssuerVerifyResponse toBeMapped) {
        return CertificateIssuerAdapter.map(toBeMapped);
      }
    };
  }

  /**
   * Maps a certificate issuer into a certificate issuer request.
   * @param toBeMapped a certificate issuer.
   * @return mapped a certificate issuer request
   */
  @Internal
  public static CertificateIssuerRequest reverseMapAddRequest(CertificateIssuer toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final CertificateIssuerRequest certificateIssuerRequest = new CertificateIssuerRequest();
    certificateIssuerRequest.setDescription(toBeMapped.getDescription());
    certificateIssuerRequest.setIssuerAttributes(toBeMapped.getIssuerAttributes());
    //No field equivalent to issuerCredentials in CertificateIssuerRequest was found in CertificateIssuer;
    certificateIssuerRequest.setIssuerType(translateToComArmMbedCloudSdkInternalExternalcaModelCertificateissuerrequestIssuertypeenum(toBeMapped.getIssuerType()));
    certificateIssuerRequest.setName(toBeMapped.getName());
    return certificateIssuerRequest;
  }

  /**
   * Maps a certificate issuer info list response into a certificate issuer.
   * @param toBeMapped a certificate issuer info list response.
   * @return mapped list response
   */
  @Internal
  public static ListResponse<CertificateIssuer> mapList(
      CertificateIssuerInfoListResponse toBeMapped) {
    final CertificateIssuerInfoListResponse finalList = toBeMapped;
    final GenericAdapter.RespList<CertificateIssuerInfo> respList = new GenericAdapter.RespList<CertificateIssuerInfo>() {
      /**
       * @return something
       */
      @Override
      public List<CertificateIssuerInfo> getData() {
        return (finalList == null) ? null : finalList.getData();
      }

      /**
       * @return something
       */
      @Override
      public String getContinuationMarker() {
        return null;
      }

      /**
       * @return something
       */
      @Override
      public String getOrder() {
        return (finalList == null) ? null : finalList.getOrder();
      }

      /**
       * @return something
       */
      @Override
      public Boolean getHasMore() {
        return (finalList == null) ? null : finalList.isHasMore();
      }

      /**
       * @return something
       */
      @Override
      public String getAfter() {
        return (finalList == null) ? null : finalList.getAfter();
      }

      /**
       * @return something
       */
      @Override
      public Integer getTotalCount() {
        return (finalList == null) ? null : finalList.getTotalCount();
      }

      /**
       * @return something
       */
      @Override
      public Integer getLimit() {
        return (finalList == null) ? null : finalList.getLimit();
      }
    };
    return GenericAdapter.mapList(respList,CertificateIssuerAdapter.getMapper();
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<CertificateIssuerInfoListResponse, ListResponse<CertificateIssuer>> getListMapper(
      ) {
    return new GenericAdapter.Mapper<CertificateIssuerInfoListResponse, ListResponse<CertificateIssuer>>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public ListResponse<CertificateIssuer> map(CertificateIssuerInfoListResponse toBeMapped) {
        return CertificateIssuerAdapter.mapList(toBeMapped);
      }
    };
  }

  /**
   * Maps a certificate issuer into a certificate issuer update request.
   * @param toBeMapped a certificate issuer.
   * @return mapped a certificate issuer update request
   */
  @Internal
  public static CertificateIssuerUpdateRequest reverseMapUpdateRequest(
      CertificateIssuer toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final CertificateIssuerUpdateRequest certificateIssuerUpdateRequest = new CertificateIssuerUpdateRequest();
    certificateIssuerUpdateRequest.setDescription(toBeMapped.getDescription());
    certificateIssuerUpdateRequest.setIssuerAttributes(toBeMapped.getIssuerAttributes());
    //No field equivalent to issuerCredentials in CertificateIssuerUpdateRequest was found in CertificateIssuer;
    certificateIssuerUpdateRequest.setName(toBeMapped.getName());
    return certificateIssuerUpdateRequest;
  }

  /**
   * Maps the enum value.
   * @param toBeMapped a certificate issuer issuer type.
   * @return mapped enum value
   */
  @Internal
  protected static CertificateIssuerRequest.IssuerTypeEnum translateToComArmMbedCloudSdkInternalExternalcaModelCertificateissuerrequestIssuertypeenum(
      CertificateIssuerIssuerType toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    switch(toBeMapped) {
      case GLOBAL_SIGN:
      return CertificateIssuerRequest.IssuerTypeEnum.GLOBAL_SIGN;
      case CFSSL_AUTH:
      return CertificateIssuerRequest.IssuerTypeEnum.CFSSL_AUTH;
      default:
      return null;
    }
  }
}
