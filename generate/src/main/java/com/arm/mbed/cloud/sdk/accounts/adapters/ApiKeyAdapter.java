// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.ApiKey;
import com.arm.mbed.cloud.sdk.accounts.model.ApiKeyStatus;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.internal.iam.model.ApiKeyInfoResp;
import com.arm.mbed.cloud.sdk.internal.iam.model.ApiKeyInfoRespList;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Adapter for api keys. */
@Preamble(
    description = "Adapter for api keys."
)
@Internal
public class ApiKeyAdapter {
  /**
   * Constructor.
   */
  protected ApiKeyAdapter() {
    super();
    // Nothing to do;
  }

  /**
   * Maps an api key info resp into an api key.
   * @param toBeMapped an api key info resp.
   * @return mapped an api key
   */
  @Internal
  public static ApiKey map(ApiKeyInfoResp toBeMapped) {
    if(toBeMapped == null) {
      return null;
    }
    final ApiKey apiKey = new ApiKey();
    apiKey.setCreatedAt(TranslationUtils.toDate(toBeMapped.getCreatedAt()));
    apiKey.setCreationTime(TranslationUtils.toLong(toBeMapped.getCreationTime()));
    apiKey.setGroups(toBeMapped.getGroups());
    apiKey.setId(toBeMapped.getId());
    apiKey.setKey(toBeMapped.getKey());
    apiKey.setLastLoginTime(TranslationUtils.toLong(toBeMapped.getLastLoginTime()));
    apiKey.setName(toBeMapped.getName());
    apiKey.setOwner(toBeMapped.getOwner());
    apiKey.setStatus(translateToApiKeyStatus(toBeMapped.getStatus()));
    apiKey.setUpdatedAt(TranslationUtils.toDate(toBeMapped.getUpdatedAt()));
    return apiKey;
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<ApiKeyInfoResp, ApiKey> getMapper() {
    return new GenericAdapter.Mapper<ApiKeyInfoResp, ApiKey>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public ApiKey map(ApiKeyInfoResp toBeMapped) {
        return ApiKeyAdapter.map(toBeMapped);
      }
    };
  }

  /**
   * Maps an api key info resp list into an api key.
   * @param toBeMapped an api key info resp list.
   * @return mapped list response
   */
  @Internal
  public static ListResponse<ApiKey> mapList(ApiKeyInfoRespList toBeMapped) {
    final ApiKeyInfoRespList finalList = toBeMapped;
    final GenericAdapter.RespList<ApiKeyInfoResp> respList = new GenericAdapter.RespList<ApiKeyInfoResp>() {
      /**
       * @return something
       */
      @Override
      public List<ApiKeyInfoResp> getData() {
        return (finalList == null) ? null : finalList.getData();
      }

      /**
       * @return something
       */
      @Override
      public String getContinuationMarker() {
        return null;
      }

      /**
       * @return something
       */
      @Override
      public String getOrder() {
        return (finalList == null) ? null : finalList.getOrder();
      }

      /**
       * @return something
       */
      @Override
      public Boolean getHasMore() {
        return (finalList == null) ? null : finalList.isHasMore();
      }

      /**
       * @return something
       */
      @Override
      public String getAfter() {
        return (finalList == null) ? null : finalList.getAfter();
      }

      /**
       * @return something
       */
      @Override
      public Integer getTotalCount() {
        return (finalList == null) ? null : finalList.getTotalCount();
      }

      /**
       * @return something
       */
      @Override
      public Integer getLimit() {
        return (finalList == null) ? null : finalList.getLimit();
      }
    };
    return GenericAdapter.mapList(respList,ApiKeyAdapter.getMapper();
  }

  /**
   * Gets a mapper.
   * @return a mapper
   */
  @Internal
  public static GenericAdapter.Mapper<ApiKeyInfoRespList, ListResponse<ApiKey>> getListMapper() {
    return new GenericAdapter.Mapper<ApiKeyInfoRespList, ListResponse<ApiKey>>() {
      /**
       * Maps.
       * @param toBeMapped model to be mapped.
       * @return a mapped object
       */
      @Override
      public ListResponse<ApiKey> map(ApiKeyInfoRespList toBeMapped) {
        return ApiKeyAdapter.mapList(toBeMapped);
      }
    };
  }

  /**
   * Maps the enum value.
   * @param toBeMapped a status enum.
   * @return mapped enum value
   */
  @Internal
  protected static ApiKeyStatus translateToApiKeyStatus(ApiKeyInfoResp.StatusEnum toBeMapped) {
    if(toBeMapped == null) {
      return ApiKeyStatus.getUnknownEnum();
    }
    switch(toBeMapped) {
      case ACTIVE:
      return ApiKeyStatus.ACTIVE;
      case INACTIVE:
      return ApiKeyStatus.INACTIVE;
      default:
      return ApiKeyStatus.getUnknownEnum();
    }
  }
}
