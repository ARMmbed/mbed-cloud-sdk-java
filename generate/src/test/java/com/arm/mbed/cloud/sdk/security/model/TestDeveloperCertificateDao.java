// This file was generated by the Pelion SDK foundation code generator.
// This unit test suite was autogenerated on Fri Dec 28 16:23:54 GMT 2018. Feel free to change its contents as you wish.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeveloperCertificateDao. */
public class TestDeveloperCertificateDao {
  /**
   * Tests the clone method.
   */
  @Test
  public void testClone() {
    DeveloperCertificateDao developercertificatedao1 = new DeveloperCertificateDao();
    DeveloperCertificateDao developercertificatedao2 = developercertificatedao1.clone();
    assertNotNull(developercertificatedao1);
    assertNotNull(developercertificatedao2);
    assertNotSame(developercertificatedao2, developercertificatedao1);
    assertEquals(developercertificatedao2, developercertificatedao1);
  }

  /**
   * Tests the hashCode method.
   */
  @Test
  public void testHashcode() {
    DeveloperCertificateDao developercertificatedao1 = new DeveloperCertificateDao();
    DeveloperCertificateDao developercertificatedao2 = new DeveloperCertificateDao();
    assertNotNull(developercertificatedao1);
    assertNotNull(developercertificatedao2);
    assertNotSame(developercertificatedao2, developercertificatedao1);
    assertEquals(developercertificatedao2, developercertificatedao1);
    assertEquals(developercertificatedao2.hashCode(), developercertificatedao1.hashCode());
    int hashCode = developercertificatedao1.hashCode();
    for (int i = 0; i < 5 ; i++) {
      assertEquals(hashCode, developercertificatedao1.hashCode());
    }
  }

  /**
   * Tests the equals method.
   */
  @Test
  public void testEquals() {
    DeveloperCertificateDao developercertificatedao1 = new DeveloperCertificateDao();
    DeveloperCertificateDao developercertificatedao2 = new DeveloperCertificateDao();
    DeveloperCertificateDao developercertificatedao3 = new DeveloperCertificateDao();
    assertNotNull(developercertificatedao1);
    assertNotNull(developercertificatedao2);
    assertNotNull(developercertificatedao3);
    assertNotSame(developercertificatedao2, developercertificatedao1);
    assertNotSame(developercertificatedao3, developercertificatedao1);
    assertEquals(developercertificatedao2, developercertificatedao1);
    assertEquals(developercertificatedao2, developercertificatedao1);
    assertEquals(developercertificatedao1, developercertificatedao2);
    assertEquals(developercertificatedao1, developercertificatedao1);
    assertFalse(developercertificatedao1.equals(null));
    assertNotEquals(developercertificatedao3, developercertificatedao1);
  }
}
