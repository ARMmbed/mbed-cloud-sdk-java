// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDao. */
public class TestDeviceEnrollmentDao {
  /**
   * Tests the clone method.
   */
  @Test
  public void testClone() {
    DeviceEnrollmentDao deviceenrollmentdao1 = new DeviceEnrollmentDao();
    DeviceEnrollmentDao deviceenrollmentdao2 = deviceenrollmentdao1.clone();
    assertNotNull(deviceenrollmentdao1);
    assertNotNull(deviceenrollmentdao2);
    assertNotSame(deviceenrollmentdao2, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao2, deviceenrollmentdao1);
  }

  /**
   * Tests the hashCode method.
   */
  @Test
  public void testHashcode() {
    DeviceEnrollmentDao deviceenrollmentdao1 = new DeviceEnrollmentDao();
    DeviceEnrollmentDao deviceenrollmentdao2 = new DeviceEnrollmentDao();
    assertNotNull(deviceenrollmentdao1);
    assertNotNull(deviceenrollmentdao2);
    assertNotSame(deviceenrollmentdao2, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao2, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao2.hashCode(), deviceenrollmentdao1.hashCode());
    int hashCode = deviceenrollmentdao1.hashCode();
    for (int i = 0; i < 5 ; i++) {
      assertEquals(hashCode, deviceenrollmentdao1.hashCode());
    }
  }

  /**
   * Tests the equals method.
   */
  @Test
  public void testEquals() {
    DeviceEnrollmentDao deviceenrollmentdao1 = new DeviceEnrollmentDao();
    DeviceEnrollmentDao deviceenrollmentdao2 = new DeviceEnrollmentDao();
    DeviceEnrollmentDao deviceenrollmentdao3 = new DeviceEnrollmentDao();
    assertNotNull(deviceenrollmentdao1);
    assertNotNull(deviceenrollmentdao2);
    assertNotNull(deviceenrollmentdao3);
    assertNotSame(deviceenrollmentdao2, deviceenrollmentdao1);
    assertNotSame(deviceenrollmentdao3, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao2, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao2, deviceenrollmentdao1);
    assertEquals(deviceenrollmentdao1, deviceenrollmentdao2);
    assertEquals(deviceenrollmentdao1, deviceenrollmentdao1);
    assertFalse(deviceenrollmentdao1.equals(null));
    assertNotEquals(deviceenrollmentdao3, deviceenrollmentdao1);
  }
}
