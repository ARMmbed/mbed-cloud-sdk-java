// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeveloperCertificate.
 */
public class TestDeveloperCertificate {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeveloperCertificate developercertificate1 = new DeveloperCertificate("52d244a5-4417-4008-8304-40d9b0e60eb1",
                                                                                  "2f58f72d-864c-4e49-a511-2661f0f6d9c7",
                                                                                  new java.util.Date(1546622514094L),
                                                                                  "ac9f3d3c-48df-4bbe-a8a6-e1e0fb6c7b05",
                                                                                  "bf3982dd-683a-4852-99c7-ba5f8bdda94f",
                                                                                  "75a28e4e-0a4b-4e2b-96d3-cf53be614a94",
                                                                                  "b32b9e15-2f27-4c4c-a9f4-c2b057330ea8");
            DeveloperCertificate developercertificate2 = developercertificate1.clone();
            assertNotNull(developercertificate1);
            assertNotNull(developercertificate2);
            assertNotSame(developercertificate2, developercertificate1);
            assertEquals(developercertificate2, developercertificate1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeveloperCertificate developercertificate1 = new DeveloperCertificate("c69ca4d5-0c13-48e6-b92b-e53487dd9428",
                                                                                  "942944c3-556e-475b-af33-b85687f355cc",
                                                                                  new java.util.Date(1546622508238L),
                                                                                  "ef27cf1a-2972-40f1-84d0-85caad25eb14",
                                                                                  "d2f8c8be-d1f2-46c4-9261-dea75e770d95",
                                                                                  "8b334355-62c0-484d-a212-f3bbe3b67bd2",
                                                                                  "b9c8fe65-91d2-402b-b6c3-bb1c552987a3");
            DeveloperCertificate developercertificate2 = new DeveloperCertificate("c69ca4d5-0c13-48e6-b92b-e53487dd9428",
                                                                                  "942944c3-556e-475b-af33-b85687f355cc",
                                                                                  new java.util.Date(1546622508238L),
                                                                                  "ef27cf1a-2972-40f1-84d0-85caad25eb14",
                                                                                  "d2f8c8be-d1f2-46c4-9261-dea75e770d95",
                                                                                  "8b334355-62c0-484d-a212-f3bbe3b67bd2",
                                                                                  "b9c8fe65-91d2-402b-b6c3-bb1c552987a3");
            assertNotNull(developercertificate1);
            assertNotNull(developercertificate2);
            assertNotSame(developercertificate2, developercertificate1);
            assertEquals(developercertificate2, developercertificate1);
            assertEquals(developercertificate2.hashCode(), developercertificate1.hashCode());
            int hashCode = developercertificate1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, developercertificate1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeveloperCertificate developercertificate = new DeveloperCertificate("31ab8350-1b09-41e0-bfad-7c24b0b9002b",
                                                                             "c1a6174c-7a89-45f4-9d89-45f087a302ed",
                                                                             new java.util.Date(1546622514608L),
                                                                             "1aad9316-ebf2-4a32-81b1-0c2901c50f3e",
                                                                             "c4ccb888-0dd3-4381-ae51-efdbb42964fc",
                                                                             "9b48e912-ae7d-4a96-8ebf-12a562fad6fe",
                                                                             "05beea4d-b25f-4ee3-b187-0f70122fbabb");
        assertTrue(developercertificate.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeveloperCertificate developercertificate1 = new DeveloperCertificate("47ebb0e1-f628-4714-b0e8-7b5cc020e882",
                                                                                  "bb25a280-fe5c-45f2-9d02-4667b41cf18f",
                                                                                  new java.util.Date(1546622514363L),
                                                                                  "6bab74b2-ef0e-4a7a-959f-d5a6879a39bf",
                                                                                  "1f1da5e3-270a-4244-ac00-584a73d8b8a7",
                                                                                  "02e6d11c-b0f1-4c96-92bd-d1e3c4f3c9a5",
                                                                                  "efe7efe0-d749-4269-898c-2a3ef730ffb7");
            DeveloperCertificate developercertificate2 = new DeveloperCertificate("47ebb0e1-f628-4714-b0e8-7b5cc020e882",
                                                                                  "bb25a280-fe5c-45f2-9d02-4667b41cf18f",
                                                                                  new java.util.Date(1546622514363L),
                                                                                  "6bab74b2-ef0e-4a7a-959f-d5a6879a39bf",
                                                                                  "1f1da5e3-270a-4244-ac00-584a73d8b8a7",
                                                                                  "02e6d11c-b0f1-4c96-92bd-d1e3c4f3c9a5",
                                                                                  "efe7efe0-d749-4269-898c-2a3ef730ffb7");
            DeveloperCertificate developercertificate3 = new DeveloperCertificate("cf77a9d7-80b3-4f65-b4c7-32a9f875c64c",
                                                                                  "616379da-dcb0-4be1-89b4-1b82e4280a51",
                                                                                  new java.util.Date(1546622511674L),
                                                                                  "6e222f98-466c-4334-9545-99590cfe8d7d",
                                                                                  "7e24840e-1065-42d0-ad80-4ce5be9e16ac",
                                                                                  "adbfb799-aa75-4e8f-9392-3c9fe76fe347",
                                                                                  "2ab4121a-1540-4344-9486-500c914af6ae");
            assertNotNull(developercertificate1);
            assertNotNull(developercertificate2);
            assertNotNull(developercertificate3);
            assertNotSame(developercertificate2, developercertificate1);
            assertNotSame(developercertificate3, developercertificate1);
            assertEquals(developercertificate2, developercertificate1);
            assertEquals(developercertificate2, developercertificate1);
            assertEquals(developercertificate1, developercertificate2);
            assertEquals(developercertificate1, developercertificate1);
            assertFalse(developercertificate1.equals(null));
            assertNotEquals(developercertificate3, developercertificate1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
