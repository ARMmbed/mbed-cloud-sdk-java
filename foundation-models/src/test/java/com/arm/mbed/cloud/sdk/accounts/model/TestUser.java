// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "38c0b198-fb51-473c-93bf-a6880c4b9cb3",
                                  new Date(1559288257995L), -23, null, "6141e.fe6ad@7f173.fr", false,
                                  "3d73ea93-75aa-4a0e-a8cb-1f57556f1f61", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false,
                                  true, true, 85, null, null, "7901b2b1-0e48-411f-a19e-fa3595c06200", -9,
                                  "dc361317-c878-4d7b-a5b5-5d4b7ab83c9e", UserStatus.getDefault(), null,
                                  new Date(1559288261233L), "=f_zZ");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "b92e5f91-730e-4f6f-ba45-a98cf7b266c3",
                                  new Date(1559288258692L), 108, null, "fce2d.3c957@cbf46.fr", false,
                                  "6173d013-ffee-412f-b889-67b5e86f2e3c", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true,
                                  false, false, 84, null, null, "4c82f0fd-cc04-42f8-bf75-fbaef32650ea", -19,
                                  "102a112a-b311-4eb8-bcd2-1514b92adc86", UserStatus.getDefault(), null,
                                  new Date(1559288257737L), "=f_zZ");
            User user2 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "b92e5f91-730e-4f6f-ba45-a98cf7b266c3",
                                  new Date(1559288258692L), 108, null, "fce2d.3c957@cbf46.fr", false,
                                  "6173d013-ffee-412f-b889-67b5e86f2e3c", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true,
                                  false, false, 84, null, null, "4c82f0fd-cc04-42f8-bf75-fbaef32650ea", -19,
                                  "102a112a-b311-4eb8-bcd2-1514b92adc86", UserStatus.getDefault(), null,
                                  new Date(1559288257737L), "=f_zZ");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "6139aeb9-82df-4c5c-a5b8-550883c54a39",
                             new Date(1559288261702L), -106, null, "19a48.1ce22@a5255.fr", false,
                             "e5541747-ef90-4537-a03c-8f1f0edd6e52", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true, true,
                             false, -83, null, null, "f91289b2-463d-4345-9f92-783fc7799f2b", 44,
                             "30ecef28-6366-4fc8-a49a-355dbf9cce50", UserStatus.getDefault(), null,
                             new Date(1559288255543L), "=f_zZ");
        assertTrue(user.isValid());
        User userInvalid = new User("\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                    null, "832b5245-879f-4d62-be5d-e1062a6e6a31", new Date(1559288254476L), 5, null,
                                    null, true,
                                    "aceda943-cd93-4e20-9cc2-673af072f3218415de5b-8f0e-48a4-8993-3dc11073e06ca6d92988-c282-404d-af5c-6f7ab4f7a014",
                                    "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                    false, true, true, -64, null, null, "a00677aa-dd3f-4d3b-9131-6f6ad81e883c", 64,
                                    "b3181bf8-5964-4383-bc2a-e01ffd77e4e11038359c-e7b5-4713-99d2-eecc5f41ed4dc529b7b0-d34b-422b-adc8-38280f1e2084",
                                    UserStatus.getDefault(), null, new Date(1559288260122L),
                                    "cy^î•¸^î·¨^Mk^]\\\\bjNh\u001bG\u001d`nE]\fcå´?#heã¨€^sæ§³)ê™¯á¤ŸGå??s`Õ­iç •dJVîª“jPsV[^è…“Yï‡•`Jï’˜\\\\æ´Žï–ŸV");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "fe7f08d2-a113-46cf-ab8e-9abde6efbaac",
                                  new Date(1559288259250L), -9, null, "82439.5a3ae@4d2dd.fr", false,
                                  "77d5085c-5c0b-4f99-b8f9-492df487a7e4", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false,
                                  true, false, -18, null, null, "c46e2722-0f29-43d3-81ce-d30d5a2395c2", -83,
                                  "e6b9fadc-b424-4265-81b0-22d2677e56a5", UserStatus.getDefault(), null,
                                  new Date(1559288257927L), "=f_zZ");
            User user2 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "fe7f08d2-a113-46cf-ab8e-9abde6efbaac",
                                  new Date(1559288259250L), -9, null, "82439.5a3ae@4d2dd.fr", false,
                                  "77d5085c-5c0b-4f99-b8f9-492df487a7e4", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false,
                                  true, false, -18, null, null, "c46e2722-0f29-43d3-81ce-d30d5a2395c2", -83,
                                  "e6b9fadc-b424-4265-81b0-22d2677e56a5", UserStatus.getDefault(), null,
                                  new Date(1559288257927L), "=f_zZ");
            User user3 = new User("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null, "0f29ddeb-6c24-4768-85b1-9fadceeb5c7a",
                                  new Date(1559288263223L), -18, null, "a7c36.10f29@4f46c.fr", false,
                                  "6decae1f-8001-4706-aa21-79643b97c70f", "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false,
                                  true, false, 51, null, null, "6518a101-8e3f-4ceb-8541-7f04662b7345", 53,
                                  "f3db4636-e84e-44c4-bea0-4dbedf8f5979", UserStatus.getDefault(), null,
                                  new Date(1559288253905L), "=f_zZ");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
