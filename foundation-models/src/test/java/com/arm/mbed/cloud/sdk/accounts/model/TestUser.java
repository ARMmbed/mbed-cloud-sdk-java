// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "712d0739-f8c4-4eaa-9542-c38d7b43e435",
                                  new Date(1559747930555L), 17, null, "1565c.95955@c181d.me", false,
                                  "746b94da-e414-40cb-80ef-e85f7db4956e", "acbf655bdeac77c770ad4964fcb1f81f", true,
                                  false, false, -20, null, null, "e28319d3-372d-497f-a3e4-a1fcdf223169", 75,
                                  "03251d20-3373-4212-b2b1-3e74eba655e9", UserStatus.getDefault(), null,
                                  new Date(1559747926613L), "d=X9-");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "fd85da01-28ea-4aa9-a94d-b39af0767b00",
                                  new Date(1559747930200L), -44, null, "1b3e7.9d8e6@e0089.fr", false,
                                  "5248a2e5-7a26-4313-a65b-c8c99d3a5f1a", "acbf655bdeac77c770ad4964fcb1f81f", true,
                                  false, false, 124, null, null, "01c82ed4-7292-49bf-af33-71793eb7d05f", 38,
                                  "5b3fe894-8a48-4c68-82e4-2a39dd461387", UserStatus.getDefault(), null,
                                  new Date(1559747932935L), "d=X9-");
            User user2 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "fd85da01-28ea-4aa9-a94d-b39af0767b00",
                                  new Date(1559747930200L), -44, null, "1b3e7.9d8e6@e0089.fr", false,
                                  "5248a2e5-7a26-4313-a65b-c8c99d3a5f1a", "acbf655bdeac77c770ad4964fcb1f81f", true,
                                  false, false, 124, null, null, "01c82ed4-7292-49bf-af33-71793eb7d05f", 38,
                                  "5b3fe894-8a48-4c68-82e4-2a39dd461387", UserStatus.getDefault(), null,
                                  new Date(1559747932935L), "d=X9-");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "7efb8647-db43-4636-9c0f-01b37056c83d",
                             new Date(1559747933985L), -18, null, "683f0.7872b@925ac.fr", true,
                             "e99eaf2e-13ac-47dd-b350-0e4cc9d18ad6", "acbf655bdeac77c770ad4964fcb1f81f", false, true,
                             false, 94, null, null, "b6b84f2a-ab54-425d-b423-3c42aac97d2c", 103,
                             "11c261d7-2c47-44e5-acdc-c5418d59275e", UserStatus.getDefault(), null,
                             new Date(1559747929674L), "d=X9-");
        assertTrue(user.isValid());
        User userInvalid = new User("ê€Š+(è¤‘32\f3X\u0005;\\\\2\u001aAä£½îµ‰-2á—œN22&\\\\X\u00023\u00023OJ3\u00012Z*\u000f2\u0007Iä³?3V3ì Ž3'\u00142Î£ë›„\b<XNç£€ë¾†)3.ï¦¢",
                                    null, "0a44659d-db25-48de-9fdb-6a661616071b", new Date(1559747930930L), -36, null,
                                    null, false,
                                    "6a458671-606d-46e9-8306-5079d5f87072a564b3e1-8f4c-493d-ab42-a80d89ae6eac5df96347-8e41-447e-bffe-c381fb1c4a5b",
                                    "ê€Š+(è¤‘32\f3X\u0005;\\\\2\u001aAä£½îµ‰-2á—œN22&\\\\X\u00023\u00023OJ3\u00012Z*\u000f2\u0007Iä³?3V3ì Ž3'\u00142Î£ë›„\b<XNç£€ë¾†)3.ï¦¢",
                                    true, true, true, 104, null, null, "4550d427-9b52-436d-b35b-621e966a7802", 109,
                                    "02fdc000-66da-4525-b69d-71f211339c4020a36afd-2e59-4bbe-a435-db7ea1900552d0c201ee-99a2-41a8-9171-68cc1575d163",
                                    UserStatus.getDefault(), null, new Date(1559747930078L),
                                    "ê¢¦ï?®b$$:í‡‰%å©«\bb\u0012(<\u001e;`<::<Fà¶˜?<;G%äº´Rë”“PY#\u001fKPâ©©:I7a>]á·€Lc;YP2;ï³ˆ[;:J:%a\u000b:\u0001î?¹");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "f8c3b1d6-6eb0-428e-9f2f-e78877d4dfcd",
                                  new Date(1559747926512L), 51, null, "c04eb.14506@80fe4.me", false,
                                  "1d5de661-7923-46c5-8647-b257f186fc62", "acbf655bdeac77c770ad4964fcb1f81f", false,
                                  true, true, -34, null, null, "05f658bf-8b30-46b2-a92e-28126c140561", -28,
                                  "cb94bc07-183a-4313-aea8-d13d0a867d7e", UserStatus.getDefault(), null,
                                  new Date(1559747931592L), "d=X9-");
            User user2 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "f8c3b1d6-6eb0-428e-9f2f-e78877d4dfcd",
                                  new Date(1559747926512L), 51, null, "c04eb.14506@80fe4.me", false,
                                  "1d5de661-7923-46c5-8647-b257f186fc62", "acbf655bdeac77c770ad4964fcb1f81f", false,
                                  true, true, -34, null, null, "05f658bf-8b30-46b2-a92e-28126c140561", -28,
                                  "cb94bc07-183a-4313-aea8-d13d0a867d7e", UserStatus.getDefault(), null,
                                  new Date(1559747931592L), "d=X9-");
            User user3 = new User("acbf655bdeac77c770ad4964fcb1f81f", null, "5ff7031f-2065-447f-831f-450b88da9b7d",
                                  new Date(1559747929359L), -77, null, "de48d.7440e@9cc53.me", false,
                                  "55dc58c9-4481-486b-9012-91071286e1cc", "acbf655bdeac77c770ad4964fcb1f81f", false,
                                  true, true, -47, null, null, "bee04558-cd63-4074-a739-210091f7e80b", -71,
                                  "20ea7d04-f5f5-4627-9404-de0c0423b154", UserStatus.getDefault(), null,
                                  new Date(1559747926968L), "d=X9-");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
