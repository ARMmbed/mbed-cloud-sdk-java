// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
public class TestUser {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            User user1 = new User("d195cd6f-d121-4e06-9847-a63833a68f17", "5a1721a0-aa51-4fc2-bb39-35700e144306",
                                  new Date(1547159629630L), 106, "06866510-ea31-4d0e-9c70-eab77181c904", false,
                                  "436e240a-b0ce-43fa-8760-53750ae2d807", "88a6efa4-990c-427b-a89b-ca5a466e62cb", 1,
                                  null, null, false, "9ea580b7-33e0-4799-b363-e2f3a8cc77f2", -114,
                                  "9d620381-77e7-4602-822f-c80b41966995", UserStatus.getDefault(), false, true,
                                  new Date(1547159624905L), "3f445c74-54fa-4259-b425-3d71c96a7446");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("0e7dc6c2-c4e3-4c83-b45a-b22bef555ae1", "4994142f-7766-48a0-a66d-29609dfa04d9",
                                  new Date(1547159628477L), -64, "3b839384-34c8-4ae0-b432-56001756df2f", false,
                                  "314c4c9f-1488-48cd-a1e4-9a2927e1c6ae", "06db39fd-3787-4dc5-b64c-1d5203987d23", -59,
                                  null, null, false, "2c580594-1768-4951-9b72-52f7a0a79045", 25,
                                  "a4d3488e-9d15-41f1-90c2-4e3c2e415d9c", UserStatus.getDefault(), false, false,
                                  new Date(1547159623088L), "5045a02f-109a-486c-ba77-88ddfe408e14");
            User user2 = new User("0e7dc6c2-c4e3-4c83-b45a-b22bef555ae1", "4994142f-7766-48a0-a66d-29609dfa04d9",
                                  new Date(1547159628477L), -64, "3b839384-34c8-4ae0-b432-56001756df2f", false,
                                  "314c4c9f-1488-48cd-a1e4-9a2927e1c6ae", "06db39fd-3787-4dc5-b64c-1d5203987d23", -59,
                                  null, null, false, "2c580594-1768-4951-9b72-52f7a0a79045", 25,
                                  "a4d3488e-9d15-41f1-90c2-4e3c2e415d9c", UserStatus.getDefault(), false, false,
                                  new Date(1547159623088L), "5045a02f-109a-486c-ba77-88ddfe408e14");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        User user = new User("dd090261-b4d1-4223-bc89-158e06d6f978", "a1529742-4d62-4d46-bb7c-9e4ae9ab1d21",
                             new Date(1547159627665L), -89, "c00a3329-5f0e-4b20-868f-4bb0bcf813d9", false,
                             "e2a3d1f2-af1f-4515-b914-d1bbad75f845", "43a9d44b-4f84-47e6-b9e4-cfc410433d35", 65, null,
                             null, false, "d7188b6a-5df5-47bb-b299-741b73dc7011", 32,
                             "87850663-d996-4e2b-bad2-54a466f469c0", UserStatus.getDefault(), true, true,
                             new Date(1547159620721L), "6c5169c4-4450-47e8-ab7b-49f10e21945f");
        assertTrue(user.isValid());
        User userInvalid = new User("91f6dec2-dfba-4a64-a675-599b4b7f8df3", "7f509222-99da-4b79-8b20-5ca9136e833d",
                                    new Date(1547159626741L), 55, null, true, "33e7e43d-0be9-4e0d-bf6b-34c893f5cb0c",
                                    null, 75, null, null, true, "409484a2-7b1d-40a3-ab7d-5aea0113f4ff", -74,
                                    "3942f03a-28e0-4cbc-92c6-a5cb7d7ab41d", UserStatus.getDefault(), false, false,
                                    new Date(1547159629784L), "9507ae98-e2c6-4f73-a484-55e92f0bcd51");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            User user1 = new User("490c37d8-7970-4231-9f2a-534f955d839d", "f03316f5-7190-405f-bb49-70a4f4702106",
                                  new Date(1547159623027L), -81, "67db147c-de41-4320-9bf9-5ca1221908f7", true,
                                  "6b15e4e5-c60a-42a5-af5f-9af80ccf5a61", "e16c8d14-5ad6-4b6a-8df6-fc5a01a6e57d", -60,
                                  null, null, true, "eced4928-6af7-45f7-b859-c6249fe55d76", -125,
                                  "1dc6da9c-7c43-4a22-8a81-ab12e6e92e87", UserStatus.getDefault(), false, false,
                                  new Date(1547159626578L), "7853cb63-d243-445b-a287-dd3665c0eedf");
            User user2 = new User("490c37d8-7970-4231-9f2a-534f955d839d", "f03316f5-7190-405f-bb49-70a4f4702106",
                                  new Date(1547159623027L), -81, "67db147c-de41-4320-9bf9-5ca1221908f7", true,
                                  "6b15e4e5-c60a-42a5-af5f-9af80ccf5a61", "e16c8d14-5ad6-4b6a-8df6-fc5a01a6e57d", -60,
                                  null, null, true, "eced4928-6af7-45f7-b859-c6249fe55d76", -125,
                                  "1dc6da9c-7c43-4a22-8a81-ab12e6e92e87", UserStatus.getDefault(), false, false,
                                  new Date(1547159626578L), "7853cb63-d243-445b-a287-dd3665c0eedf");
            User user3 = new User("b9c209c8-6206-4bc2-b3e2-ba30ecc691f0", "d31dde7e-610b-4663-b02f-04a2aabb13cb",
                                  new Date(1547159627068L), -58, "9c8b8a73-2a9b-439e-8e6b-8658915b3741", true,
                                  "b3420560-670a-40bf-9e8f-11e11408d973", "21042fe8-2be0-4597-aab3-374cac2bb752", -68,
                                  null, null, true, "4c4249d1-87fb-4a2f-ae30-056de985fae0", 69,
                                  "28363d37-c4c1-4308-836f-319d3a94e441", UserStatus.getDefault(), false, false,
                                  new Date(1547159627023L), "08ffe222-b3c1-47a7-bb75-b9a1902ee56d");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
