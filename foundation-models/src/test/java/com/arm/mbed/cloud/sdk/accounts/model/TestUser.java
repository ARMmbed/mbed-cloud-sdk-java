// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
public class TestUser {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            User user1 = new User("479a7f35-65b3-489c-86d9-6be59aea4d43", "b737a17b-3f4b-4df2-a3c6-69c57516d990",
                                  new Date(1547225900296L), 72, "48bd44c8-19f8-4206-9096-2d577fa3c52e", true,
                                  "b7eca9a8-2b06-4b33-988f-345b59bd5879", "b98e60ed-ec7e-497a-b862-51356c6e284e", 118,
                                  null, null, true, "3cbb1b90-e9c1-4a09-92cb-c6d549d918cd", 88,
                                  "50e830bf-4500-47fb-820e-2191971509fe", UserStatus.getDefault(), false, true,
                                  new Date(1547225903389L), "36430953-41e8-4af2-8f78-49694bb50bd2");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("f9bd48c1-379a-4347-bbdc-0506ff62ece3", "db43ec13-9353-4a5e-b0c5-c1cb7047b085",
                                  new Date(1547225905252L), 36, "4a3f4f70-967d-4e95-b337-a87da5504e15", true,
                                  "bcdf732a-df14-4e47-bf56-a7081d5f5f18", "e77fbe8a-fe61-42e6-8174-2825bed630a0", -21,
                                  null, null, false, "48219aa1-9484-4cd7-aa20-fb9b6076bd68", -101,
                                  "8ff6c9ef-5f08-4f8d-9bbc-b782c9ed5a46", UserStatus.getDefault(), true, false,
                                  new Date(1547225904680L), "f0461bdd-2a5a-4933-9613-af1ea1b95b85");
            User user2 = new User("f9bd48c1-379a-4347-bbdc-0506ff62ece3", "db43ec13-9353-4a5e-b0c5-c1cb7047b085",
                                  new Date(1547225905252L), 36, "4a3f4f70-967d-4e95-b337-a87da5504e15", true,
                                  "bcdf732a-df14-4e47-bf56-a7081d5f5f18", "e77fbe8a-fe61-42e6-8174-2825bed630a0", -21,
                                  null, null, false, "48219aa1-9484-4cd7-aa20-fb9b6076bd68", -101,
                                  "8ff6c9ef-5f08-4f8d-9bbc-b782c9ed5a46", UserStatus.getDefault(), true, false,
                                  new Date(1547225904680L), "f0461bdd-2a5a-4933-9613-af1ea1b95b85");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        User user = new User("1cb2b667-fb03-4854-8f3e-c513166b5976", "aedc54d2-781f-4902-9141-56cb92e8b11c",
                             new Date(1547225896051L), -63, "2d1c8097-7c7c-47e6-bf63-647860695096", false,
                             "87f9df9e-e983-4214-adb1-bca23a5bbe8b", "25d5f328-5041-4d6f-bdc7-213076deb1e1", 35, null,
                             null, true, "9e296904-a429-4241-ab84-3f4001e85b6e", -77,
                             "378b484e-c53c-4605-8a86-2069d266068b", UserStatus.getDefault(), false, false,
                             new Date(1547225904543L), "dbd36f4e-692d-40c0-b054-f040d1749d26");
        assertTrue(user.isValid());
        User userInvalid = new User("1ced876b-6d99-475f-b1a0-c20b7e9a8e80", "92d7be8a-3d1c-4318-b21e-1869bb311656",
                                    new Date(1547225898518L), 86, null, true, "2d88c61d-9159-4083-a9ff-4e102389b9ea",
                                    "14f5e83e-cdeb-4c1e-b4fa-be610ab07707", 93, null, null, true,
                                    "3ad4cd86-90fa-44ef-830e-8a9b0f43de32", 121, "b3916ca0-8aad-4769-bdd9-56322bf19da0",
                                    UserStatus.getDefault(), false, false, new Date(1547225904700L),
                                    "a7b3bc0c-e618-463e-916a-1b696b81e0fc");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            User user1 = new User("e97ce980-cf71-42b5-a5f5-2c4d63b9730a", "cf45cce6-eef7-4e16-8944-1a4517c4029d",
                                  new Date(1547225901889L), 95, "9e0675a6-57f6-4c8e-9628-520fb566a2d1", true,
                                  "ed79453d-8603-49af-b600-49426585739d", "62936e8e-f330-495e-807f-d9ec476da8f6", -79,
                                  null, null, true, "b798864c-1e9d-4770-8e8d-243fd2536362", -37,
                                  "38dd8a9d-d1a2-42b6-b348-5c114c876e05", UserStatus.getDefault(), true, false,
                                  new Date(1547225900258L), "cb5a8007-da9c-45e1-8dde-46c38e3497f7");
            User user2 = new User("e97ce980-cf71-42b5-a5f5-2c4d63b9730a", "cf45cce6-eef7-4e16-8944-1a4517c4029d",
                                  new Date(1547225901889L), 95, "9e0675a6-57f6-4c8e-9628-520fb566a2d1", true,
                                  "ed79453d-8603-49af-b600-49426585739d", "62936e8e-f330-495e-807f-d9ec476da8f6", -79,
                                  null, null, true, "b798864c-1e9d-4770-8e8d-243fd2536362", -37,
                                  "38dd8a9d-d1a2-42b6-b348-5c114c876e05", UserStatus.getDefault(), true, false,
                                  new Date(1547225900258L), "cb5a8007-da9c-45e1-8dde-46c38e3497f7");
            User user3 = new User("25cf56c3-912f-43e2-9693-24a97693b882", "62792c4f-fd8f-4494-a8d9-22089bd91d68",
                                  new Date(1547225903509L), -26, "df52c2d6-cab5-43d4-9541-50302083635b", true,
                                  "90c2ad8e-992f-4696-9aa6-b5c827251f72", "e31c179b-da20-46ea-bb16-b41f0ff86a01", -25,
                                  null, null, true, "d5207531-1af6-4d12-a063-d35ccb8ad202", -11,
                                  "88f02606-6c12-47ae-88ef-399670c89ec3", UserStatus.getDefault(), true, false,
                                  new Date(1547225903612L), "696ec474-a797-411d-b7ee-d488bc1937bb");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
