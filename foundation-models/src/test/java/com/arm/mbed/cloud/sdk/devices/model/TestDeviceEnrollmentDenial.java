// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752149741L),
                                                                                        "099d5e1d-64bf-41d6-a05a-bc270433d934",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752152353L),
                                                                                        "b416651b-8248-4177-ac9b-b0110098cf58",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752152353L),
                                                                                        "b416651b-8248-4177-ac9b-b0110098cf58",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                   new Date(1559752150210L),
                                                                                   "0e5e75b0-ef41-48ee-bc59-98100378d546",
                                                                                   "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                   "8f790df8b03da9b1dd914e7ecab2ad3f");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("/\u000eä‹¯65\u000eä¯¯\u0005<å¸ˆ66'\u0016)á¾‰5çˆ€ç–¸\u0019äš–\u001e6èµ«65\u0014%\b\u0005ä?ª-\u001e5\u0011V\\\\ë?ž5îšŠ55\u0012\u0012]#56Xè¤³WO?5\b\u001båƒ¤\u000e6\u0007Vå†Œç²¸X",
                                                                                          new Date(1559752145898L),
                                                                                          "3d7513b6-a5eb-4deb-8211-47125dbfea1c",
                                                                                          "/\u000eä‹¯65\u000eä¯¯\u0005<å¸ˆ66'\u0016)á¾‰5çˆ€ç–¸\u0019äš–\u001e6èµ«65\u0014%\b\u0005ä?ª-\u001e5\u0011V\\\\ë?ž5îšŠ55\u0012\u0012]#56Xè¤³WO?5\b\u001båƒ¤\u000e6\u0007Vå†Œç²¸X",
                                                                                          "/\u000eä‹¯65\u000eä¯¯\u0005<å¸ˆ66'\u0016)á¾‰5çˆ€ç–¸\u0019äš–\u001e6èµ«65\u0014%\b\u0005ä?ª-\u001e5\u0011V\\\\ë?ž5îšŠ55\u0012\u0012]#56Xè¤³WO?5\b\u001båƒ¤\u000e6\u0007Vå†Œç²¸X");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752145445L),
                                                                                        "71d40747-464f-4425-8cde-d85c0c08734a",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752145445L),
                                                                                        "71d40747-464f-4425-8cde-d85c0c08734a",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        new Date(1559752144074L),
                                                                                        "80b00fb6-7fd3-4de7-84ab-e679abb18358",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                        "8f790df8b03da9b1dd914e7ecab2ad3f");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
