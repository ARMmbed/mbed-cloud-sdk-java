// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745295717L),
                                                                                        "49a35fe9-bde8-4266-b3b9-2318df6bc9d6",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745295558L),
                                                                                        "82cbf10d-b5d7-4bb6-9e36-b5c8b5bf1c66",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745295558L),
                                                                                        "82cbf10d-b5d7-4bb6-9e36-b5c8b5bf1c66",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                   new Date(1559745297583L),
                                                                                   "bef3473c-49e7-4d05-a0a0-96cbfef712c2",
                                                                                   "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                   "1fb3d6dc3467de6fb631f982b0ebed24");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                                                                          new Date(1559745302428L),
                                                                                          "aac22a31-59e1-46c8-8f6f-63220b98697e",
                                                                                          "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                                                                          "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745303493L),
                                                                                        "6938f1f4-0866-45f4-915b-708b8935818c",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745303493L),
                                                                                        "6938f1f4-0866-45f4-915b-708b8935818c",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        new Date(1559745294216L),
                                                                                        "40352f42-37ba-461a-abd8-2c90a5810af1",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                        "1fb3d6dc3467de6fb631f982b0ebed24");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
