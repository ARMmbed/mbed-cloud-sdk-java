// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288258753L),
                                                                                        "d381797a-2a25-4ce4-be5a-c0a325909a05",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288254333L),
                                                                                        "e798c79d-b510-41d8-bf27-3ca15e5063ee",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288254333L),
                                                                                        "e798c79d-b510-41d8-bf27-3ca15e5063ee",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                   new Date(1559288260498L),
                                                                                   "c1054038-0fbf-4bbe-9a58-2e6118b12071",
                                                                                   "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                   "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                                                                          new Date(1559288262509L),
                                                                                          "d668ead5-ad58-4de2-8ef2-b4508608f7e2",
                                                                                          "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                                                                          "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288262424L),
                                                                                        "36d41e97-defc-4a6e-bd21-99ddf2457ff1",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288262424L),
                                                                                        "36d41e97-defc-4a6e-bd21-99ddf2457ff1",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        new Date(1559288255594L),
                                                                                        "46d0ce39-57c0-4813-b757-7d45a971b0d2",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
