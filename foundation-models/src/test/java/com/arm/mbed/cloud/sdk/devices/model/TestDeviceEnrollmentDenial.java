// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300100637L),
                                                                                        "b4b3d352-c9d0-4435-a2bb-df83996fbcde",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300102931L),
                                                                                        "b855755b-5bfe-4d6e-b88a-cebf70397886",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300102931L),
                                                                                        "b855755b-5bfe-4d6e-b88a-cebf70397886",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                   new Date(1559300100294L),
                                                                                   "f525b62a-659b-4efe-8f89-370e294ec0e0",
                                                                                   "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                   "e5adc84a514e5b3d136332ece0ac7d95");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                                                                          new Date(1559300106359L),
                                                                                          "455ea4c3-63bc-46b5-9753-3433eba34dfb",
                                                                                          "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                                                                          "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300098121L),
                                                                                        "123fc45b-3b76-4ccf-9b8f-874d635117f8",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300098121L),
                                                                                        "123fc45b-3b76-4ccf-9b8f-874d635117f8",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        new Date(1559300104138L),
                                                                                        "b9a7ef1b-f724-4f16-9f73-45dbfd45006f",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                        "e5adc84a514e5b3d136332ece0ac7d95");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
