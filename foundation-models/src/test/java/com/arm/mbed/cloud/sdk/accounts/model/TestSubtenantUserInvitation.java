// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752144616L),
                                                                                           "cba29.08b39@ebe9e.me",
                                                                                           new Date(1559752151411L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752147365L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752150159L),
                                                                                           "71990.601dc@11d65.me",
                                                                                           new Date(1559752150268L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752147145L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752150159L),
                                                                                           "71990.601dc@11d65.me",
                                                                                           new Date(1559752150268L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752147145L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                      new Date(1559752150122L),
                                                                                      "eeb1a.49e3b@69e0a.me",
                                                                                      new Date(1559752147979L),
                                                                                      "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                      null, new Date(1559752143931L),
                                                                                      "8f790df8b03da9b1dd914e7ecab2ad3f");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559752150632L),
                                                                                             null,
                                                                                             new Date(1559752149286L),
                                                                                             "/\u000eä‹¯65\u000eä¯¯\u0005<å¸ˆ66'\u0016)á¾‰5çˆ€ç–¸\u0019äš–\u001e6èµ«65\u0014%\b\u0005ä?ª-\u001e5\u0011V\\\\ë?ž5îšŠ55\u0012\u0012]#56Xè¤³WO?5\b\u001båƒ¤\u000e6\u0007Vå†Œç²¸X",
                                                                                             null,
                                                                                             new Date(1559752152079L),
                                                                                             "/\u000eä‹¯65\u000eä¯¯\u0005<å¸ˆ66'\u0016)á¾‰5çˆ€ç–¸\u0019äš–\u001e6èµ«65\u0014%\b\u0005ä?ª-\u001e5\u0011V\\\\ë?ž5îšŠ55\u0012\u0012]#56Xè¤³WO?5\b\u001båƒ¤\u000e6\u0007Vå†Œç²¸X");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752145799L),
                                                                                           "50de0.0ac43@d711b.fr",
                                                                                           new Date(1559752149011L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752149592L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752145799L),
                                                                                           "50de0.0ac43@d711b.fr",
                                                                                           new Date(1559752149011L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752149592L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           new Date(1559752149112L),
                                                                                           "0d56d.4f119@42c86.fr",
                                                                                           new Date(1559752151434L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f",
                                                                                           null,
                                                                                           new Date(1559752144977L),
                                                                                           "8f790df8b03da9b1dd914e7ecab2ad3f");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
