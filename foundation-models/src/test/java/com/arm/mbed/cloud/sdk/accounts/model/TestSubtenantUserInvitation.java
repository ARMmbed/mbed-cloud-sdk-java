// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655029790L),
                                                                                           "96eee.9d289@0e146.me",
                                                                                           new Date(1559655030049L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655027995L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655032041L),
                                                                                           "1f74d.fc06b@00751.fr",
                                                                                           new Date(1559655030272L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655036308L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655032041L),
                                                                                           "1f74d.fc06b@00751.fr",
                                                                                           new Date(1559655030272L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655036308L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                      new Date(1559655031731L),
                                                                                      "208f5.25a35@443e5.fr",
                                                                                      new Date(1559655032662L),
                                                                                      "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                      null, new Date(1559655036492L),
                                                                                      "f7f9edc2df1fd9afea87465e2109cb51");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559655032666L),
                                                                                             null,
                                                                                             new Date(1559655033522L),
                                                                                             "ä»‚+K\u001aé¦¥ëŸ‡\u00103\bá­?L33.3C\u0000\u000e\u001bQ3Uç¨£3ä¯³CS\u0016Mï‹˜\fë¼™Q'3A.ï»¸Y3ã¯²\u0001[3 ì“¶333333J3æ¸—éºƒÊ£)\u00153ì?¼ä…Žà«”3",
                                                                                             null,
                                                                                             new Date(1559655034029L),
                                                                                             "ä»‚+K\u001aé¦¥ëŸ‡\u00103\bá­?L33.3C\u0000\u000e\u001bQ3Uç¨£3ä¯³CS\u0016Mï‹˜\fë¼™Q'3A.ï»¸Y3ã¯²\u0001[3 ì“¶333333J3æ¸—éºƒÊ£)\u00153ì?¼ä…Žà«”3");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655029899L),
                                                                                           "05883.9c93f@8665c.fr",
                                                                                           new Date(1559655029521L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655034915L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655029899L),
                                                                                           "05883.9c93f@8665c.fr",
                                                                                           new Date(1559655029521L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655034915L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           new Date(1559655028989L),
                                                                                           "2dece.ea3d1@4ffec.me",
                                                                                           new Date(1559655028146L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51",
                                                                                           null,
                                                                                           new Date(1559655030296L),
                                                                                           "f7f9edc2df1fd9afea87465e2109cb51");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
