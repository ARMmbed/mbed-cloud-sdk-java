// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("bcc52d4d-0a60-48a6-9ca2-acb4e3a189c1",
                                                                                           new Date(1547164359390L),
                                                                                           "2e0c1cee-6fed-4452-9146-d9eb3f2e5304",
                                                                                           new Date(1547164360106L),
                                                                                           "14bc4bc2-9b98-4368-a296-126902cca76d",
                                                                                           null,
                                                                                           new Date(1547164361612L),
                                                                                           "835d57af-6d65-4af0-94ae-35c5a8f0e57a");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("41a9e6f2-972e-4354-9f6f-b05777516766",
                                                                                           new Date(1547164362123L),
                                                                                           "fc17c5f8-68ad-4b2c-9730-bad9c9e32ba2",
                                                                                           new Date(1547164362540L),
                                                                                           "5977a1c0-6178-40ae-85c5-3191e7c87b53",
                                                                                           null,
                                                                                           new Date(1547164367615L),
                                                                                           "b8755d1b-b7b9-486f-b262-7faffa298ea5");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("41a9e6f2-972e-4354-9f6f-b05777516766",
                                                                                           new Date(1547164362123L),
                                                                                           "fc17c5f8-68ad-4b2c-9730-bad9c9e32ba2",
                                                                                           new Date(1547164362540L),
                                                                                           "5977a1c0-6178-40ae-85c5-3191e7c87b53",
                                                                                           null,
                                                                                           new Date(1547164367615L),
                                                                                           "b8755d1b-b7b9-486f-b262-7faffa298ea5");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("18aeb020-3fcc-4026-b106-63f7641cf809",
                                                                                      new Date(1547164358627L),
                                                                                      "9f47f4c7-4acd-4d96-bd51-49250a04a59a",
                                                                                      new Date(1547164358558L),
                                                                                      "ae3714d1-c925-4ae0-b212-7176cdad47cb",
                                                                                      null, new Date(1547164361317L),
                                                                                      "d244ed49-281b-4173-96fc-405e58f260fe");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1547164362850L),
                                                                                             null,
                                                                                             new Date(1547164364457L),
                                                                                             null, null,
                                                                                             new Date(1547164365920L),
                                                                                             "b586184a-cdc4-4184-8f98-e34ae89c2cd5");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4db6fd86-1fe7-4a91-8ae6-6a245ad9759f",
                                                                                           new Date(1547164361409L),
                                                                                           "6873fc99-94fd-4507-b90e-7b0092efe09b",
                                                                                           new Date(1547164364861L),
                                                                                           "109efe13-838e-4006-be76-de3861d1024d",
                                                                                           null,
                                                                                           new Date(1547164367829L),
                                                                                           "69916268-b9a4-4240-b369-40e6406fd379");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("4db6fd86-1fe7-4a91-8ae6-6a245ad9759f",
                                                                                           new Date(1547164361409L),
                                                                                           "6873fc99-94fd-4507-b90e-7b0092efe09b",
                                                                                           new Date(1547164364861L),
                                                                                           "109efe13-838e-4006-be76-de3861d1024d",
                                                                                           null,
                                                                                           new Date(1547164367829L),
                                                                                           "69916268-b9a4-4240-b369-40e6406fd379");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("32ce7fe5-ca64-41c1-85e8-235fd60630c0",
                                                                                           new Date(1547164358620L),
                                                                                           "0232bed1-b57e-4860-bcb4-a6e227405c82",
                                                                                           new Date(1547164364360L),
                                                                                           "f2fd93c4-c16c-445c-8b57-307ca848efa0",
                                                                                           null,
                                                                                           new Date(1547164364310L),
                                                                                           "4b5c6778-22da-4d5d-9717-1375cdfb0f52");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
