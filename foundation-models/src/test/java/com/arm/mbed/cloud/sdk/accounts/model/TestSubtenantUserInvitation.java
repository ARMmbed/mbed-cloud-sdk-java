// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288259246L),
                                                                                           "69c4e.1e902@c6306.me",
                                                                                           new Date(1559288260162L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288255573L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288259799L),
                                                                                           "063a1.a616f@71fc6.fr",
                                                                                           new Date(1559288254535L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288263598L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288259799L),
                                                                                           "063a1.a616f@71fc6.fr",
                                                                                           new Date(1559288254535L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288263598L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                      new Date(1559288256431L),
                                                                                      "af00f.d56e9@e4f9d.fr",
                                                                                      new Date(1559288260400L),
                                                                                      "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                      null, new Date(1559288257320L),
                                                                                      "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559288262254L),
                                                                                             null,
                                                                                             new Date(1559288263017L),
                                                                                             "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                                                                             null,
                                                                                             new Date(1559288258204L),
                                                                                             "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288260047L),
                                                                                           "a9c03.772d9@a8b8d.fr",
                                                                                           new Date(1559288255890L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288254767L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288260047L),
                                                                                           "a9c03.772d9@a8b8d.fr",
                                                                                           new Date(1559288255890L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288254767L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           new Date(1559288258638L),
                                                                                           "2c023.0431e@17a9c.me",
                                                                                           new Date(1559288257985L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                                                           null,
                                                                                           new Date(1559288254921L),
                                                                                           "3bfc9cdfe313bbd7bcb627c7a4f35e1e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
