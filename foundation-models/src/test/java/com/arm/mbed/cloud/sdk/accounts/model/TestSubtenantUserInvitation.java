// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745302639L),
                                                                                           "075a3.14227@2907a.me",
                                                                                           new Date(1559745299083L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745298869L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745301263L),
                                                                                           "1f601.a4a5f@96041.me",
                                                                                           new Date(1559745303402L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745299423L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745301263L),
                                                                                           "1f601.a4a5f@96041.me",
                                                                                           new Date(1559745303402L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745299423L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                      new Date(1559745295049L),
                                                                                      "8824e.d9a88@8aecc.fr",
                                                                                      new Date(1559745301251L),
                                                                                      "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                      null, new Date(1559745303757L),
                                                                                      "1fb3d6dc3467de6fb631f982b0ebed24");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559745296872L),
                                                                                             null,
                                                                                             new Date(1559745297272L),
                                                                                             "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                                                                             null,
                                                                                             new Date(1559745294615L),
                                                                                             "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745294334L),
                                                                                           "70d20.08465@7dbc0.me",
                                                                                           new Date(1559745296521L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745296167L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745294334L),
                                                                                           "70d20.08465@7dbc0.me",
                                                                                           new Date(1559745296521L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745296167L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           new Date(1559745303311L),
                                                                                           "d6c49.33d21@e7256.me",
                                                                                           new Date(1559745294480L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24",
                                                                                           null,
                                                                                           new Date(1559745302441L),
                                                                                           "1fb3d6dc3467de6fb631f982b0ebed24");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
