// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4f20a1ad-8bc2-46f7-9fbd-95c5fc26fac1",
                                                                                           new java.util.Date(1547041493118L),
                                                                                           "7fc3bc74-2118-4369-8dc4-1f3c2c4f3dbe",
                                                                                           new java.util.Date(1547041498406L),
                                                                                           "f5c98ef8-6b39-49f2-af31-7f0f883aa68d",
                                                                                           null,
                                                                                           new java.util.Date(1547041494309L),
                                                                                           "30469d1b-e3a0-40c4-bc47-18528b17171e");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("9749a6d0-8b52-4943-8352-2553082d68df",
                                                                                           new java.util.Date(1547041494535L),
                                                                                           "454518dd-52c8-4416-8a35-199dcac96fca",
                                                                                           new java.util.Date(1547041492154L),
                                                                                           "9ac8b7d9-a20f-4c3e-ae97-a69fa3882b0e",
                                                                                           null,
                                                                                           new java.util.Date(1547041496473L),
                                                                                           "34bc9630-d09a-42a8-87f4-478f3c757170");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("9749a6d0-8b52-4943-8352-2553082d68df",
                                                                                           new java.util.Date(1547041494535L),
                                                                                           "454518dd-52c8-4416-8a35-199dcac96fca",
                                                                                           new java.util.Date(1547041492154L),
                                                                                           "9ac8b7d9-a20f-4c3e-ae97-a69fa3882b0e",
                                                                                           null,
                                                                                           new java.util.Date(1547041496473L),
                                                                                           "34bc9630-d09a-42a8-87f4-478f3c757170");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("e9501d1e-58de-4bdd-94fb-ddf16f6ae561",
                                                                                      new java.util.Date(1547041491838L),
                                                                                      "8cbe5ea2-c72c-4203-a9b3-08a789ec5208",
                                                                                      new java.util.Date(1547041493634L),
                                                                                      "a278eb9f-cd16-45d4-863f-b6b170795fd4",
                                                                                      null,
                                                                                      new java.util.Date(1547041499163L),
                                                                                      "36265db9-6c4e-4180-93d9-6fd25b43f1fa");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new java.util.Date(1547041493342L),
                                                                                             null,
                                                                                             new java.util.Date(1547041499971L),
                                                                                             null, null,
                                                                                             new java.util.Date(1547041495521L),
                                                                                             "fa7ce783-a672-405c-a5da-bfb218b60439");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("53724e92-14e6-46d1-b165-fd1164a9aae4",
                                                                                           new java.util.Date(1547041490672L),
                                                                                           "ab217884-7b64-4aef-8b56-ce28811ab168",
                                                                                           new java.util.Date(1547041492353L),
                                                                                           "1a0b5295-ae64-4600-b8a2-f373c2248447",
                                                                                           null,
                                                                                           new java.util.Date(1547041497370L),
                                                                                           "b498d878-8f84-4d32-87c4-621c570d27dd");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("53724e92-14e6-46d1-b165-fd1164a9aae4",
                                                                                           new java.util.Date(1547041490672L),
                                                                                           "ab217884-7b64-4aef-8b56-ce28811ab168",
                                                                                           new java.util.Date(1547041492353L),
                                                                                           "1a0b5295-ae64-4600-b8a2-f373c2248447",
                                                                                           null,
                                                                                           new java.util.Date(1547041497370L),
                                                                                           "b498d878-8f84-4d32-87c4-621c570d27dd");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("b398d548-fd87-4156-a28c-86b00db7ef6a",
                                                                                           new java.util.Date(1547041499792L),
                                                                                           "11534e98-9b38-4196-ad43-aa8f62bbf5f9",
                                                                                           new java.util.Date(1547041495502L),
                                                                                           "6e44074f-323a-48d5-a7f0-37cd0292104d",
                                                                                           null,
                                                                                           new java.util.Date(1547041492586L),
                                                                                           "6e0c44b9-3774-4ae6-8cb2-a81ab0ac6004");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
