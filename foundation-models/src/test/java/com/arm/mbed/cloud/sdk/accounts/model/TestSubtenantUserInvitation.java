// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313347587L),
                                                                                           "128fd.935b0@64782.me",
                                                                                           new Date(1559313344572L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313345811L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313347042L),
                                                                                           "8d976.f66b3@aeb14.fr",
                                                                                           new Date(1559313341772L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313343945L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313347042L),
                                                                                           "8d976.f66b3@aeb14.fr",
                                                                                           new Date(1559313341772L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313343945L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                      new Date(1559313346347L),
                                                                                      "ea857.ac3c0@4d725.fr",
                                                                                      new Date(1559313339619L),
                                                                                      "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                      null, new Date(1559313348780L),
                                                                                      "c26ebd108cbc6d2e0e403ca038b7faa6");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559313340289L),
                                                                                             null,
                                                                                             new Date(1559313348075L),
                                                                                             "5â¬³U\u0013\u0005PJä›¹â©ŽGWWë˜‚)ì“µ55?\u0012'ì¶Œ55\u0018ÏŸPä™˜ç¤¹)5\u0000Z?\bã·?\u0007>5ë¾¹á˜„\u001b\u001c555G5î—Š,ä“¯ç¶´Xï€œ\f5H×¤ê‰±]\u000eAè“œ",
                                                                                             null,
                                                                                             new Date(1559313341433L),
                                                                                             "5â¬³U\u0013\u0005PJä›¹â©ŽGWWë˜‚)ì“µ55?\u0012'ì¶Œ55\u0018ÏŸPä™˜ç¤¹)5\u0000Z?\bã·?\u0007>5ë¾¹á˜„\u001b\u001c555G5î—Š,ä“¯ç¶´Xï€œ\f5H×¤ê‰±]\u000eAè“œ");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313343146L),
                                                                                           "6b43a.7b448@e7837.fr",
                                                                                           new Date(1559313347298L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313349144L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313343146L),
                                                                                           "6b43a.7b448@e7837.fr",
                                                                                           new Date(1559313347298L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313349144L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           new Date(1559313342581L),
                                                                                           "b3b9e.bd1da@b26a5.fr",
                                                                                           new Date(1559313340395L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6",
                                                                                           null,
                                                                                           new Date(1559313340152L),
                                                                                           "c26ebd108cbc6d2e0e403ca038b7faa6");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
