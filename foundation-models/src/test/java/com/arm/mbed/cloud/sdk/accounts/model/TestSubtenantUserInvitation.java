// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300098383L),
                                                                                           "0d3c2.58257@b05d0.me",
                                                                                           new Date(1559300103161L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300107261L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300107098L),
                                                                                           "da3af.07714@ae39c.me",
                                                                                           new Date(1559300103805L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300103341L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300107098L),
                                                                                           "da3af.07714@ae39c.me",
                                                                                           new Date(1559300103805L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300103341L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                      new Date(1559300104226L),
                                                                                      "b2077.7a518@0f977.me",
                                                                                      new Date(1559300100666L),
                                                                                      "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                      null, new Date(1559300102154L),
                                                                                      "e5adc84a514e5b3d136332ece0ac7d95");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559300099366L),
                                                                                             null,
                                                                                             new Date(1559300099778L),
                                                                                             "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                                                                             null,
                                                                                             new Date(1559300102817L),
                                                                                             "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300104505L),
                                                                                           "7af24.1d6c7@c1016.fr",
                                                                                           new Date(1559300100042L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300101306L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300104505L),
                                                                                           "7af24.1d6c7@c1016.fr",
                                                                                           new Date(1559300100042L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300101306L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           new Date(1559300102653L),
                                                                                           "dbeac.29db6@1dde4.fr",
                                                                                           new Date(1559300103453L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95",
                                                                                           null,
                                                                                           new Date(1559300098835L),
                                                                                           "e5adc84a514e5b3d136332ece0ac7d95");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
