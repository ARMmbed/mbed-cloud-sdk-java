// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("6cf360df-c943-4a05-8b46-0dccfef91fef",
                                                                                           new Date(1547159621806L),
                                                                                           "b5f6d36c-3fde-4cfd-be96-968084554b47",
                                                                                           new Date(1547159627347L),
                                                                                           "ec1ef851-6b87-4364-af39-da7a54596a01",
                                                                                           null,
                                                                                           new Date(1547159623454L),
                                                                                           "6d7f3f3b-2d08-47cd-af48-d4f56e5ec9d3");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("630990ff-895f-4f9d-b87f-64d058223977",
                                                                                           new Date(1547159625479L),
                                                                                           "33de1771-bd0e-4eb1-a1a4-fea85594d45c",
                                                                                           new Date(1547159630209L),
                                                                                           "905cdab4-5f74-44c0-959b-971a83f1b8b9",
                                                                                           null,
                                                                                           new Date(1547159623834L),
                                                                                           "7387b7fa-f451-40ed-83c0-3575984ad3fe");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("630990ff-895f-4f9d-b87f-64d058223977",
                                                                                           new Date(1547159625479L),
                                                                                           "33de1771-bd0e-4eb1-a1a4-fea85594d45c",
                                                                                           new Date(1547159630209L),
                                                                                           "905cdab4-5f74-44c0-959b-971a83f1b8b9",
                                                                                           null,
                                                                                           new Date(1547159623834L),
                                                                                           "7387b7fa-f451-40ed-83c0-3575984ad3fe");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("2fb3bd7a-ea43-4752-a2fa-0d16bae2bab5",
                                                                                      new Date(1547159623181L),
                                                                                      "833f64b3-b228-412e-8cf8-e81dce0c518d",
                                                                                      new Date(1547159620968L),
                                                                                      "d4d403a0-d191-4918-8d86-91934c220fd3",
                                                                                      null, new Date(1547159625878L),
                                                                                      "4c633f0b-6c55-48c6-8ea7-ca5a2fbb2579");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1547159627097L),
                                                                                             null,
                                                                                             new Date(1547159623444L),
                                                                                             null, null,
                                                                                             new Date(1547159620746L),
                                                                                             "43a71b11-b797-4bb2-b4b9-62d50dcbaaa7");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c8ed86c5-603d-4db5-88cd-4ce97fb70f44",
                                                                                           new Date(1547159626024L),
                                                                                           "e3a06587-3f8e-44ad-9b5e-71f175f5620c",
                                                                                           new Date(1547159628336L),
                                                                                           "35c6b8c9-b82f-4574-b968-da5644efcde6",
                                                                                           null,
                                                                                           new Date(1547159624797L),
                                                                                           "818d4785-7f3a-43a6-bcae-58685aa947e0");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("c8ed86c5-603d-4db5-88cd-4ce97fb70f44",
                                                                                           new Date(1547159626024L),
                                                                                           "e3a06587-3f8e-44ad-9b5e-71f175f5620c",
                                                                                           new Date(1547159628336L),
                                                                                           "35c6b8c9-b82f-4574-b968-da5644efcde6",
                                                                                           null,
                                                                                           new Date(1547159624797L),
                                                                                           "818d4785-7f3a-43a6-bcae-58685aa947e0");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("cc78a647-c6ba-4cd5-80c8-b73ce4d7acb4",
                                                                                           new Date(1547159621230L),
                                                                                           "1ca34212-6d22-4d12-bcb4-7d1cb7872edf",
                                                                                           new Date(1547159624051L),
                                                                                           "f0e558e6-6bd1-4076-a0a7-d1da6a80cd86",
                                                                                           null,
                                                                                           new Date(1547159625250L),
                                                                                           "3e7d4662-3a40-497e-9efa-059fdfb56b43");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
