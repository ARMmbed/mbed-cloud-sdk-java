// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("60810183-a70e-4e74-bcdc-454846e1d44f",
                                                             "27052ffb-e895-40b8-a05c-1f955d775e38",
                                                             new Date(1551362864216L),
                                                             "44c028cd-472a-4a6e-80cd-b6f56167755c",
                                                             "00104e28-fdc9-414e-9a29-43a0ab5542bd");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("cda035c9-887f-4d8f-bfd2-27be7d7b4754",
                                                             "0638803c-33d3-470e-8d40-0d79d08bf61e",
                                                             new Date(1551362866527L),
                                                             "380cd7c6-455d-45f0-a819-9e1c6b367a54",
                                                             "3535556c-5b0a-4765-ad4c-fa9b801dfbfd");
            ActiveSession activesession2 = new ActiveSession("cda035c9-887f-4d8f-bfd2-27be7d7b4754",
                                                             "0638803c-33d3-470e-8d40-0d79d08bf61e",
                                                             new Date(1551362866527L),
                                                             "380cd7c6-455d-45f0-a819-9e1c6b367a54",
                                                             "3535556c-5b0a-4765-ad4c-fa9b801dfbfd");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("c5f56920-0a28-4fdc-8cbe-305d6639b2be",
                                                        "2055069e-6b28-483b-927c-6ac5d56420ea",
                                                        new Date(1551362865152L),
                                                        "dbfa6559-23f7-409b-836e-c88718339bdc",
                                                        "15b972fd-693b-4e2d-9439-30f13a7a94a1");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("d241b2fd-56ce-466f-bb82-e1601444ba84",
                                                             "3795d282-7190-45eb-b912-9f66e6e620fe",
                                                             new Date(1551362868203L),
                                                             "d2fa7e4e-5d48-4146-b717-5a9a75567903",
                                                             "138bbe20-0bb5-4088-8a1c-ab860ac17afa");
            ActiveSession activesession2 = new ActiveSession("d241b2fd-56ce-466f-bb82-e1601444ba84",
                                                             "3795d282-7190-45eb-b912-9f66e6e620fe",
                                                             new Date(1551362868203L),
                                                             "d2fa7e4e-5d48-4146-b717-5a9a75567903",
                                                             "138bbe20-0bb5-4088-8a1c-ab860ac17afa");
            ActiveSession activesession3 = new ActiveSession("10ea0cc9-521d-4eae-ac77-cb0653e032e9",
                                                             "fc754b37-a60e-47c5-8e62-04751cba8a62",
                                                             new Date(1551362867267L),
                                                             "600c0585-23b2-4e34-a0a2-efd13afa9595",
                                                             "72831ef8-732a-4727-9e80-e02e2926936f");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
