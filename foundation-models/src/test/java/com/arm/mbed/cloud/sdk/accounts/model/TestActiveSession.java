// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "bcc71891-4fd5-41b0-82d6-7023f3a241bf",
                                                             new Date(1559746949490L),
                                                             "9426ae4a-c497-4c1c-bb26-5c75147c9eeb",
                                                             "0b1912c1-f279-44c9-8f45-5b96ab91544d");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "a5da4cc6-ee49-4624-8a1c-47f1c86e7060",
                                                             new Date(1559746952984L),
                                                             "0cffb243-0dc0-4985-ac0e-9e448ccb69cd",
                                                             "ad5718a5-e168-433a-b6d2-7015087a12ab");
            ActiveSession activesession2 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "a5da4cc6-ee49-4624-8a1c-47f1c86e7060",
                                                             new Date(1559746952984L),
                                                             "0cffb243-0dc0-4985-ac0e-9e448ccb69cd",
                                                             "ad5718a5-e168-433a-b6d2-7015087a12ab");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                        "e009b4f1-3c98-4b29-bfcb-4582ef3bb11b",
                                                        new Date(1559746952652L),
                                                        "08a78120-e26b-4830-bb4c-57a504c77912",
                                                        "9d3414b6-87b3-49af-9fa3-0044eb98ee19");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "b4fb7224-8fc1-44fc-ae12-58bbbf642d60",
                                                             new Date(1559746951244L),
                                                             "e0b1e1f9-14a7-43c6-80ac-6d5421ee253f",
                                                             "f80b079d-9f60-41d9-93c9-077f06077c91");
            ActiveSession activesession2 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "b4fb7224-8fc1-44fc-ae12-58bbbf642d60",
                                                             new Date(1559746951244L),
                                                             "e0b1e1f9-14a7-43c6-80ac-6d5421ee253f",
                                                             "f80b079d-9f60-41d9-93c9-077f06077c91");
            ActiveSession activesession3 = new ActiveSession("acc8cb178a5cea59a0ac26cbc2e1911d",
                                                             "3087c324-1f31-4024-889c-7e388d71765b",
                                                             new Date(1559746946858L),
                                                             "d3d18deb-c7ea-4430-b059-d24d81650d24",
                                                             "c58b74c6-1df1-4877-955c-fe2eede9eb78");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
