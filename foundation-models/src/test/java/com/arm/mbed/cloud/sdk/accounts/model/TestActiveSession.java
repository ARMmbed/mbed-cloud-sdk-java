// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("2c948d92-6eb5-4fb2-b3a6-2065e3cc1407",
                                                             "c6dd29bd-84ba-40b3-9d18-9f07b070e779",
                                                             new Date(1551867942826L),
                                                             "48acbb27-c20a-49ff-9b7d-9986ba1566c6",
                                                             "ad748419-e721-41c8-ae9e-2a1da59c8a66");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("fb135d64-c666-4a84-9ded-719f48d7148f",
                                                             "99246fd7-fa77-4d14-86e2-894f942c1f29",
                                                             new Date(1551867945409L),
                                                             "35587c01-917b-4beb-b5a4-574ed8f4c6e5",
                                                             "6d0fdc6c-4531-46ce-91dd-c5f64d6504e7");
            ActiveSession activesession2 = new ActiveSession("fb135d64-c666-4a84-9ded-719f48d7148f",
                                                             "99246fd7-fa77-4d14-86e2-894f942c1f29",
                                                             new Date(1551867945409L),
                                                             "35587c01-917b-4beb-b5a4-574ed8f4c6e5",
                                                             "6d0fdc6c-4531-46ce-91dd-c5f64d6504e7");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("b4afd790-45f8-407a-9ba5-606b60ce94d8",
                                                        "6ded754c-ba40-4c35-b9d1-a1c1dd0aa2a0",
                                                        new Date(1551867945710L),
                                                        "4d6e0dc5-5737-43af-987d-adf3bd8ace7e",
                                                        "05d7ea69-e151-473b-849c-db70c1769735");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("06fdc17f-281f-4f6e-b5ea-cd9d8c1be608",
                                                             "c58ab243-d219-467f-adda-74efc6d9473f",
                                                             new Date(1551867945982L),
                                                             "1bc34052-e9c4-4bf3-bab3-aa74c133aa0e",
                                                             "aea32cb5-64ac-4fd2-8bb7-fbdc273ccc82");
            ActiveSession activesession2 = new ActiveSession("06fdc17f-281f-4f6e-b5ea-cd9d8c1be608",
                                                             "c58ab243-d219-467f-adda-74efc6d9473f",
                                                             new Date(1551867945982L),
                                                             "1bc34052-e9c4-4bf3-bab3-aa74c133aa0e",
                                                             "aea32cb5-64ac-4fd2-8bb7-fbdc273ccc82");
            ActiveSession activesession3 = new ActiveSession("07419d9b-e2ba-46bd-aa58-8900db8112bc",
                                                             "87960b75-a484-4210-b020-d2bd62a3c7d2",
                                                             new Date(1551867951335L),
                                                             "1d0a5027-4002-410a-9af1-2d363d13fd99",
                                                             "016a24f6-8c50-4985-87c4-4b91d78aa4cf");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
