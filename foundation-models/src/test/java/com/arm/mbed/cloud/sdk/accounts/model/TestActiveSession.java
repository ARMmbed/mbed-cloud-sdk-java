// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "8b956700-4171-499b-8334-1a59ee5821f2",
                                                             new Date(1559313340530L),
                                                             "337226a2-4fa0-4cf0-8e57-bb14eaa35787",
                                                             "debbfee6-6a2e-4275-8c68-31a33a727cba");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "689c8957-dd0c-49cc-84a9-cc80ee3bb7d2",
                                                             new Date(1559313346646L),
                                                             "8e126469-59ea-40a9-bf1b-33923ae2e737",
                                                             "7bbcd67a-8e49-434f-8f28-a47a7fb7776b");
            ActiveSession activesession2 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "689c8957-dd0c-49cc-84a9-cc80ee3bb7d2",
                                                             new Date(1559313346646L),
                                                             "8e126469-59ea-40a9-bf1b-33923ae2e737",
                                                             "7bbcd67a-8e49-434f-8f28-a47a7fb7776b");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                        "34d45b73-23af-4941-9bef-89b67bb26624",
                                                        new Date(1559313344249L),
                                                        "387a3afb-b959-4638-aa1d-f3ab77b1809b",
                                                        "7929cb28-c0f8-4f55-aa46-3a2983dfff49");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "97b66fd4-376f-4c83-b84b-2486c8f4c766",
                                                             new Date(1559313342942L),
                                                             "d56c528a-bce1-4823-943e-eca56154cb13",
                                                             "ede36030-011f-4f9b-91a7-57e19931d62d");
            ActiveSession activesession2 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "97b66fd4-376f-4c83-b84b-2486c8f4c766",
                                                             new Date(1559313342942L),
                                                             "d56c528a-bce1-4823-943e-eca56154cb13",
                                                             "ede36030-011f-4f9b-91a7-57e19931d62d");
            ActiveSession activesession3 = new ActiveSession("c26ebd108cbc6d2e0e403ca038b7faa6",
                                                             "40861be9-705a-4b3e-af4e-e247c22777b1",
                                                             new Date(1559313344753L),
                                                             "dc713783-a8f3-4d43-b39e-94a645f0c3a9",
                                                             "f0a322d7-acde-415d-b350-b10ddcc122e4");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
