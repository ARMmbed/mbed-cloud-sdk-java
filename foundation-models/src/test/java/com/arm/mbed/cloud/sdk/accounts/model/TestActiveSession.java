// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "028dc1c1-1345-4811-8ba2-01221ce30f2b",
                                                             new Date(1559560668656L),
                                                             "4464c138-c479-426e-a0b0-a70ddda94cc7",
                                                             "dbc0f6a8-65a9-4ac0-8e8f-d23db54e9bc5");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "c570a5e5-2ffa-439b-8ca3-242771036412",
                                                             new Date(1559560668518L),
                                                             "4f3bfa06-bb1f-47a8-87ae-2781009994fb",
                                                             "775cd9cf-10d3-44c6-8754-f59ebaaa20fb");
            ActiveSession activesession2 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "c570a5e5-2ffa-439b-8ca3-242771036412",
                                                             new Date(1559560668518L),
                                                             "4f3bfa06-bb1f-47a8-87ae-2781009994fb",
                                                             "775cd9cf-10d3-44c6-8754-f59ebaaa20fb");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                        "e4ce98b2-4140-4b67-8b4a-cd07970231be",
                                                        new Date(1559560668211L),
                                                        "0fa91c10-c5f2-41bb-b580-b8588395046c",
                                                        "5d563f8b-8569-4235-96f5-62dd3f72e583");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "ea3adb18-90d4-443d-b0f1-656dae41c642",
                                                             new Date(1559560668415L),
                                                             "5b284f9a-e30b-4bb8-beed-0a4db767a57c",
                                                             "a3b44c49-b8f3-42d9-a28f-223649bc0afa");
            ActiveSession activesession2 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "ea3adb18-90d4-443d-b0f1-656dae41c642",
                                                             new Date(1559560668415L),
                                                             "5b284f9a-e30b-4bb8-beed-0a4db767a57c",
                                                             "a3b44c49-b8f3-42d9-a28f-223649bc0afa");
            ActiveSession activesession3 = new ActiveSession("3f3bfa45b47fdcef3cd0baefcc7b4d9a",
                                                             "24617b24-6958-475a-a1ed-85abdca2be2c",
                                                             new Date(1559560670217L),
                                                             "3eb10e0b-7244-4683-8908-9bdd1ad64c82",
                                                             "328aa859-e2c2-4115-b077-fc27ec0539d8");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
