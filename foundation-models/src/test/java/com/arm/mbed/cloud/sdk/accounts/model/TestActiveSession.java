// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "8b5b2b57-2574-4527-9e36-5ef021b3260c",
                                                             new Date(1559288259079L),
                                                             "3bfa36fd-6a8b-45ac-898b-9164f9bdf798",
                                                             "b7563b41-ac43-4eb1-ac46-2308dcd05ab9");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "de137792-5327-4b6d-9462-a1b68b444177",
                                                             new Date(1559288255793L),
                                                             "1b8dc5fd-f6fb-47e9-895a-725a0cf07163",
                                                             "74c0fa09-a98a-4217-bb23-5c4be76cc955");
            ActiveSession activesession2 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "de137792-5327-4b6d-9462-a1b68b444177",
                                                             new Date(1559288255793L),
                                                             "1b8dc5fd-f6fb-47e9-895a-725a0cf07163",
                                                             "74c0fa09-a98a-4217-bb23-5c4be76cc955");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                        "6c63480e-0da3-4792-a8cb-583ded01a4c3",
                                                        new Date(1559288262841L),
                                                        "9dfa457b-a3ae-4766-ac83-1f3d9473ce40",
                                                        "088714db-15bf-4f4b-aa87-e1876ff66ec9");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "2a6e650c-7c49-4ad9-a9aa-1798b41df0cf",
                                                             new Date(1559288257825L),
                                                             "1f53987d-754a-4e96-8ef1-f0ab1c97cd4d",
                                                             "564a1a08-016c-497b-9c92-c41f0fb878bd");
            ActiveSession activesession2 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "2a6e650c-7c49-4ad9-a9aa-1798b41df0cf",
                                                             new Date(1559288257825L),
                                                             "1f53987d-754a-4e96-8ef1-f0ab1c97cd4d",
                                                             "564a1a08-016c-497b-9c92-c41f0fb878bd");
            ActiveSession activesession3 = new ActiveSession("3bfc9cdfe313bbd7bcb627c7a4f35e1e",
                                                             "58fbc427-ffb1-4551-8456-57f2f11c468e",
                                                             new Date(1559288254627L),
                                                             "f1631b5b-15f2-4daa-a1c3-a19f1553319b",
                                                             "c421f030-67db-45c8-a7d8-500f0eeb5201");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
