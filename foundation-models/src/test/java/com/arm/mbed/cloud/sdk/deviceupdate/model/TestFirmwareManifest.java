// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559754636121L), 45,
                                                                      "50ddef94-4683-4ba7-9c68-dd1978851411",
                                                                      "756773a2-974b-4328-8490-31ccd35106ac",
                                                                      "6a6ecf14-d567-41a7-95f8-c6b25efc4630",
                                                                      "1de4c1c9-8ce4-4c21-bd3d-ec365391e050",
                                                                      "683f84bb-f50e-4875-ad84-4acdff8a4f1f",
                                                                      "4b1655c6-608c-4850-8ad1-f77ac469f87f",
                                                                      new Date(1559754640690L),
                                                                      new Date(1559754643364L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559754638089L), -89,
                                                                      "fa1c0c1d-0ccb-47af-a893-e379af89105e",
                                                                      "13497c89-f047-4292-8805-556e52524a41",
                                                                      "b153ac54-20aa-4a47-a783-5e1b0f32db87",
                                                                      "b24fafce-2146-4c65-81c3-30b074c08cc1",
                                                                      "076a2cea-ca36-4377-9dbc-046447f4d597",
                                                                      "af824af1-14da-4ddf-bb5b-51fb2320e5fc",
                                                                      new Date(1559754639353L),
                                                                      new Date(1559754639441L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559754638089L), -89,
                                                                      "fa1c0c1d-0ccb-47af-a893-e379af89105e",
                                                                      "13497c89-f047-4292-8805-556e52524a41",
                                                                      "b153ac54-20aa-4a47-a783-5e1b0f32db87",
                                                                      "b24fafce-2146-4c65-81c3-30b074c08cc1",
                                                                      "076a2cea-ca36-4377-9dbc-046447f4d597",
                                                                      "af824af1-14da-4ddf-bb5b-51fb2320e5fc",
                                                                      new Date(1559754639353L),
                                                                      new Date(1559754639441L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559754639982L), -19,
                                                                 "2518bba5-d64f-4ccd-baf8-45f785906168",
                                                                 "30c6be8e-d706-4f47-baca-c6cf552db50e",
                                                                 "8e131ce5-a88f-416c-ac1e-8ee76c372e17",
                                                                 "191cb032-da50-461f-b097-74956f607ed6",
                                                                 "4ddff588-79f5-4c31-bab7-6db4e1282b91",
                                                                 "67873aa4-3e91-4cbb-8c50-1823967a3310",
                                                                 new Date(1559754643536L), new Date(1559754636320L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559754644098L), 41,
                                                                        "3d0d76d1-2763-4d22-87e4-13de7c0cb5f0",
                                                                        "fdca84cc-4bb6-43c7-8748-0a9d5eafdb966f77e7de-e297-4651-a27c-34f5d5818b9612f78101-7bd3-4d3b-8dde-533ea728212fa6494055-c188-44c4-92d3-a51361f500386ecc0c5f-8814-433a-9c1d-41d8e0f7dfd59e170c9a-8976-434b-9d3c-278a9ccf2614cde96f9b-7ab4-4e48-b592-4ca35d17c2ec4368a0b0-cfbb-4f92-ae08-e2edaf52ba2396f60558-583c-4097-bd27-74c7d92e817af48d9989-5bff-4ba8-b853-9ad092eac3e85aac783c-04ab-4ccd-b420-6b0b8dc61879789d0ce0-7520-4aea-b984-0665f884ecdbe321fb56-0e8b-40bf-8da7-ab77e4431ff65316df1c-ac67-4f53-9657-65023342f3aef606ca99-e43a-4c45-96cf-6a149745ed576496173c-8d36-4d91-b3bf-ed11fe9ecd91bee28e6b-f521-49eb-9a6f-6a8eb1946b447b10d6cd-3a1f-496c-8d19-4bdb524722ab1fde4317-a3b7-463f-b8ed-8a0f7aad726f747943c3-3386-42c1-8eb9-9c98a821ca06ca1d9da8-f6f4-41b8-954c-9016c2b4c097c458576e-1a66-4e61-90f8-ce0fb1381bfec361df01-074c-4d2b-8660-1f40e4da65252348f994-9b0d-41a4-8262-07dc11e282bbcba90f5c-b7a8-4125-b19c-de2d97dbc0cb7208b482-8221-4142-b26a-4ae6fc608937151fe864-51a3-4679-807b-afaaccc6bf03452cf104-a45c-40dc-be95-4d5e7cbf6fe5e70a092a-c1ed-4a24-8c5c-5bcfb5c5d49c94197918-6349-4ba9-8265-5f7bafa90bf5c11a3d8a-7fe0-4a54-bf3a-0fb35aa830d2051447de-a149-4951-b6c1-87b769f8e68ce7ffa3ba-6d70-4503-83e6-23204cf9411ad4299f33-940e-4a55-91ec-e01dab73523b97e34482-7cc3-465c-9d36-b338ac845cbea8a03ebc-3d83-4510-b4a7-8f8aaece7f96b01cff73-7cb3-4c5b-a455-0fe7fff49bdde6d00959-8260-48c8-bdb6-3f75db58e6d55833d5f3-a50a-4a8c-a608-b6a4a545103d993b45bf-2cea-4674-86ab-96bd63b62266d9370a47-4c07-48f7-b336-da939d61137b20383ac8-1eec-4de3-8894-c3fbb732686c97a8d86e-f27a-4f07-ae9c-36b7fbc68716b71f2d08-6c7b-4125-a02d-641f1a083b1cbc08c308-3f70-4d5f-821b-44dd288ba6918b00d64e-e860-4073-83a1-80927323e4b0e8775087-6fa7-44b3-9f51-6b674f653a564d18b25f-6937-4cdc-aef3-485fd0ce07a294cc0fa5-13a6-4ee7-94f5-2e9649ed774f9704b05c-2004-4318-848c-1ee96eedb852004d35be-ffb2-4117-a04c-e162733f5652f1f49483-14c9-4505-9c7a-105186c2ea189ef1125f-5d43-488f-a0cb-ecb42db96a9ef3e2b4d5-2966-4380-a113-45be88e4472a9f84fb9c-a17e-4b2f-8dc0-ca3b9cbe02c89e048740-81d3-4bd1-bf94-a7c63d92b462",
                                                                        "045c995c-46c1-492a-bd3f-8efe731aaee5",
                                                                        "6b01a344-3154-4b5c-802b-5418ddee5499",
                                                                        "5c91e976-8db0-4bf5-9405-3b83f0e27573",
                                                                        "c72ee1f0-8371-4d16-a419-ae2557957c0a7d3161fa-1f5a-440a-b1b3-34737be5814759aeee5a-9420-441e-b6dd-f62ce6c6283061f0c98c-e6b3-4129-8696-1d253db9e008",
                                                                        new Date(1559754639496L),
                                                                        new Date(1559754636516L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559754639394L), 98,
                                                                      "bc632bb4-c160-4311-ac87-5950ad9be382",
                                                                      "c4cc8ea9-e459-4cba-af66-345a74c46ba4",
                                                                      "218ea864-362f-4381-b4fa-d0f1401b91ec",
                                                                      "b9053007-3961-476f-844f-e456da5106e1",
                                                                      "fd9c5774-8a21-41bc-9e84-e80c78505c78",
                                                                      "7e002bb7-eb4d-4dde-9910-7d8c493d1ecd",
                                                                      new Date(1559754637118L),
                                                                      new Date(1559754639053L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559754639394L), 98,
                                                                      "bc632bb4-c160-4311-ac87-5950ad9be382",
                                                                      "c4cc8ea9-e459-4cba-af66-345a74c46ba4",
                                                                      "218ea864-362f-4381-b4fa-d0f1401b91ec",
                                                                      "b9053007-3961-476f-844f-e456da5106e1",
                                                                      "fd9c5774-8a21-41bc-9e84-e80c78505c78",
                                                                      "7e002bb7-eb4d-4dde-9910-7d8c493d1ecd",
                                                                      new Date(1559754637118L),
                                                                      new Date(1559754639053L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559754642989L), 70,
                                                                      "b2ed4796-536f-4d62-9b83-0518b4e9a06b",
                                                                      "f436da25-77b1-46b5-ad2a-bbb610e05b90",
                                                                      "1df1ee5e-6261-4fd7-bec7-627ad4bc0d6f",
                                                                      "fa4917d7-43f8-4334-b4c3-f7aedbc2dc52",
                                                                      "c7eb637c-f78a-4d80-8ada-2df408109b71",
                                                                      "9f8a00a1-9a2a-4e0b-9865-27e3e82e0c78",
                                                                      new Date(1559754637125L),
                                                                      new Date(1559754644636L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
