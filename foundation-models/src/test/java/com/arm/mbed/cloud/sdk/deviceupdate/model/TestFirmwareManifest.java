// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559758610983L), 42,
                                                                      "182f91df-06fd-4c2c-b027-eccd6f4c21d4",
                                                                      "5664fa07-04d1-4ca6-ab88-1aa4f3e81879",
                                                                      "36becb5b-772b-4751-9bd1-7d6572d83619",
                                                                      "78c816b5-f19a-4b7b-8337-12e56673b1d8",
                                                                      "a19f8cb7-f884-4667-8cc9-a4b502f83c06",
                                                                      "f9cee4d8-16f0-406e-9604-9b618850118f",
                                                                      new Date(1559758603852L),
                                                                      new Date(1559758610691L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559758609383L), 85,
                                                                      "66203676-b67c-4e2a-a2a1-d6cbc50dabd4",
                                                                      "ec816fb3-9926-4c95-a6c0-2aa4aa013137",
                                                                      "d918b17b-c074-4d76-b5c7-d47c843be133",
                                                                      "af1e637e-6189-46e6-8a12-024b1791b45b",
                                                                      "7c958140-4b87-4704-9317-86b2a1cc3d44",
                                                                      "08ebb29a-9b0e-45e3-bc99-6813b31252c3",
                                                                      new Date(1559758609370L),
                                                                      new Date(1559758606021L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559758609383L), 85,
                                                                      "66203676-b67c-4e2a-a2a1-d6cbc50dabd4",
                                                                      "ec816fb3-9926-4c95-a6c0-2aa4aa013137",
                                                                      "d918b17b-c074-4d76-b5c7-d47c843be133",
                                                                      "af1e637e-6189-46e6-8a12-024b1791b45b",
                                                                      "7c958140-4b87-4704-9317-86b2a1cc3d44",
                                                                      "08ebb29a-9b0e-45e3-bc99-6813b31252c3",
                                                                      new Date(1559758609370L),
                                                                      new Date(1559758606021L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559758608448L), 16,
                                                                 "d3cc61e3-cf0c-45c9-933e-08eef51baa90",
                                                                 "0953d24d-d035-49ae-8ce7-3d2d690deec5",
                                                                 "58039236-752c-4076-92cf-e9597b1a0d29",
                                                                 "b79b718d-2634-4473-9592-2fea3745d7e1",
                                                                 "b8b04f1a-28e0-42aa-8a9d-514d02a202bb",
                                                                 "af178fd1-f0b5-4baf-8974-6486babc0c41",
                                                                 new Date(1559758603916L), new Date(1559758604654L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559758610208L), -36,
                                                                        "84dfdfa0-0400-4611-ad40-f3c8e719b452",
                                                                        "61b4f4c0-a240-421e-9f95-896853d8d1c73108c439-53f3-4f46-8530-a04fb83761085611cb0d-74b4-412b-9f54-c7886f3a8d45abafe91a-9323-4322-8225-30c203af95651482499b-7614-4aa8-a083-8cf66ad5f7d3cec86932-c82c-4995-97ac-d4a92574ba17889f23c6-44b6-4a87-a9f6-391355206e7917f2b017-3bdf-4321-9256-431d29685f52a1799737-8cbb-4db3-aaa4-7bcb5a9e8e4a6e09068b-9ac7-4798-9e4c-ba3bf9cdc92b16702798-f53a-4d0b-a8ae-fe4bf1ab9c23088ef69a-5bd2-4e29-960b-565e02bf412aac51dbe9-2784-4c87-b51d-e9b5ff1465b879be0eaf-9416-46ad-8f19-8040bbcb53011bcf0a22-c918-4ce7-87ed-f9d0f20183ed386cbf8f-3bf3-4430-a56f-f2c640325a9d6f154117-1f74-4675-9303-1935df1ff0162ea3a8db-8f05-46b1-9093-5053641e3a3bf186d437-45b2-432c-9e0d-b2202a9ec9dfd1d55689-62a3-4a5e-857f-a7630f0a7a05dbe0815f-4c66-44f4-9e1b-5be09048d3e6f4198139-07b2-44ed-a281-5af3b1cdd21c64f68713-324c-438b-90f0-960537b9833a60a170e2-2529-4014-a7e2-cc2459d991c45ce48b7a-aa98-475c-9e29-ebb9f6e68146c99d7d73-65b7-4b72-b3ef-74193bc32b08ef9a3290-cb3f-4654-9d55-970eaee15f368d6a50f9-f49a-47e7-9b3f-127979f80dee382692d2-4f58-45a2-8eb6-c41834e791aee0342ad4-7869-4459-ab04-0eadb4dda4140d6d05c6-27e7-44d5-a129-60ff5f856fffb5336afc-6031-449b-8b7c-869f2897c7ed293effb6-92d2-444f-afa5-2a29bfe6c683550a92b2-96b5-4f63-ac07-52df0e8b2897c4597041-88cb-4181-82ae-852be534abb72bed8688-c4c6-472e-be3b-142286d044ef16ea1866-25f2-4bf2-84ce-c65e6e515f0a64d0bed1-3b57-44ff-8741-7aac0072e58b435de707-369b-4aa4-8722-b1bc24ce3908ea22495c-afbe-4143-87a1-5c5b070425a224e1e02b-3b29-442f-91ec-a9962b0a9b9d3b897cc3-57c2-4f84-8426-fa1037da2e3c2368a5ac-7430-4252-96cb-dc98cab0d2d43d16ca91-95f6-4fa9-97f9-85a282041451149a93c1-ae33-4c4c-ac93-106cb20fda167265944b-61e1-4c9e-9aec-c447c361081436a8e89f-366e-46fa-b754-4e43a9d3f8a45c63b177-b66e-4fc2-b838-9fae52afae3851eafe63-c09b-4456-85ed-c5cad2992c73f8273721-27c2-4463-a45b-7420522a5cfd6db40212-cae0-4d04-9d28-371452042667f95b1085-5fd0-4610-b391-81f069c78fbcb52e964d-0f10-4b5b-b030-66c1de9a1723ab09f529-6be4-495c-9ff2-47a3b389301de1e5ed88-4b8e-4ad9-91d4-6d32303daa7029f94c6d-5214-421e-91fa-f9365dfb9963",
                                                                        "78d20201-1d85-4fd7-9f02-de48ee9d10ec",
                                                                        "95b0e43b-d961-4b1b-aae7-a5f88d823cc9",
                                                                        "49a01758-7c4b-4d66-b69b-7251984360fa",
                                                                        "42cdd912-dc94-4a2b-9f76-5f7be00289dac4c19154-b648-47ed-82ee-9114a60c0ea209ecfc48-5908-4d59-ad48-a98042ef42965a187427-0049-4936-9bb0-60a553213fb3",
                                                                        new Date(1559758605336L),
                                                                        new Date(1559758609647L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559758603499L), -77,
                                                                      "90f9e303-1b3e-49fb-ba1c-446c91219efa",
                                                                      "2ea79d6c-2dd9-48b5-8177-fdbf5ca6fb5b",
                                                                      "d721e386-6c7c-4b0a-9584-d9180cff6656",
                                                                      "35dc9f60-3942-48b3-bc24-05e6e9f18318",
                                                                      "0f2143d8-8397-40fe-9996-5c341228615c",
                                                                      "227bb218-f9d8-4859-8c66-09bcd896bc28",
                                                                      new Date(1559758606011L),
                                                                      new Date(1559758605204L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559758603499L), -77,
                                                                      "90f9e303-1b3e-49fb-ba1c-446c91219efa",
                                                                      "2ea79d6c-2dd9-48b5-8177-fdbf5ca6fb5b",
                                                                      "d721e386-6c7c-4b0a-9584-d9180cff6656",
                                                                      "35dc9f60-3942-48b3-bc24-05e6e9f18318",
                                                                      "0f2143d8-8397-40fe-9996-5c341228615c",
                                                                      "227bb218-f9d8-4859-8c66-09bcd896bc28",
                                                                      new Date(1559758606011L),
                                                                      new Date(1559758605204L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559758613044L), -62,
                                                                      "c2111418-ce97-4467-8a5b-ea3897e5746e",
                                                                      "86764c97-b6b6-4fd2-aada-2d68bd6f0c62",
                                                                      "a6615e38-eb5c-4e0b-bbc0-1c1a2bcd0cc1",
                                                                      "fc645521-2884-4274-80be-6d54fff2b304",
                                                                      "bd9fc0b3-6160-4cac-b370-80b200c466ea",
                                                                      "73140945-3247-44a2-abad-ce5d500b62a9",
                                                                      new Date(1559758604660L),
                                                                      new Date(1559758608511L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
