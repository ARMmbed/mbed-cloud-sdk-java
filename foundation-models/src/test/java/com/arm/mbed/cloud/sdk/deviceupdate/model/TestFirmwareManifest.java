// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559662778219L), 44,
                                                                      "5479d95e-f255-406b-9fa8-6fd1b9c7e4d2",
                                                                      "e50b2aac-0cfe-43ed-afab-0973ee0620f5",
                                                                      "9ec00813-a964-4df5-9ac2-3871240cab6f",
                                                                      "e356d407-13c6-4bb4-b54b-eb488d50279f",
                                                                      "69a11fd6-278f-4f29-8f7d-6707553b359e",
                                                                      "42db016a-7c6a-4ef3-bd3d-30d4ca3710f7",
                                                                      new Date(1559662781738L),
                                                                      new Date(1559662783055L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559662780621L), -9,
                                                                      "a4034bc9-0ad9-413d-a688-f2f8ba2ad6aa",
                                                                      "6738a459-e331-4fe4-ac0c-7c61ed6f2d82",
                                                                      "4dd6c471-3cdd-4c0d-8111-d6f76a14703e",
                                                                      "ec399751-681c-4f70-befc-e561323b0fc9",
                                                                      "6dd903de-e7b0-415a-8cc1-ac0695453a3a",
                                                                      "3c4b5446-d597-4adf-bbd9-45098746a5d1",
                                                                      new Date(1559662780987L),
                                                                      new Date(1559662777185L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559662780621L), -9,
                                                                      "a4034bc9-0ad9-413d-a688-f2f8ba2ad6aa",
                                                                      "6738a459-e331-4fe4-ac0c-7c61ed6f2d82",
                                                                      "4dd6c471-3cdd-4c0d-8111-d6f76a14703e",
                                                                      "ec399751-681c-4f70-befc-e561323b0fc9",
                                                                      "6dd903de-e7b0-415a-8cc1-ac0695453a3a",
                                                                      "3c4b5446-d597-4adf-bbd9-45098746a5d1",
                                                                      new Date(1559662780987L),
                                                                      new Date(1559662777185L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559662781734L), 61,
                                                                 "bec72184-cd05-4fd5-83f2-2d37a41fd673",
                                                                 "57c27648-e272-42d8-9e27-d62af18ad97a",
                                                                 "d894bbcf-7bd6-4282-82a4-42cdf6a7323c",
                                                                 "610e3ffd-c8d4-49ec-9884-e1b1a8430348",
                                                                 "2964a55a-145f-47a3-8499-86a432e4ea28",
                                                                 "63a2849b-ca83-4b02-9b98-d258e519b76b",
                                                                 new Date(1559662782098L), new Date(1559662780236L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559662780135L), -70,
                                                                        "f77aed6d-61ab-4b3c-a639-18d428da9d48",
                                                                        "4eb2640b-bdd9-41d9-af41-80c4638e21b803b8ffd7-78b0-4b80-be00-872229e9358493209fba-fa48-440e-bf9f-cb23dc2c0ea73e906730-284c-4c33-b718-470a2e6dcddc569961f2-213a-42fa-9537-1ef8869cd0e9463e142a-0d71-4aea-9036-831388d280f15b20ecd7-5db5-47ab-84de-1d5e37b6e83fa209873c-049b-410c-9240-b0b6aba4d4f119037530-63cc-4d2b-94d9-a47b253940bd482369d4-00e9-47cf-82eb-965ce69e28d1645d1dc8-dbbc-4360-b0e2-e7bd9751a186d896d60e-47c9-466c-b242-c6908fb07875673e20ab-f266-45c7-b131-7e4fb0bdf181abcad057-2c8d-4a61-b64c-b31454196aa4ed0abbe8-9f18-46d9-92f5-53e52cc5ea5fcfb778fe-f4c7-4c05-a868-d6c13b32f8ce7e1c182e-bf13-4e4d-8d6e-9a34f161d2532fc2d040-5526-4147-bc33-93faa462475b9f1dcd87-d047-4d49-8707-8d001f5bd0aae7363e1d-fbc7-43f2-880a-0641075f8152a1e71bc2-7f9a-4838-ab09-6ec7da9c7c2df56058f0-3607-437c-aa5d-104965f31d1b8ace3cd5-fcb9-4853-b34c-264ee73aaba961d100b2-c041-4bcf-bd73-b1672849da2139032923-f115-4e86-ba3a-e2e4365467fe5eb51efb-eb4d-4c8d-8e49-4a8eed79ddcca35cdc3f-a389-46b4-8ebd-6d39dd8df4eeab5dc0fe-3b16-44d3-84c5-3e1e6784e7e58456ab16-04df-4e79-bde4-00f9c9a124acb8726668-b2bd-4ab3-a0c5-851ecd773c16cbc5201b-bd88-4e11-b2f5-65d359fda362642bcb1a-e74d-4988-be29-a53563ecd7128d919fa1-e2fd-4fc3-81d0-85dc071280dcd4930f85-4a82-4a87-be65-4e57ee28d127b6728f6c-b1a6-4a4d-820d-cd5134d7e04610da4358-9b61-48c8-bdf5-b1dca1d412968c90957b-b2d5-48c9-9426-e1c0cd9652c111bfb316-7b55-4583-8816-6565640278db35e60204-df41-42e8-830e-7498c1948b53c71c3c30-52a2-4271-93c1-28ee499f051d6e089ed7-a891-482e-8bb5-0e6a858f9661de6d576c-ee6a-4707-9a81-757efb8cedbbb49cfdb6-01b2-4969-8016-a054759bc319c78905ff-19cd-422d-87b7-63d50fcf08364981d06b-aa79-48b0-8588-7b7e6939953eaafb0adb-378b-4881-b6e6-ace67e013412a62dbdee-d4c7-49cf-a1e6-cd8522f8d47d2d131b31-0f88-46fa-a5fb-333e8decd57dc81ac0c2-b550-4945-aa59-09de9f3ee653de89368e-8f94-41e6-a7ec-80267a38e8759eb61a94-1f54-4c47-b09c-9537b9fb330b51e44f8b-6ba3-446b-9082-21e2549620f4e09316c2-8dfc-44d1-990e-4108c70563028cee9ea3-4569-4a51-88c3-04e8961ed918980c6267-00e6-4539-89eb-fdddd8c8a76cd17f1317-d7cd-4a82-8dac-c9d9d7727c2c",
                                                                        "2e787e45-306a-4b70-9678-ee5f275bd5e7",
                                                                        "23935e1e-8d18-4867-b7f5-da0deb89901d",
                                                                        "9ddc2b7c-b777-4ddf-8690-2860da3dc546",
                                                                        "05e6e1e6-5f6b-4813-a894-7dedb6c0208482f5482f-12dd-4c81-b31a-b2881fafdce4c8e8ba42-c8a9-4b97-930b-91013dddfdc3b958860d-e619-4dba-8ccd-db813cb59efd",
                                                                        new Date(1559662778745L),
                                                                        new Date(1559662778077L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559662782881L), 58,
                                                                      "2aa2f3f6-80e6-42fa-a03c-68355ec533d2",
                                                                      "a99499ac-e32d-4b03-97e9-e2429ee5bc4e",
                                                                      "a4f2860b-db0d-4193-940c-a80bd3cc30dd",
                                                                      "71e2d3c5-f9c7-429f-8fe6-a9f3195d08bb",
                                                                      "3d37003d-8442-4ac6-b6fa-3b58191d8d5a",
                                                                      "0de6e2cc-887a-4486-8f0d-577540257a70",
                                                                      new Date(1559662776534L),
                                                                      new Date(1559662776497L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559662782881L), 58,
                                                                      "2aa2f3f6-80e6-42fa-a03c-68355ec533d2",
                                                                      "a99499ac-e32d-4b03-97e9-e2429ee5bc4e",
                                                                      "a4f2860b-db0d-4193-940c-a80bd3cc30dd",
                                                                      "71e2d3c5-f9c7-429f-8fe6-a9f3195d08bb",
                                                                      "3d37003d-8442-4ac6-b6fa-3b58191d8d5a",
                                                                      "0de6e2cc-887a-4486-8f0d-577540257a70",
                                                                      new Date(1559662776534L),
                                                                      new Date(1559662776497L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559662779405L), 124,
                                                                      "6d5746fa-3a17-4a8c-95a4-a2c4a78835f4",
                                                                      "b4adc219-a871-49f1-9785-f8dfb0f0f2fe",
                                                                      "13443132-794e-4550-822a-4c5d3998e082",
                                                                      "7fcd1dde-2b60-436e-b528-cd12185ecec6",
                                                                      "3088558a-4dc7-4aab-8b75-6862dc67276f",
                                                                      "925d796e-ba89-472e-958a-cfcdbf67b47a",
                                                                      new Date(1559662781287L),
                                                                      new Date(1559662776690L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
