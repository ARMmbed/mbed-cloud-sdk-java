// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096043757L), -92,
                                                                      "66b23639-c8fc-46ac-9a94-7503b7b9679c",
                                                                      "9d33e9dd-0104-40e5-b4cb-9d77c87613d2",
                                                                      "1047e084-67a5-4a0b-a98e-d53eb7e51b6f",
                                                                      "eebc4ecd-a87d-4476-8657-c6213266e51b",
                                                                      "77528f0e-48b3-4838-9672-6e82f21b6c6e",
                                                                      "38f4ec77-b36c-4b84-8240-f372863ad8c6",
                                                                      new Date(1558096044502L),
                                                                      new Date(1558096045271L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096040426L), 116,
                                                                      "566f20a8-9c2a-4c44-a622-952fd2d44f42",
                                                                      "42e18997-8409-4ada-aa74-b0f250314733",
                                                                      "bebdbe7f-a703-4d59-b1ec-c61f6c8b7c3a",
                                                                      "23e6e8d1-b77e-44b6-b9a3-c32e814e6638",
                                                                      "fea7da3f-cefa-4202-a7a2-c397bd6f3dc9",
                                                                      "e1cf5fdb-a1aa-4f2c-bc9a-a656ca11ad6f",
                                                                      new Date(1558096037617L),
                                                                      new Date(1558096045281L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558096040426L), 116,
                                                                      "566f20a8-9c2a-4c44-a622-952fd2d44f42",
                                                                      "42e18997-8409-4ada-aa74-b0f250314733",
                                                                      "bebdbe7f-a703-4d59-b1ec-c61f6c8b7c3a",
                                                                      "23e6e8d1-b77e-44b6-b9a3-c32e814e6638",
                                                                      "fea7da3f-cefa-4202-a7a2-c397bd6f3dc9",
                                                                      "e1cf5fdb-a1aa-4f2c-bc9a-a656ca11ad6f",
                                                                      new Date(1558096037617L),
                                                                      new Date(1558096045281L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558096044284L), 80,
                                                                 "740e0eb8-9f33-4868-a8df-e9ea70577150",
                                                                 "25afa3b4-4415-4859-99cb-78034b061000",
                                                                 "f41e2935-b8bb-4221-9ad8-9acee5d6edb1",
                                                                 "b0bd4d71-7448-4d42-a19c-c702819afc64",
                                                                 "2c4d8fa4-8e3d-4241-b6d0-0c9ece66c3ce",
                                                                 "1aa62d63-f542-4efc-ab7a-c5670ed0e729",
                                                                 new Date(1558096038761L), new Date(1558096041838L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558096040203L), 34,
                                                                        "08d79221-232a-42e3-a607-ca3c4a0830cc",
                                                                        "da091def-e964-49de-81f9-ab82e1eb3f8718361a04-24c7-4fa6-9cce-e373342787e71e2468b1-e5e8-491c-a717-279ab2904441fb3cc37b-2ba2-4c85-8306-cf5ae1a04fa43b326110-572b-42a0-996c-0bde47e73157bfa5602d-0e22-461a-b752-5e40143b638bc59ca502-9fb8-45c2-a521-c3f60aac154a0b8c96cb-5474-4064-9fc9-706f6c3e922e906d31bf-a179-454e-bbcf-f7dc9a786750e7870778-5fc4-4c65-a185-6fd8d02841212dd8e6c7-fb04-4d5c-b372-2e7582963d42e652a9c0-f944-4cbe-af4d-41ec1c0394c2972dc7f3-2bf0-4670-85bc-70eea5c3988c6c9d4dc7-6384-40b8-b113-925e05cda53a50e60dc5-ec30-46e3-8091-e03bbdb5065e8ac53c4a-fd66-4dc1-a04e-9ad3a3414b302997752b-d62d-4591-b55f-f9dddf4a48726a74b2e8-d257-4e01-835a-bebdf5bc046fc8c0dbcd-6af0-424d-869f-a07b8aed5ce3d1508931-267f-4aeb-84ea-a9b452144e9e9fdd79a8-6235-431c-bde2-07e866d6010b897aa923-ed8b-4036-b865-467f3b58e33609857a0d-6877-41ce-b23e-b36fb5fcb63a2b5d5f1f-7158-4c04-b239-910ac4a1958e46d232ec-1137-4355-823f-8d9cdf313f09590690e7-c510-4b6d-bf7a-409799097c66e99420d9-fcbc-45c1-ae69-9b6988aabc430266e6f6-8f61-45e5-ba5d-189925b22f9a03d13074-502e-408b-b315-8fe0b22fb67645681e34-086a-4e5c-a0e4-53ae8fd4376daf0578bd-342c-425f-a148-8e13b682f7966c8ce56a-2909-4aa8-b08c-07d0e91b1ab42dae63de-1599-4af9-a5d6-e7ee67b74c6e40b1e052-932f-4ce2-803f-9846d6dec28b906741f5-d4cc-4501-b500-b72291ecad3c4d815f9e-bb11-438f-8857-f73a86cd2a7f0053d675-0f16-4d6d-92a2-1b0fdfda114ba004c8bc-13c9-4732-b6e2-d556bbf4fdd7b2656cab-bf54-4ae2-a8a1-79eea66561ea634b2c81-1c33-444e-b786-60934ad27942bbe7be1e-c13d-42ec-951d-483cf3dbf9c6a56532ad-6860-43da-8dc9-4fe6c804caacd6e4301e-9f4b-4c02-a73b-8706d051e42c70151c4c-2308-42f4-8b57-caa677dc29093e5bbc22-b1bb-4752-9688-55ba986c6ba0bca375b2-6c9f-4a67-80d3-3c13e7c807e5183ad888-2e36-4b70-b2cb-30b0242795976274e535-adc9-45d8-84d5-53ea0269f2fa24fe7db8-1498-4339-b523-5c970dc7205807352509-1d2b-4539-bf4f-5c322eebb1db7d860f92-020e-49d6-8785-70660221ffba5d29b691-1a40-414d-ad90-a7226ee65f2fa259c994-57b7-4d87-a74f-d4bd22e560b2b9bb6567-eb6a-49fc-b693-38ca5b421d4516224307-35a6-433d-8f66-57ecb2e45bf877c691be-3f62-4ff9-9a59-956e36381022",
                                                                        "c77d0f98-4c1a-4126-b458-0f3fdacaad16",
                                                                        "8dfd676c-3605-4530-86d6-5b212db0797e",
                                                                        "dce57873-f8ec-4e64-a0db-4ecd6c740802",
                                                                        "eb4b2ffc-f49a-4766-be5e-8b0f90b77b81bd51057e-bda1-4da3-a7ed-37fd42ac203c1fd4b81d-ef5c-4ac8-afcd-ced915d4955c58bb2a58-78bc-433a-9a4b-99b25f93b74d",
                                                                        new Date(1558096042360L),
                                                                        new Date(1558096036101L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096042426L), 23,
                                                                      "928bdd80-8a6c-4750-94d7-a59ba4bcc0fc",
                                                                      "c467270a-bacc-42e0-90ad-ba31e403f7ef",
                                                                      "5bd2ee9d-9c33-42ae-9cfc-24676f68e30a",
                                                                      "f3fe5015-1367-4a10-8313-37a71673c029",
                                                                      "931a03c1-af2f-463b-b8da-e9c1ef4467d7",
                                                                      "d9556ab1-0cca-4b83-bd9a-bdce2ec77de9",
                                                                      new Date(1558096044398L),
                                                                      new Date(1558096037282L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558096042426L), 23,
                                                                      "928bdd80-8a6c-4750-94d7-a59ba4bcc0fc",
                                                                      "c467270a-bacc-42e0-90ad-ba31e403f7ef",
                                                                      "5bd2ee9d-9c33-42ae-9cfc-24676f68e30a",
                                                                      "f3fe5015-1367-4a10-8313-37a71673c029",
                                                                      "931a03c1-af2f-463b-b8da-e9c1ef4467d7",
                                                                      "d9556ab1-0cca-4b83-bd9a-bdce2ec77de9",
                                                                      new Date(1558096044398L),
                                                                      new Date(1558096037282L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558096035645L), 16,
                                                                      "70a80c30-e6b8-4522-934f-9d51afa8d54f",
                                                                      "6df390ca-3e30-48a0-922a-12cfc373c8c7",
                                                                      "09871418-02eb-4a6a-8b88-98488d9c17a6",
                                                                      "340e80f0-5f98-40da-9bf5-9b2d1cb929f6",
                                                                      "bad14cb0-a7bb-49e8-bea4-3735c46ad7e0",
                                                                      "f2b720b6-db71-4b1f-9c1f-869bab4d6b28",
                                                                      new Date(1558096040561L),
                                                                      new Date(1558096037455L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
