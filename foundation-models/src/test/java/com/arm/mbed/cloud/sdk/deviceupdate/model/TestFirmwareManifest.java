// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559300107211L), -22,
                                                                      "ec35020a-9d75-4498-be3a-221773e52728",
                                                                      "a5b53816-ea26-46ab-a899-caff25c0363c",
                                                                      "5da0dfec-85d2-44f3-8b5c-8d9e62b42bde",
                                                                      "a5ce8800-6593-48e3-957e-18feeeb74b64",
                                                                      "a2976949-f0b7-4d82-8a8c-18bdb133925e",
                                                                      "7c5ac78a-2f6f-4608-ab6e-d17d9bb0e6fa",
                                                                      new Date(1559300106290L),
                                                                      new Date(1559300100761L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559300097812L), -59,
                                                                      "bbccc204-a116-4a21-9fc7-b27232dd4c34",
                                                                      "010ce578-ce62-4808-bc39-e79988bdc812",
                                                                      "738e238b-16da-42ee-8c18-62266358eaa5",
                                                                      "ff75155e-91a9-4b78-ba9b-a71cbb7e6a9c",
                                                                      "31a9a9b2-2abc-4166-92ff-ef5e046ffb2c",
                                                                      "344e980e-d130-4ed9-ba84-f786cf0b869d",
                                                                      new Date(1559300099355L),
                                                                      new Date(1559300105492L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559300097812L), -59,
                                                                      "bbccc204-a116-4a21-9fc7-b27232dd4c34",
                                                                      "010ce578-ce62-4808-bc39-e79988bdc812",
                                                                      "738e238b-16da-42ee-8c18-62266358eaa5",
                                                                      "ff75155e-91a9-4b78-ba9b-a71cbb7e6a9c",
                                                                      "31a9a9b2-2abc-4166-92ff-ef5e046ffb2c",
                                                                      "344e980e-d130-4ed9-ba84-f786cf0b869d",
                                                                      new Date(1559300099355L),
                                                                      new Date(1559300105492L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559300098649L), -67,
                                                                 "38878317-c752-4cbd-8881-9e0bafb72e21",
                                                                 "aa93184a-7b98-4f97-b2f5-5a1965c7ac34",
                                                                 "a262fb83-ca9b-4482-b4e7-342724d7a914",
                                                                 "e38a90f9-d174-4c81-a4ad-85ffdc2be9e2",
                                                                 "ab61319d-b200-410b-a64a-9e7594e505bc",
                                                                 "e4b42b75-b8c8-4b5c-905d-6e673152bce3",
                                                                 new Date(1559300106643L), new Date(1559300100344L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559300106707L), 52,
                                                                        "b3fcddc0-c240-4981-8817-db2bbb4e6681",
                                                                        "f9fbc623-34d1-4ab4-9ae5-4a334257e60a21ef219d-a72d-45ab-8864-e340b37b59246a91fd36-6049-42c2-b754-47e27146d892c266d11a-0ddb-45a9-99be-dd340b06c2a55375c2fd-40fc-468f-8854-50d5489170bfaaf53c4f-5725-4b72-a054-1a4a1c6e2987c0c41de7-c2aa-40bc-9605-b1a3614ce1b8493b4471-5154-41b9-8513-00adef6da534ca9e64bc-0ec4-41c2-810f-2d880827849b8d95a60e-aff1-4280-966d-4fa72e221ee08995be97-c31f-4622-ab8f-59cbeea61f10621e7d58-a784-4a9f-83f1-b4bd0d8e1dffe8bcabb8-5bc5-44f9-96aa-f04ae4a52dc9b9f389d7-9304-4757-bc7c-d1fd2747d0ed198b2fec-116b-4012-a053-e4506cb8060ec8a41b01-2030-4a07-ae2b-5ae89feb8d2a278ea09d-6e3a-454b-aed7-63aa08f95e72bdaf019d-0357-49f0-8837-fd76419feceb290adf6c-5419-4fbb-af00-c52950367f0bd1835322-7438-413d-8178-68650b741ac504db75e5-8a5a-4dd3-ba23-ba553a6b835218586cd2-3e75-4b7c-bc8a-1b41431ffc949e29771d-038a-4b65-a36c-222fcacebd5bf29db040-7342-4e11-8ff1-267cd6a3de06985b3e42-2256-45b8-9850-307949225f47102c2ab6-a0ee-48fb-bdec-458e73515aa5f57b959d-86a9-4849-8a85-3479664413b6e471ca0f-753a-4ad7-8db6-827256fe7283807a5bdf-72d0-44ae-8912-9441435d91b09a0baaf4-5edb-4dd4-86dd-e70a698f3c1f3e2c1ee5-68db-46fb-86a5-6663206ea762c317b56a-7667-4395-82dd-40f6a70df526d63ad533-a660-4977-aa95-e4fbe924083a8bace9c2-9a14-4ddc-954c-1f9a360934ea1ccf5b77-d169-4bf3-acff-4cfb0e2bb9bc608ed015-3ddf-486f-928d-9d25348543d8c8956640-9f30-4cf2-b2cf-9569133011c17120ba2f-0958-4553-885f-633e2eb4bc10dd9e2cea-8894-4fc4-9041-410bc63c9279ac8069f8-cd68-4bce-8997-ca5339431ead3b5dd198-3a1d-47ca-98fa-68617e282b41c259166a-0497-485b-970b-8621b13195c40030c4d9-128a-4e6d-bc54-48ef527b20451e58b41d-be7d-4e1b-90f5-1c058b928f0805b2f432-6fb9-47ec-a8bd-59d5f902f772847157f3-d6f5-4f72-a739-da2ce549b93fbe0703df-1fc1-44b8-9e91-6d3a41d955e1b6c727ba-82da-4938-9215-34882daa7bfee65e92f6-ed1f-4611-9781-de2f43965933cb3b4106-8bb3-48e0-9425-f908c131682461cc05cd-536c-4517-bd75-f41b2caef3dd53d6c831-df84-4a61-a204-06ef50649f37afade67d-399d-4e98-8a9d-37c12a55a77f79739b41-c911-44f0-9830-abb4ca1fa07d230825b6-02ed-4c89-8f37-a973ad99a99ccfc20f83-7f61-4aff-91a9-dd3eecd85851",
                                                                        "2ab67cf5-92a3-44bd-9bf9-4be3127468e9",
                                                                        "993b01d2-f327-45ac-b30b-e6686fad0585",
                                                                        "ab0454bc-b58d-438b-b071-f2975e70d39f",
                                                                        "49742158-94dd-4ac7-8c24-0e514e41d9457ac4a4ea-75d6-4339-a6be-98d86d7aa95a73946c23-f3d5-4046-a68e-c6ad27e39ebe95553103-5a3a-439e-a189-bdd307412a1c",
                                                                        new Date(1559300099759L),
                                                                        new Date(1559300099318L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559300099390L), 79,
                                                                      "d65996c4-3f81-495d-97ad-31ce2691e4b9",
                                                                      "cfe52f81-1107-479e-b618-9d113fe4e6f9",
                                                                      "4fa7ce67-b2a9-490b-a3bc-21fc94ff036a",
                                                                      "ecba751f-826f-4422-91ea-2c7c941dfeaa",
                                                                      "2fcba2ea-0920-438d-9bd2-7c971347c8b1",
                                                                      "d5aa4f29-048a-483d-8840-45e18e1c3c2e",
                                                                      new Date(1559300106205L),
                                                                      new Date(1559300103229L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559300099390L), 79,
                                                                      "d65996c4-3f81-495d-97ad-31ce2691e4b9",
                                                                      "cfe52f81-1107-479e-b618-9d113fe4e6f9",
                                                                      "4fa7ce67-b2a9-490b-a3bc-21fc94ff036a",
                                                                      "ecba751f-826f-4422-91ea-2c7c941dfeaa",
                                                                      "2fcba2ea-0920-438d-9bd2-7c971347c8b1",
                                                                      "d5aa4f29-048a-483d-8840-45e18e1c3c2e",
                                                                      new Date(1559300106205L),
                                                                      new Date(1559300103229L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559300104905L), -52,
                                                                      "c8b1185d-3579-4fe2-9753-42d243472f92",
                                                                      "013c9083-6f2a-42dd-ae3e-91d060b0c4e8",
                                                                      "69183d75-13aa-43fa-b9c7-1e6248525863",
                                                                      "d234472c-e1a6-4609-befd-774edaa77746",
                                                                      "c0ad8cb4-dfce-42e2-93e6-e118aae286c8",
                                                                      "2e281294-6b51-4839-b0d2-826a226549df",
                                                                      new Date(1559300097641L),
                                                                      new Date(1559300102799L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
