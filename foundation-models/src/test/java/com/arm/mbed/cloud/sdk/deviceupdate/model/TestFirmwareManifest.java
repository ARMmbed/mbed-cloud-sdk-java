// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559752147325L), -61,
                                                                      "b1fcb720-f1c6-4a3e-b292-4e0d7d8ca96a",
                                                                      "cdd91892-8639-44f3-8f96-8f9f3b446eb2",
                                                                      "6837bd1c-97e0-4d0a-9b22-fc1711027eeb",
                                                                      "fde3961d-5834-4c81-9261-6839b5b3a1b3",
                                                                      "0f899319-343a-4651-b778-7a477d0f72a7",
                                                                      "bccdca6e-3639-4266-8461-be09bfd2d792",
                                                                      new Date(1559752152763L),
                                                                      new Date(1559752149712L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559752148685L), -40,
                                                                      "f9d26970-9610-4924-96c3-85291af7f0b7",
                                                                      "5c786005-a73b-42dc-b592-6378008ff0a0",
                                                                      "6d353715-fc47-4d59-abae-9c431013517f",
                                                                      "bf55f5db-0cf5-4421-9193-50fb7dc2a395",
                                                                      "0138fa54-10e5-4542-8d14-485adcdbd16a",
                                                                      "276b4b4f-580a-4c08-acf9-c712242a70c5",
                                                                      new Date(1559752146394L),
                                                                      new Date(1559752144430L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559752148685L), -40,
                                                                      "f9d26970-9610-4924-96c3-85291af7f0b7",
                                                                      "5c786005-a73b-42dc-b592-6378008ff0a0",
                                                                      "6d353715-fc47-4d59-abae-9c431013517f",
                                                                      "bf55f5db-0cf5-4421-9193-50fb7dc2a395",
                                                                      "0138fa54-10e5-4542-8d14-485adcdbd16a",
                                                                      "276b4b4f-580a-4c08-acf9-c712242a70c5",
                                                                      new Date(1559752146394L),
                                                                      new Date(1559752144430L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559752143825L), 54,
                                                                 "c10ef12f-30c5-4272-991d-90f862f47804",
                                                                 "0680207d-1255-4603-ac68-25db793a6cca",
                                                                 "8e2090ad-9183-4c65-8c84-19a595a17c35",
                                                                 "f7d235db-fc6e-4dbe-b9cf-34300eb97503",
                                                                 "fc862d28-f8be-4b13-9a2b-e9bb4359b62b",
                                                                 "853a26dd-1513-4123-9f6d-45c9ef72320a",
                                                                 new Date(1559752147507L), new Date(1559752151487L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559752151149L), 0,
                                                                        "2ac9cb8a-5dec-42d8-add8-8690039bbea2",
                                                                        "306e3d21-6107-43ce-a0dc-8e91a05fe9eaeb194f9e-2839-4b7e-8a87-e3a6a2e04fe6375911ad-6fcf-40cb-81bb-56b28ad635a1b0abc775-2f81-4d50-b1d4-975b0813670a86f33b4b-c433-4c39-b28d-7d096cb713dfef1845e1-d5b3-4528-8281-6ef4e89c761082820ac5-91f2-40e8-9fe6-3da23846912afdcbb533-1683-4692-b60b-fa0e0f5bf02533b10345-4004-48ca-b695-8fa01eab512ba56254d3-8284-46ee-b4c7-f187972798724dfaece0-1702-4f4d-902f-435d3672c64ff4ab3585-42ea-4096-9663-de43e2f8cbba6c6b3a7d-3fe8-47dd-9e67-d4d1b5707709c59bad3b-55ce-403d-a0ed-28da7f0a89b116182e56-f0af-4fdc-b270-2defbe34d711489ff6c3-d704-4bc2-a7e2-1e102dce34a0ccd64fe5-9f5c-42c0-a6c1-d2df1bc4202404f1855e-ca56-4a73-bd79-4a19a0242cd76f43376b-387e-4beb-9279-93e764c052d5193a6b14-2ebe-4b67-947d-3a976a78d822731247e1-33e6-437e-9ad1-325a2e727140c0aa0ab3-6398-484a-bbc9-2beacb65d980fac05aa6-56e6-4073-8e01-66feb0c9eaf38690b73e-5edf-4b07-8a82-3692d627e64726801101-73fd-41a8-bad6-556e3575d24a939e32a8-1a8c-4b05-88e6-a93bccd59319a5cb57d6-acf6-496a-b688-511bafa42aac8316297c-0feb-4e9c-bf89-8a4e77faea7fc42535cc-5fd2-4c57-8fb9-efeb51c93a205da37602-9243-4563-a9bd-344ebb17c7aad2665a7d-eb88-49f4-8209-b75f9c17490a72d30b4b-4cc0-46bc-9f28-5cbd77e6fd2476c7d146-3d7e-4168-86ef-92e3f78916bcfe9f208e-0f82-43c3-9c9f-c2d58689aa14517bb616-abbe-4128-bcdf-17fd0cf715ace9c75fda-8c3f-4d4d-99e6-0b950e1367276efb2429-0ba4-49c8-bce9-40d6dd0c044b87a47378-9eef-40f8-aa5f-146f97675ed57ce640c0-ecce-4649-9ebc-699d23054f66f82dcbb4-14c8-4766-9cf8-cf7aebd640f3e5eb7651-ff0e-46c1-b877-4736e2bf2e6e7c874ab5-f61c-4ada-b02d-832c82dc497773ea8382-f872-44d5-a1c5-88c2b45b2261df790267-2744-4102-8f74-4ecd99eba173d2874bec-4cb8-44b6-8d4a-bb62e78d7ed967cdd448-50d0-4899-b85e-c94715588593dff2259e-98c4-49a3-8e31-c3b9fb0a7ea603b42e88-a6b5-4eee-8715-03439eab107d38ff359e-0cc0-413a-950b-5501423f01ce0eb36c6a-c3a2-47c1-8d4c-8c4f9e6deba88710c668-f6a7-41a2-bb38-1d574745640abba503fe-9691-496c-b880-c2a73b5d6bf7f6f66eee-00ce-46ba-9d88-6ef06ecb7e8978e70b4b-a1a5-4bf5-8a4d-79308de871615c895471-631f-43d4-818f-20ffd3cb79e846e6b5ad-f024-4306-a8d9-88755a70d649",
                                                                        "e69dc10a-8d45-444a-a7a7-8b32da91c32c",
                                                                        "58dde6c3-b3f3-43c1-af1b-d8efff0e675b",
                                                                        "21f2515f-7c10-4ac3-b9dd-b5a278cc457b",
                                                                        "608b1bd9-e594-49c4-8854-62f029e4c6c32671f2e1-20d9-42fd-828d-65d30cfe0ce8a8aa2cbf-795f-464b-9ac5-334e293ea08c6b8b14ba-b2b2-4fe7-9100-dedefcca6af8",
                                                                        new Date(1559752149935L),
                                                                        new Date(1559752151645L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559752152289L), -101,
                                                                      "6013bf41-4fe3-4460-a4ab-e905bf5f68d9",
                                                                      "e7dc874b-7f00-42a9-8375-51068e50fba2",
                                                                      "9377cd04-d484-4be9-bed5-b76c07ebfa50",
                                                                      "2f32b1c8-15b7-4cec-9f2e-bb2537a648ad",
                                                                      "87820f11-d4a1-40ec-8cd7-33636524beaf",
                                                                      "8904528c-196d-43a1-86ce-f16b850fdeeb",
                                                                      new Date(1559752146644L),
                                                                      new Date(1559752144737L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559752152289L), -101,
                                                                      "6013bf41-4fe3-4460-a4ab-e905bf5f68d9",
                                                                      "e7dc874b-7f00-42a9-8375-51068e50fba2",
                                                                      "9377cd04-d484-4be9-bed5-b76c07ebfa50",
                                                                      "2f32b1c8-15b7-4cec-9f2e-bb2537a648ad",
                                                                      "87820f11-d4a1-40ec-8cd7-33636524beaf",
                                                                      "8904528c-196d-43a1-86ce-f16b850fdeeb",
                                                                      new Date(1559752146644L),
                                                                      new Date(1559752144737L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559752148449L), -11,
                                                                      "6f924645-15f0-4323-85bd-3a6fd28da9fd",
                                                                      "17382c6a-0361-4d8c-b7c3-c356ce0c6ce7",
                                                                      "0ee750ab-318c-4f62-b82b-e226a0a15c2c",
                                                                      "8cfd4fa0-0797-44cb-bf11-02e08f8eceb0",
                                                                      "19573a0f-cb79-44fc-9c0c-757822fff58a",
                                                                      "4b0eac4d-9872-490c-89fa-214607082ae3",
                                                                      new Date(1559752145885L),
                                                                      new Date(1559752149463L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
