// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559655028837L), -54,
                                                                      "3e30d664-db17-4a3e-989e-6b9e861dce4f",
                                                                      "b99ac02e-c953-4e2a-98ea-9ebc4370694f",
                                                                      "6ae9f6e5-5baf-4a1d-b5d8-a1f63302188e",
                                                                      "5e299205-6160-4b27-91eb-f24f410b23bc",
                                                                      "6c238023-0c95-4e0f-af7e-b6f33b5e7064",
                                                                      "ff4e73fc-a626-4935-9599-0503b936362b",
                                                                      new Date(1559655031747L),
                                                                      new Date(1559655029387L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559655034321L), -4,
                                                                      "46ee589e-2eb2-4887-85a9-913cb987900b",
                                                                      "8633d28e-783e-47a1-bbed-000e905df7ae",
                                                                      "e066541f-b0e0-47c6-8705-e526a826c3f4",
                                                                      "4414128d-80ca-4f1c-9960-e17281b0c502",
                                                                      "502f21ea-9120-4633-b828-47882fbc0612",
                                                                      "2fcc4a41-115f-4251-bf57-1cba449c9928",
                                                                      new Date(1559655036989L),
                                                                      new Date(1559655030270L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559655034321L), -4,
                                                                      "46ee589e-2eb2-4887-85a9-913cb987900b",
                                                                      "8633d28e-783e-47a1-bbed-000e905df7ae",
                                                                      "e066541f-b0e0-47c6-8705-e526a826c3f4",
                                                                      "4414128d-80ca-4f1c-9960-e17281b0c502",
                                                                      "502f21ea-9120-4633-b828-47882fbc0612",
                                                                      "2fcc4a41-115f-4251-bf57-1cba449c9928",
                                                                      new Date(1559655036989L),
                                                                      new Date(1559655030270L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559655034890L), 39,
                                                                 "d591bdca-5bd0-44e1-b4f8-f34624f3b58a",
                                                                 "7c298deb-e63b-4bdd-b785-d821e45af88b",
                                                                 "46f1ac26-d8c4-4cc8-b05f-a2b597096de4",
                                                                 "c264a814-cf17-4b09-b7a1-1e57c79b21dd",
                                                                 "eab398bd-e8cf-444e-82ba-c527faa9bc1c",
                                                                 "77636ae1-50c2-46ac-b695-4c0c3714d071",
                                                                 new Date(1559655032771L), new Date(1559655031119L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559655036244L), 73,
                                                                        "164d9876-ae8c-4e57-98c2-313d7b96158a",
                                                                        "16d8940a-429f-43ad-81b0-9a0924c4b6e0c54a08cd-e496-4dde-a0b4-fe7341f0d678b5e75303-3161-4559-800b-1dea76d98031a7961b88-6e98-4ca1-8bce-b229ed548725fe3a2b62-afe0-4211-a582-b6efb47763c632a75040-9e33-45d4-89cb-11ce8210cb725ae1a50d-4738-4ec2-8b3a-0d1d64f92afb35ad53e5-17ed-4c36-ac0b-216d08d733b5a08e91ec-c63f-4d1a-8e3f-93fcad960e60be750bf0-3e4f-4bcd-8a9d-bd170b38f70e3ab0946c-a2ab-467f-aa52-48815276ca8223a5e8a4-ed49-4180-92a1-0730a09dcbff558a8f75-e9a2-4b6b-ac87-3624fd22ec374ed41429-6f0d-4e50-accd-13cb05faad9e52094156-7266-404e-a7e1-c24a6d7c3ebde76024a6-def4-4d38-a262-340c94bc29fe323e0e89-bc38-43f2-8744-e2b366496b536784f7b1-07ef-4bd6-acfe-bbc50b1357c3e7b7e00a-8aed-4c56-9bbe-4e12f6f6ba87f6c7f30b-e3e9-4799-bc90-16e899a01c8544aa00ba-d9e9-4e6c-9b25-7f3ee74378029541052b-ff5a-4d32-8243-fc66a2df56703ef4d029-f0dc-453f-b168-78ff912e9b63a87e93ca-8ba5-4153-9450-48145f5492813572b1b7-5334-4d93-819e-b0c62bd9a3f13a80db59-19ad-44a3-ba93-bcacd43d9ae00b3c9abc-1c7e-46e0-a80b-f0b7e46fe5a49395aaf8-4914-43af-9aa8-f42b3960fbd9253a7148-9fc8-4d40-b276-b290ac7467041b486848-8d60-4a85-bf09-aefd2ebc3b2e787cada6-221a-4a1f-960f-df0dad254f7807df0af2-04b3-4b02-b914-f062ac441c740697f09b-d7f6-4b49-a109-a3c565f5229004ad2641-9b98-45d8-8de6-ab3ed8d423c41a938816-104e-4f76-8897-5a176a29e5b7d11b0295-a68c-4df0-9059-f81f3a8cccfb389a9c59-db7d-4219-b066-8c28aed603ff5470572e-fb9e-4c25-ba80-397d196571fc3b672f64-e6ae-4a0b-a1ab-7e10782cbbae4de15965-f5f8-4fcf-a4e1-30a94286c1fef5dbe2e3-c7a0-4926-969a-1ea8226ea4f68a0ac485-8f7f-4d6e-9d01-f05091024005776da240-3660-4ec4-8e58-88c1bc35af927555c022-cd17-4d14-98cd-21d973c9ea0a9e9a450b-c2ca-408a-b85d-b6918fab0d21fd0294a8-786d-4007-b334-d7255cf9ed58d725f6d5-c563-4680-8b44-70c2d7c0e259412d7522-004a-4862-aab0-f08b16428085bf493af3-ff2a-4a9e-8276-6cf0d4e5ed9655c58c58-3e53-4b09-8175-6c21f747605787311cd2-856d-4fe4-8c06-ea4e7863e280cb329339-bed9-4571-8536-e39bc2572321f80e77f0-21dd-4562-8a9a-279956103d551a484987-4d29-408e-b8be-9c2e537b4ffdbe5d6673-197c-4869-b27e-92c0babdafaac04e2996-eb42-4ae6-a01f-125fbf2b7522",
                                                                        "81a7c247-e64a-4cf0-b283-40fe53e97334",
                                                                        "9bf54cfc-2a49-49f6-aa00-b24b39fd5fda",
                                                                        "b290fd41-6026-459f-8031-8be1519bb44e",
                                                                        "c51b92c9-cdb7-4e42-8f7b-becbc360ef5c25d8ed38-c7eb-413c-8646-f65a324d74bc2712641a-76c2-4cb4-9fe4-f746ac9658b3d4cf07bf-4485-46f6-8a45-922b179c44ac",
                                                                        new Date(1559655032508L),
                                                                        new Date(1559655035830L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559655033924L), 49,
                                                                      "2eed5d48-7c28-4564-8ba6-b6d4e857d54e",
                                                                      "3ac723d3-97df-4d61-80f1-8fcc103d2537",
                                                                      "afef70fc-783d-42dc-9685-2fca1afc4a2c",
                                                                      "8fe261f0-fe8e-4175-ae6b-35ffe37d6f90",
                                                                      "e822b7b0-702a-4abc-9ad8-391fa9de43b5",
                                                                      "f8b8528d-8179-438e-a6e4-d5bdde2e25ae",
                                                                      new Date(1559655028828L),
                                                                      new Date(1559655027434L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559655033924L), 49,
                                                                      "2eed5d48-7c28-4564-8ba6-b6d4e857d54e",
                                                                      "3ac723d3-97df-4d61-80f1-8fcc103d2537",
                                                                      "afef70fc-783d-42dc-9685-2fca1afc4a2c",
                                                                      "8fe261f0-fe8e-4175-ae6b-35ffe37d6f90",
                                                                      "e822b7b0-702a-4abc-9ad8-391fa9de43b5",
                                                                      "f8b8528d-8179-438e-a6e4-d5bdde2e25ae",
                                                                      new Date(1559655028828L),
                                                                      new Date(1559655027434L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559655027286L), -113,
                                                                      "0e2ec3df-5d6d-4241-9097-54460ac1059f",
                                                                      "a8519ace-0278-446a-bc20-0f10ccd62bb4",
                                                                      "91c443f2-8ecf-45bd-a609-cf05592c1f1f",
                                                                      "3a7d3e09-9a04-4fd7-8de7-2eb6c06fadf8",
                                                                      "3eb2af8e-71c1-4337-90bf-d4ebad7798d7",
                                                                      "30707bf1-f053-4469-91bb-4948b3046f4a",
                                                                      new Date(1559655035602L),
                                                                      new Date(1559655033910L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
