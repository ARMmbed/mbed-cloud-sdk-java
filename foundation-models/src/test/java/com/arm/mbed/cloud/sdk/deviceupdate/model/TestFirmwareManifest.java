// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559745301600L), 15,
                                                                      "678da995-4272-4dda-b195-4c76b2a653f3",
                                                                      "6cb920fc-091b-4a62-ab7b-d70d1f5c3040",
                                                                      "a26e696e-b638-4862-bf73-46ede143e0c1",
                                                                      "4e58d2a1-f5bf-4ba4-8ffa-c6e85e53038b",
                                                                      "65c100ae-2642-4f3b-86f2-dd1ed961feef",
                                                                      "c1b5180d-7132-4617-8839-02448e47a49e",
                                                                      new Date(1559745294783L),
                                                                      new Date(1559745295978L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559745295707L), -107,
                                                                      "2caac4df-35aa-41b6-822a-3bcff45a9863",
                                                                      "5deffcad-81f9-4d34-8d7c-7bf791f92fda",
                                                                      "b6e06c43-6feb-4895-94a0-ef3ef727cfa2",
                                                                      "ec3bbedc-5c8d-4472-827c-6b7c9a927b33",
                                                                      "f3f40658-3dc3-4758-acbb-d3a53d86bef7",
                                                                      "e66fccd2-98c5-4771-8b89-fea5d3fa0ee7",
                                                                      new Date(1559745294546L),
                                                                      new Date(1559745297294L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559745295707L), -107,
                                                                      "2caac4df-35aa-41b6-822a-3bcff45a9863",
                                                                      "5deffcad-81f9-4d34-8d7c-7bf791f92fda",
                                                                      "b6e06c43-6feb-4895-94a0-ef3ef727cfa2",
                                                                      "ec3bbedc-5c8d-4472-827c-6b7c9a927b33",
                                                                      "f3f40658-3dc3-4758-acbb-d3a53d86bef7",
                                                                      "e66fccd2-98c5-4771-8b89-fea5d3fa0ee7",
                                                                      new Date(1559745294546L),
                                                                      new Date(1559745297294L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559745303028L), -75,
                                                                 "460febe1-44a3-4f81-9276-408445e34460",
                                                                 "f1cdbcef-df56-460e-b766-afba9421b24b",
                                                                 "fde5c309-663a-4174-b773-79714ca654cf",
                                                                 "667f0496-75f3-46e3-ad35-015407227e05",
                                                                 "26ae0818-1336-48b8-8afb-ab3412343168",
                                                                 "77aca923-a639-40bf-8dde-7696c7517db5",
                                                                 new Date(1559745295373L), new Date(1559745301979L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559745303238L), -4,
                                                                        "0f815fac-957f-4c8b-924c-7360e1a5188d",
                                                                        "4804b8e7-718e-4abe-bf83-77a9ad2b411af35f87f8-62cd-4f21-8fe7-9b4d084045fcf990f9ed-05b6-424a-ae9d-90064e9ee94d2a009af1-5236-4508-b907-6b4773fd8a3eb8026ae0-53be-416d-abd4-83844606f5e8889a3cc9-8a38-4b17-815c-17e7af59456741caa828-b589-44c5-9913-396953467b6a5c5bae7a-6c05-4a4b-a2ba-0df666d7af3b92751e42-eb53-4f60-bdf3-1cdf6867bac026d30557-760b-4ddd-afb6-d685ce60a64b4d1cd52a-457e-4d6e-8aa9-47f12720b2aef1e50243-f746-4c28-8282-dd20ea100994d51ce714-d71a-4723-a626-cacaf3cad237ec0679c6-b749-4a1e-93ed-f95851d0fd213331c50a-309f-4aa5-ab14-fbd9ffa58840c6dd744c-2bfb-4cc5-ad06-ed53615226f00c37ee1c-fbfb-4075-9515-ea69b30d4c034ca71b8c-0fd6-4367-a2f7-afc376b058cdb214155c-7681-4306-8325-508e6df07216f88667f5-86d1-4c69-a278-d4bb0b377ac8194ae905-975f-4777-8862-2a81ccb49773fa6147ca-dde6-4325-9fc3-fb73bb30c05bb873a005-4680-402b-8b7e-28f01b06a4b30bf6bce5-b477-4b9f-beed-84e99e79f67a3680c372-1722-4740-8e35-55c14893c02be5f670d1-2315-4e75-9cbb-b5649cac32562ffed4e5-c007-4cf1-b42c-56e697c0cd7b9054e371-d4e9-4cd0-9c18-59ec7dfd4204bcb732c9-b82e-4e59-ac0a-2e37e4b813cf72c097b9-a1bb-45cd-b1bf-b98378a8c7040474f793-5a8a-4015-bd0f-bb2f253dfccbaea0c103-8cf8-4d46-9a59-079684544eec543b3168-18ab-4515-9657-f50ea1f296875d31a2f1-6ceb-4c26-a7c1-91a88b647dbe4a8d7048-a882-4d90-b0dc-bda8285ed68ab2d01e4e-1ec7-4f35-b312-4b1d4917999278de94f9-9953-4041-a008-57650351f9768fd898b3-44f2-4229-909f-17b1f37d40d0659748e7-a146-42dd-8726-d772e1d16a8717860fed-e319-4dfe-abe9-3835d0b5691425c813bb-fdf2-46e9-9fa5-43dd3a0180945ec0193d-03a3-493e-bd8a-e08d736f34aa0bb7c972-031e-4235-af11-88f80b66fb25d25e2109-3856-4b5a-bad5-5938ac4309d21f53ab64-27f0-4fdc-8844-0bff297c30fc586f8c2b-5211-453f-b856-7ef0df781dfdc1fafd95-70d1-4a0c-8a53-3d8ae0be9b5a571615f9-708d-4bd9-887a-27af57bb38bea596c298-4288-4594-8704-479345c1c2bfddff9920-49e0-4d76-b9ec-920ee954bccefee31414-b168-45de-9e68-3ffa8ea944b3d0c10efb-0c6b-484b-be4c-561ca168b7130446c4e5-413b-44f2-9609-82e0ebf1ae98e3f9f82c-5b37-4d85-9ded-d0fc4fdf97572edf0d7b-8941-4434-8d56-2a77c23b8228dc565160-9c94-470c-9a99-fa766882a00d",
                                                                        "f734bdae-0b4c-4afe-8ec1-2bd1a9cdd438",
                                                                        "2636cfd4-0343-41b9-844f-9114ba0c23bd",
                                                                        "eb36874d-7ab8-461f-82b7-4c810e766b17",
                                                                        "c9a8b85d-7778-4c94-9425-828d4d03228bc10d237d-edcc-4eec-a9cd-b0756407d5d8bc424720-fbed-4ccd-bf2a-fcf6d9c2d1d345f15b04-44ab-4d5a-80e3-76fe5f28f99e",
                                                                        new Date(1559745303111L),
                                                                        new Date(1559745299148L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559745297627L), 50,
                                                                      "6d6b2df7-a2e3-42e9-8969-5c9161295333",
                                                                      "681f2552-8ba1-474d-8ae7-46f4b540ff77",
                                                                      "8526540f-eebf-42ae-9a9c-230ab0e41bd6",
                                                                      "9886b66b-b10b-48ed-a479-c1d621e2dbb2",
                                                                      "f4a15507-6db3-4de9-b3f5-9c6c4c5876ed",
                                                                      "162e21f8-0962-499a-ad98-2c87ebcf22d7",
                                                                      new Date(1559745300752L),
                                                                      new Date(1559745296730L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559745297627L), 50,
                                                                      "6d6b2df7-a2e3-42e9-8969-5c9161295333",
                                                                      "681f2552-8ba1-474d-8ae7-46f4b540ff77",
                                                                      "8526540f-eebf-42ae-9a9c-230ab0e41bd6",
                                                                      "9886b66b-b10b-48ed-a479-c1d621e2dbb2",
                                                                      "f4a15507-6db3-4de9-b3f5-9c6c4c5876ed",
                                                                      "162e21f8-0962-499a-ad98-2c87ebcf22d7",
                                                                      new Date(1559745300752L),
                                                                      new Date(1559745296730L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559745295873L), -57,
                                                                      "1bf48625-3733-40df-8d86-3537cb029c68",
                                                                      "340372b4-98fb-47b3-8897-6c044108c472",
                                                                      "850b66ed-2b58-4d91-ad5d-a3ee9a29b759",
                                                                      "9cc5e9e1-3d90-4dfd-8323-fb08cbbeb9be",
                                                                      "dfabf851-7d29-496d-834c-1d1ca3218f9f",
                                                                      "9871cddb-58ca-4edb-afd0-de2817a4c5cc",
                                                                      new Date(1559745298612L),
                                                                      new Date(1559745297515L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
