// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559313348249L), -124,
                                                                      "e935e2aa-cfdb-469f-9354-44688c5465f6",
                                                                      "dfcad801-628c-43e4-a41f-fc2823315506",
                                                                      "ca7c5914-8a26-4f5c-ab5a-816291198a58",
                                                                      "9f293dc9-fe6d-49c9-9287-cf56cf1fb95c",
                                                                      "06335769-91f9-4a7c-9c9b-17f32b3f3024",
                                                                      "5b70441c-286f-4999-ba0b-f417d42a91df",
                                                                      new Date(1559313339841L),
                                                                      new Date(1559313346460L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559313346997L), 83,
                                                                      "eaf088cb-8c12-481e-b339-d159ff58e315",
                                                                      "89fd7fd2-2440-42eb-a608-a0be8a836d8c",
                                                                      "e2bc419a-2d1c-4d49-9187-703494237bb2",
                                                                      "21f71d81-2923-4059-973c-e5033ec60fe2",
                                                                      "660fa79c-6683-40c5-9b08-bb7550591bc5",
                                                                      "5688cbd4-926e-4650-b66b-b84ea96e1694",
                                                                      new Date(1559313346715L),
                                                                      new Date(1559313346001L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559313346997L), 83,
                                                                      "eaf088cb-8c12-481e-b339-d159ff58e315",
                                                                      "89fd7fd2-2440-42eb-a608-a0be8a836d8c",
                                                                      "e2bc419a-2d1c-4d49-9187-703494237bb2",
                                                                      "21f71d81-2923-4059-973c-e5033ec60fe2",
                                                                      "660fa79c-6683-40c5-9b08-bb7550591bc5",
                                                                      "5688cbd4-926e-4650-b66b-b84ea96e1694",
                                                                      new Date(1559313346715L),
                                                                      new Date(1559313346001L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559313345331L), -125,
                                                                 "0d058c36-49e8-4f05-b613-cfbc9285196c",
                                                                 "432af6ff-f6b3-47c9-b066-8ad7ff044267",
                                                                 "8d996269-5ec7-422c-8772-c40f2c158aad",
                                                                 "e47a2086-ac2c-4e21-a177-1628cf4c298a",
                                                                 "a025608d-7d72-45d1-b959-c9f6377a1892",
                                                                 "9c3fa93b-239d-4786-b0ec-d3c21ea0267d",
                                                                 new Date(1559313339281L), new Date(1559313343126L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559313341767L), -11,
                                                                        "3992a198-ea3f-44be-8aa6-6bcc2ad8f2b4",
                                                                        "afcba458-e4b1-440c-af30-57df000f63b5dad2eb50-8e18-42d8-a774-9334effddb2feeae21f3-a30e-4028-8841-5d6206a6d79b9492f7df-889f-4923-b89a-f230188ae49dc6a66ec5-f1cd-4e80-a264-c6f98298e685bab01fcc-d33f-42c9-9d9a-756832d643835df95853-a24f-4766-8e63-9ec82993eaded8edfed9-d106-4e01-8162-9eb4c0c969dd1dae9785-dee1-4972-ac7a-3ccdab155bcabdfa2920-0e17-4440-a289-7d2a254b5e8e20fc2dd6-cb8e-4588-9a11-ab5daa179983faba79f4-4ab0-433d-8316-ed99ef97acc9b9e31f1a-37e8-40ae-a8f2-2c99bb82cf92fd020f8c-85c8-4c17-9d79-6cbdfe557fb066fe5d57-55ab-428c-9aee-c253ad9d7fa890af1e7c-b75b-4533-8136-e15804a1afe2e346f9a9-bc1c-4fd9-bbf8-52a7251e60059752c816-54ca-4394-b9be-8f15b1ebf732ba0f7b22-9497-437d-b724-b62aea633fba6122a502-f580-490e-8a8f-be88481915149878f34c-64a9-4485-badc-85d421cfc298243a3eb6-b9fb-44e9-bb7a-004ca3fb09f012103b5c-40c6-4a9c-8a3d-f55d11abb18befee09af-fbf4-4cf7-9d84-a78500d60700098b5d36-9c11-4ab8-a968-d306167bed4fcfbe32b9-90e6-42e9-b465-ec5a2803f5bb4b16281b-8a65-4de0-844b-12be22a3c5a44ef8c61c-54a9-49a9-be55-3681196b0ef86b3e5a2e-c653-4c1a-ad81-002b7477c90148ef3183-fd7f-4378-ba81-f3d989e45309711d6f0b-0274-49eb-adb8-5e667c9db0abc7c596f2-d97d-46b2-87a6-f2aeb5fc6b41e26dc30b-0eda-4632-890f-0918b65ee5babe44981f-1df4-45e4-b86f-c6a9700d3b43c3024581-f2be-43c3-88bf-b00b0fa95278ba6c6097-eb64-440b-85fd-760ffd7b3cf8f6394359-8ef3-46c6-a839-ab5f0812608dba025afe-3a98-49ee-95d1-5b89e008b36feb74d768-b251-4477-8195-465f0071b9004412f569-6c28-430e-915b-bc8611c780b3442beaba-6b40-42e4-9350-cee27a0e0f3f1ca7b252-efa0-4032-9423-227c58e4b21b61de77f7-a24d-482a-ab1c-3a7bec4570b9828b3768-0f2b-4746-8061-cd742ed85ab7f9665655-f8d8-4dfd-add6-238ac471e3431de3f085-8344-43b5-a502-675ba86cf5363cc9afbe-5197-4d5d-ae5f-29901ed4e50596239ac4-cb08-4d0d-ae7b-160004e408f1eb4ef54a-9e8d-418f-8626-a921592aebd6c0b3bcfe-5974-45a4-8e13-d69206ed66475e60eeda-8dc9-4ddd-8bc1-a23ba28cef9a9aade59a-5c24-46ad-8ea3-15e9fa010b571e93f254-36df-44f2-8dd8-99effd10a49440fb0ccf-c7ef-4b0a-a53b-2149ccb88ec4f6677149-7091-4d60-91e5-3f6ec1e4961b744aaa3b-8494-4eb6-a79c-234865b81e90",
                                                                        "74c43249-d9f7-42f4-b176-6622692cb485",
                                                                        "63b16377-2e4c-475c-a73a-4865ea72128a",
                                                                        "de800083-7fca-48d8-b0ce-3d47f9ec837b",
                                                                        "5084df23-ac74-4ab4-aae4-feea3e0ab3ca56837ba7-75a2-46ed-a12a-94c6c2ebe598a780ee48-19a6-4590-8a32-5c7fce376811d42beab0-c29d-4e8e-946d-7634d9eb7d50",
                                                                        new Date(1559313344438L),
                                                                        new Date(1559313346807L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559313346386L), -57,
                                                                      "7a7e02b6-1d4d-4551-919c-ba20f0709ddb",
                                                                      "fb667392-e1b6-4dae-a704-c9f06218bba1",
                                                                      "a97e054f-726a-42fb-8a5d-61ff49721922",
                                                                      "18e5f0c9-f4bf-4bba-b806-b4ad02719f43",
                                                                      "267191ea-13ae-498d-9595-6a9c1d5cc52a",
                                                                      "2463eff1-0143-4acd-bfdb-8fad2cba4ae4",
                                                                      new Date(1559313345158L),
                                                                      new Date(1559313343462L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559313346386L), -57,
                                                                      "7a7e02b6-1d4d-4551-919c-ba20f0709ddb",
                                                                      "fb667392-e1b6-4dae-a704-c9f06218bba1",
                                                                      "a97e054f-726a-42fb-8a5d-61ff49721922",
                                                                      "18e5f0c9-f4bf-4bba-b806-b4ad02719f43",
                                                                      "267191ea-13ae-498d-9595-6a9c1d5cc52a",
                                                                      "2463eff1-0143-4acd-bfdb-8fad2cba4ae4",
                                                                      new Date(1559313345158L),
                                                                      new Date(1559313343462L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559313344015L), -39,
                                                                      "aa1c6fce-226e-4149-aeaf-af7359013355",
                                                                      "9f2f2335-a726-4e43-9b55-b27a1d37ffa0",
                                                                      "a07e3f6b-f2bf-405c-917a-d846c6f74776",
                                                                      "bb1b3339-02f7-4ad1-b527-89079ff8e806",
                                                                      "405b04be-32f1-4a5c-9058-a0ac3c28940a",
                                                                      "7240dfe6-4b92-4aa1-aab0-53a30b8e2d50",
                                                                      new Date(1559313340464L),
                                                                      new Date(1559313339739L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
