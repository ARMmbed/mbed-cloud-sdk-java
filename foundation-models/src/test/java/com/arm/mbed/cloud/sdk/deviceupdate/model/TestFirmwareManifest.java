// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559747929706L), -82,
                                                                      "153ab9b8-f7af-4f28-ba63-678b4bb82633",
                                                                      "db7a825b-53c7-4273-9461-5cd31ef6bda9",
                                                                      "2eef149c-6078-4d77-87f5-8180a5daf2b2",
                                                                      "1ad7a055-9990-41c1-bf94-379d960750ce",
                                                                      "d93c665e-bba5-42bf-a2dc-f151c2da3d08",
                                                                      "ed14466f-b6aa-4c0b-bebc-fefa70d6523f",
                                                                      new Date(1559747927888L),
                                                                      new Date(1559747926232L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559747931907L), 29,
                                                                      "f884ee34-92d4-4760-9e3b-2fac019743d0",
                                                                      "3c2e4658-595e-48fc-baea-b2bdd4033df4",
                                                                      "a3b0201c-6f1e-4ca4-824d-66c074a790f3",
                                                                      "b7ddf571-568d-4835-82cd-a2800dab8182",
                                                                      "591a930e-6b30-4dd7-a966-07f779247b0f",
                                                                      "7752f28e-8fec-4996-91f4-dacd1ae90fab",
                                                                      new Date(1559747931216L),
                                                                      new Date(1559747927154L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559747931907L), 29,
                                                                      "f884ee34-92d4-4760-9e3b-2fac019743d0",
                                                                      "3c2e4658-595e-48fc-baea-b2bdd4033df4",
                                                                      "a3b0201c-6f1e-4ca4-824d-66c074a790f3",
                                                                      "b7ddf571-568d-4835-82cd-a2800dab8182",
                                                                      "591a930e-6b30-4dd7-a966-07f779247b0f",
                                                                      "7752f28e-8fec-4996-91f4-dacd1ae90fab",
                                                                      new Date(1559747931216L),
                                                                      new Date(1559747927154L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559747930239L), -43,
                                                                 "d6bdb3fc-324d-420a-8f4e-9e09d6bd957c",
                                                                 "af1f4bb7-85bd-43d9-9e0d-7e3064fc40ce",
                                                                 "24919446-0132-4cbe-ac6a-9fbdf2296073",
                                                                 "4a672370-ec8b-4e4f-a9f0-bd1e713ae24c",
                                                                 "43051a63-be1b-4aac-b651-0cc0529aab4e",
                                                                 "bcd96bbe-9c18-44e9-b132-db5957f2ac3c",
                                                                 new Date(1559747927763L), new Date(1559747930634L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559747927160L), -96,
                                                                        "dbbbcab6-e977-47f8-81af-443dbbb4bc73",
                                                                        "be0c95fe-b0d8-4f90-9bb3-9ea20c44de2a497acb24-e6a0-4e15-98ee-f7d6089ba34111c6772d-1a39-480c-b97e-176ff671dfdc8d9dff0c-8173-43f7-98b0-b00f17c93633a8f29981-a223-4ef0-862b-0f2e4bbf35ea0ee7b749-b166-4163-8e94-87f1b9fe3e0670ee183f-6768-4603-99b8-ac325096cb00af8e57cd-4201-4725-b186-404aea3743554b69761d-f193-4a65-a401-e1407d4f562ffafe4f86-021b-43de-a6eb-5b6df83ef175c43eb752-af61-41d4-aaea-128923f77850560570cd-4747-4ce6-903d-5eeb44376642df7e162b-0749-42ea-be61-9b22925fca3e8bf4644f-21fc-437e-826d-c4928b18c71498dafca7-7de3-4e2c-b09c-134072fbb78d5a0b9d4f-7a5c-47b5-9f8d-0958be17ab3db9b2562b-1fcd-48fe-893b-5a96e6b79f23b999269c-debe-4f27-ab0a-f9b7a4906f30b74de560-f122-44a6-9b7a-2e0d3af09d4f62be4ce9-8d52-40db-8337-6a2067339c5b53e5fe4e-3607-4fb5-b1c7-9e336305eeb7010bd31c-d723-4025-890c-eb60e2592bc4bb142382-46b8-4bf7-99ad-7d1147aa245fbc4524f6-21b2-4aaa-a6ed-3aad53425458a6cbb003-772f-42ad-bc09-306c3aae8c74cab4b96f-c26f-4a40-8d21-1e4f49344238da034f51-828f-4679-a9bf-85eade9728332ff88f1f-6bd4-4bd6-94f9-7e4962ad0b0a72b171e4-d593-407e-b25d-b00e552fb6d4f667a352-e0dc-4318-ae14-6012a8e5bb6d527f533e-82a0-4fdb-b20c-4bfec8e54c715c372a00-bd20-4530-8d81-552080d3bef09137dc21-01ad-43b4-b202-2d4b87b8bb51016340be-a784-4a14-abb5-1ff74ae0deeabd8f0657-2529-4bb8-b034-27f3d2e84c38e5b2f585-9508-4d79-9092-4956674dfb0de1ae1718-e9d7-447e-8a37-e306bda8d58e6794bde0-fcbd-4260-9531-5f6873e8ea87ff27f3dc-c5bf-42d3-a9a4-cf340cdc2fd8eb2db912-8c42-4424-b5de-d24c5e27f46568258c5c-29df-40e5-b85b-9496b8aef475c8250b38-27de-4fc2-9671-1541e30a41449d390a42-2f90-480c-8d72-b9ddfc259c0afe3c079e-f6c2-4870-a713-b2e54de70e93732955fc-4822-4abb-bc88-ea899915d1a9d8ed7126-488a-4333-b6a8-e379dcafe3bc8d291fcc-332f-46fb-b807-bfa657155e464cc26ac1-83ea-4553-9a59-8ed9316b84f658fc027c-c05c-47e3-8ebc-f725cf159792148b356a-2a87-4d1a-b0e2-b791026015d413f659cf-4740-4c2f-be22-580a8bfcda7c2ed935b3-c6d9-46ca-8e0a-eb09e46565e2f49e5a69-163e-4c6a-a331-e092c4ca8b8421f5ead8-b72c-4838-82af-a97a8367de2ae1e73e88-16db-433e-baec-ab4e832028cb48897a37-9f60-4053-8644-890448960ebf",
                                                                        "c2b09a12-0bdc-4cf5-885c-65e8b8ea1e12",
                                                                        "41048981-4eec-4afc-90de-3197752f35b2",
                                                                        "e75b7a0e-7849-4549-a3c4-6d641457d24b",
                                                                        "018c3859-602f-4c5c-9703-f4f68987258625a6c93d-e46c-49de-a54e-8bcccbe446ec1a63841e-c6e5-4c93-8105-1a433cea04163e4d11a0-d0eb-4d46-a710-303fe78dee05",
                                                                        new Date(1559747931058L),
                                                                        new Date(1559747930173L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559747927899L), 51,
                                                                      "fce7fe4d-df41-4e0b-8d6a-f47ae03d25ad",
                                                                      "0d832282-f41f-4a9b-b3e3-8adcbd630b12",
                                                                      "118d64b6-de50-43a7-8db0-447943ef9fd9",
                                                                      "1d1cf9cc-fd9e-4dfb-8096-ab82085ec5e9",
                                                                      "85602afb-e8f2-47b3-a9fc-d48ebf30be74",
                                                                      "78d21eae-1059-4a8d-a26d-784c0cf237fe",
                                                                      new Date(1559747933984L),
                                                                      new Date(1559747930746L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559747927899L), 51,
                                                                      "fce7fe4d-df41-4e0b-8d6a-f47ae03d25ad",
                                                                      "0d832282-f41f-4a9b-b3e3-8adcbd630b12",
                                                                      "118d64b6-de50-43a7-8db0-447943ef9fd9",
                                                                      "1d1cf9cc-fd9e-4dfb-8096-ab82085ec5e9",
                                                                      "85602afb-e8f2-47b3-a9fc-d48ebf30be74",
                                                                      "78d21eae-1059-4a8d-a26d-784c0cf237fe",
                                                                      new Date(1559747933984L),
                                                                      new Date(1559747930746L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559747932628L), 12,
                                                                      "68f0ae34-4c01-4c1d-93b5-0dabc86e414d",
                                                                      "151ddf0f-35e4-434c-95d1-70ad946d300d",
                                                                      "369ff7c6-fc02-4ca8-a709-d8539a5a009e",
                                                                      "739e8172-76b6-42f2-aa13-cd3168e6e1bd",
                                                                      "1c98ad8c-f59b-49d4-8697-1e91ae46d28f",
                                                                      "de294c21-db70-4c04-824a-a35cbd901b75",
                                                                      new Date(1559747927162L),
                                                                      new Date(1559747932605L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
