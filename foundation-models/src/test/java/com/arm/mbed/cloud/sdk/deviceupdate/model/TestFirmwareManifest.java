// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559560665684L), 98,
                                                                      "ea6cb6fa-6729-4eea-aaa1-2262afa014ec",
                                                                      "93f80194-916d-4d49-8191-6eba7af7feb1",
                                                                      "2594eb97-5173-46d4-842f-2ed961af74ac",
                                                                      "ba35952c-504a-4ad0-9306-e0c78ef6002e",
                                                                      "44d96f11-d83f-4f44-bab8-f0752a2d50eb",
                                                                      "26999eae-0bed-408b-bbe9-0a2b4689bc9b",
                                                                      new Date(1559560669700L),
                                                                      new Date(1559560670050L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559560663383L), 82,
                                                                      "a510ede9-4251-4f9c-9902-de7f5cf17735",
                                                                      "9612734a-95ee-4fff-a408-75d029ae6a47",
                                                                      "f050de54-a852-4fbb-b283-c35cde36bfeb",
                                                                      "842f8592-ce96-4ea2-ac76-79fdd1aaeb44",
                                                                      "d19e44eb-7a7f-4e6f-acbb-3a9a62fc4d39",
                                                                      "006ee9d2-e8cb-47fe-aa6e-b5072269e537",
                                                                      new Date(1559560666996L),
                                                                      new Date(1559560669545L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559560663383L), 82,
                                                                      "a510ede9-4251-4f9c-9902-de7f5cf17735",
                                                                      "9612734a-95ee-4fff-a408-75d029ae6a47",
                                                                      "f050de54-a852-4fbb-b283-c35cde36bfeb",
                                                                      "842f8592-ce96-4ea2-ac76-79fdd1aaeb44",
                                                                      "d19e44eb-7a7f-4e6f-acbb-3a9a62fc4d39",
                                                                      "006ee9d2-e8cb-47fe-aa6e-b5072269e537",
                                                                      new Date(1559560666996L),
                                                                      new Date(1559560669545L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559560669723L), 93,
                                                                 "54747825-bf52-4947-a83c-43a6c867e7a3",
                                                                 "43a66755-cef2-4b7f-810c-83af74f519d0",
                                                                 "822aec2e-4372-44da-a3c6-2249489c5d69",
                                                                 "a0635e48-8792-42a4-bfe9-125f3077a714",
                                                                 "ea07d099-54aa-4120-925a-9776524e792c",
                                                                 "575d8e4f-ad4a-4397-81f1-769a40f487ce",
                                                                 new Date(1559560670537L), new Date(1559560672322L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559560671271L), -48,
                                                                        "fec7c9b4-3a4a-4a34-bdfe-2f7c290369f8",
                                                                        "528ed4de-d551-4c1f-9973-5cbec22cd8a05af16abf-3ad0-49a1-92aa-cc474970d72b9f9693c1-3c71-4106-82e9-7874818b03ba22c54ff0-f136-4dca-aef8-79346e9ba2cf79ad4adb-6f56-45f0-b28a-2804374183899f6a8c59-19cd-4235-b02a-97064506ea865774c41c-abb2-479a-a1c6-a12c0918c92c04c238e9-f9ad-48cd-a1bd-d3c740a091209ffc2a7f-406c-46ac-af95-a9f3f3d62415e2c80fd3-251f-447a-b7dc-68f38aac388d796f8a7c-c4a2-4cc8-af3a-2e46bfbc03e85405d2d6-5f26-44b4-865c-0aa2e7eb30e996d5de11-b78b-4c32-8987-5cc04d55cc2188d3b557-6de0-44f1-ae47-70b9e5c35178cc69c85c-9a31-401a-9e27-493408c5f9c16e2d2c98-6885-450d-a4f1-439274bbe3a1e15588e2-f69f-47c9-aa88-56c072c140d1ad51f72b-f0ad-443c-a366-574d8170ab250f183f54-6e6b-4984-934d-0507eb38d0071994bdaf-44b4-44d5-a02c-917db436459914983f87-a83f-4b4b-a3d3-529768dc3e1dde9c44fd-fbc3-4216-90d1-b2ff2faf6153e087a182-3785-4cc6-a3a9-69b85e0cbde77fedd66d-55a0-4f76-8c72-34ab1a232edfefeeec01-f757-4176-9d0d-b9ac587dd6ca37f0f03f-9276-420f-a7c5-337b32837505a4e7137e-33db-4f98-a5aa-45510f0d4af189f62f34-842b-414d-b35c-45d4ebacb0181c926057-a0ee-427f-a686-8ab57218a011172b354b-825b-40cb-b2ea-f12b9ec2d9d240341b3f-8e65-4f38-b1f0-c7145746ac0ec00f9d89-0bd8-47c9-bd66-c313e1643ce0f9372f01-b1bb-403d-b665-c1ac07600b9715cc83d3-bd41-46e9-b236-8682fc2e98d6bb839295-efff-4c06-8b42-b3afc388e14c7b8b43b0-edf0-4d6f-9954-d8bb05778f7e27551e16-9480-44d1-8819-8ffc8d5f1d4026ab6725-74c1-40a5-80d2-53418a1a3f532d2b64df-9261-45f1-b011-d7697c0c6386944e1636-71b3-45af-b290-be31fed55ff74fe7428a-664a-4f04-bb4e-71f084855dbf9d7aefec-38f3-4985-b90d-9b85015efb4e1057427e-9bcb-4149-b013-1019e914c230973601c5-dcf6-40bd-8c40-e85178507834f9f8a9c5-f4e7-47c0-97ca-da3db4f1d9b0260e2a00-cbd2-47ca-ac22-74ec81f958e3035e7f18-f451-4f06-ae01-51bf4225f8399935a345-007c-4d30-9a00-a9b2eec6a5e5bcd1eacf-0acf-493e-98f2-97f86a17f93d2aacf1d2-cf46-41da-8df1-c802e443022f42bb4d9e-543a-4182-b33b-da2d1011dede71665732-19ad-4cfb-8418-8bd781dfb5b9d39ecd10-6be8-4b43-bdb9-5b8a2ee5b985617b7df3-cd9f-465f-b7d1-557a1f6d28c7a8db2c2f-cb9e-45d4-8c1e-7e6f53ba0c70a9e71054-7d97-4356-9a92-372c63d25d0e",
                                                                        "ee187690-0dde-41da-b411-93ded8964398",
                                                                        "612878cb-01e4-4a83-ad75-eed8a81dc98e",
                                                                        "560b3ee8-f172-42ac-b546-09ae95a7602b",
                                                                        "adfd723b-f5ef-4864-aee4-8663f6a844d158976cdc-36b6-4198-b37a-02e879ac8a4cd8aa3a54-bd40-4e02-9eda-7fc59629931d33ac0c08-5cb4-4902-9303-dad5faf6e45a",
                                                                        new Date(1559560665899L),
                                                                        new Date(1559560665963L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559560670524L), -32,
                                                                      "3b3d1cf5-71f0-4b05-925a-7570a33059d0",
                                                                      "d4795294-0509-4b0e-b1da-603d9cb75ef1",
                                                                      "8a24fed3-4bff-4a17-964d-303e4af5bc36",
                                                                      "09a5d0ce-d353-4177-8a6a-656d58c63e51",
                                                                      "848f09d4-ba82-4214-9c80-9468ab5d4b13",
                                                                      "3c8c8301-c47d-4773-9df2-e5f498dd35b9",
                                                                      new Date(1559560667915L),
                                                                      new Date(1559560670744L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559560670524L), -32,
                                                                      "3b3d1cf5-71f0-4b05-925a-7570a33059d0",
                                                                      "d4795294-0509-4b0e-b1da-603d9cb75ef1",
                                                                      "8a24fed3-4bff-4a17-964d-303e4af5bc36",
                                                                      "09a5d0ce-d353-4177-8a6a-656d58c63e51",
                                                                      "848f09d4-ba82-4214-9c80-9468ab5d4b13",
                                                                      "3c8c8301-c47d-4773-9df2-e5f498dd35b9",
                                                                      new Date(1559560667915L),
                                                                      new Date(1559560670744L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559560664579L), -73,
                                                                      "b29fc808-c051-4537-837d-4663c536c473",
                                                                      "317132ac-b91b-495e-907d-40b7c402d36c",
                                                                      "f57c74f1-6690-4fce-ad34-36629e8a5207",
                                                                      "77ebb9a3-80ed-4aed-a851-6e8eac40f6ff",
                                                                      "dcb02a10-2a6d-43ea-a1f5-aaeaa2aee7ac",
                                                                      "449ee7a1-d95e-4b8b-9f91-80c4d107d5dc",
                                                                      new Date(1559560670928L),
                                                                      new Date(1559560667056L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
