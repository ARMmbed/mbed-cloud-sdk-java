// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559754643762L),
                                                             "dc035f9d-5aa4-46ec-b216-2ac40cefdb3b", 1,
                                                             "28f3e989-7029-4803-a37f-87693ee04d92",
                                                             "3208b980-957a-442f-ac88-c67a257bab80",
                                                             "0136958d-e1c9-4ed2-adfe-14476a4306df",
                                                             "43c428d0-b015-4ca1-b661-8650655b66fc",
                                                             new Date(1559754639336L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559754643257L),
                                                             "2d50fcc4-d07e-4a19-b15d-85b87e0cbb00", -103,
                                                             "79c8a83f-1ce1-47ef-8c1d-697f217b18fc",
                                                             "5a03e565-8683-4050-b7de-6e068283db47",
                                                             "eb3bdc5c-7144-47b9-867d-fe815d1c9e3f",
                                                             "3026e349-6e3a-4bdd-a77f-dcf9fe601530",
                                                             new Date(1559754635139L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559754643257L),
                                                             "2d50fcc4-d07e-4a19-b15d-85b87e0cbb00", -103,
                                                             "79c8a83f-1ce1-47ef-8c1d-697f217b18fc",
                                                             "5a03e565-8683-4050-b7de-6e068283db47",
                                                             "eb3bdc5c-7144-47b9-867d-fe815d1c9e3f",
                                                             "3026e349-6e3a-4bdd-a77f-dcf9fe601530",
                                                             new Date(1559754635139L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559754637200L),
                                                        "b4adc47c-4d6b-4ee4-af5b-c9247372002e", -92,
                                                        "8224b61d-376d-4225-a5ca-ade5c74b6190",
                                                        "133fe9d0-a603-4178-a881-ff3859a16151",
                                                        "83dcf5d3-074c-476d-a68c-babea5790504",
                                                        "33f6eae6-5a51-42f0-909b-bdc1834cd25a",
                                                        new Date(1559754642613L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559754642152L),
                                                               "7c2630b5-f633-48ee-bac2-9f1573c3f285", -87,
                                                               "21f45f7a-16b5-4055-a8c7-91124a2d8027",
                                                               "17c3641b-d2b8-404b-9ba0-2dda764fc1ccca74a501-8f63-4b1b-9577-f4a22d689d83748e3fcf-9afb-4cda-b9b4-7efa410d11a84266b42f-76b4-4fb4-9f98-0eb070ef0eef7c7bb512-7005-4a1f-9269-5fa5a1ec60cf25bca3ce-b25f-4e7d-97b8-b530a61823cec3846e83-975f-45c1-8afc-041c3f30c64e19438606-673c-4e6a-a558-a204f820496bf801a2a0-9747-455b-80e9-faffbdf6a75e045bc722-bebd-4838-b6b6-889bc1cd2fb0d8d496da-7c44-484b-980c-cbe458933a13fa9a14d5-6c22-4091-b60a-365ac0a9b213381afa45-dca1-49db-b3ac-4e39327e82902a0839f7-8881-414f-bf39-f456559c48b88a25815e-4c9a-4d8a-b543-0f2e74b369d88dcff853-d744-4c1c-9aaa-7c49f186aefdcaed7320-cd45-4bd9-a569-8535738ea8f52fdc71a4-2070-4e13-a6ad-a85dd9c0e560feb6e122-a114-4377-acd6-ee472ca639aa76ea82a0-8006-4b54-9658-b5ae9ece5ae4a4b0eefc-da42-43f2-bcb0-0cc0afc363ae08a6625a-4d25-4c5b-a128-bef8f2045813955ea295-9a4f-472e-b65f-626e5062bfe750fde504-4537-4c1a-93ab-5bc63b1ec0153d2ba8ae-21af-4903-ae7b-770e56ef772bd00fb551-9236-4476-83d5-ca61bb572dc994b68f03-efd4-4c4e-b93b-ec956739be03ede7254c-2236-4d2f-a017-843c945361729f07a9cb-8003-40cf-a3f7-5c355ecee1fd2a822ad6-0a47-4b17-b2ec-4a6f0bac426bc4874f72-9224-4598-88c3-85897706c5f2a3d79efa-44f2-4485-b277-06e78752b6c16b13d3e6-e1fb-47e2-8cff-4c4ffb53783fbac9fb47-a62b-42ca-9927-a1cb439dbcf6d8dcd021-00c5-4ced-a84a-c444a22f9fed2a7cda95-d2bd-4d12-bfad-c5706a5008bd85d56c45-a953-4611-9d81-41c87945ed293ca0b019-2e42-451a-9c21-a57635a15a12f97962b6-7119-4fd2-bb46-6eedcd07c69f9a524a98-7778-4931-a3c0-fb972b32f6886752d502-abe5-4228-b3fc-c85fd4c457df55c6e1d6-2971-4f66-b034-215f9ba4f3d2f886ed11-a4e0-4cd1-a115-c3ac97beb2d879e871d3-525c-440c-bb5a-11611bd21b7852066e47-17f0-4289-bfde-d1728ccfe4e02f11c997-f6b4-497e-90bf-3097bd482b1803324a5e-99d5-4e5d-b9a0-3d72aa071cc14c53f312-3aba-4e47-817c-57f29af572175d81e5f5-44c0-4c13-a185-76ba4bffe274732cc6ca-41aa-43f1-88fd-a28bb4dd7a5fc69882ad-b11e-4cb7-91b6-edb999a8a11fa20177a1-4d73-4d20-9e60-e85da04e8c4c42711c39-1469-4298-ae7b-db5bd47847a8cf07782a-2943-4e31-9609-51998509d2f63a3dbac9-b775-4d0c-a110-176fd2a5b692b6c6da22-7a63-4436-bed9-a604d0193d50",
                                                               "938cb1b5-b5dd-4f5b-8b2e-af0d063bbb38",
                                                               "4cfe3278-8805-426f-a147-bb9ece323828dd1be1cc-5b55-4eac-b86f-65ff3212a576b29b57c6-8915-401e-a562-166e1c235cbe63b1ff0b-dc10-46d9-9be4-3a93563bcfaa",
                                                               new Date(1559754644120L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559754643635L),
                                                             "6509f808-4865-4782-8430-5690a91a4bed", -99,
                                                             "7bf124cf-9182-4c38-8c33-81384c606b9f",
                                                             "a1870de2-3a0c-499e-9d0c-ac5b4807039d",
                                                             "1c598ac0-9ed3-4010-80ce-0234868bcd9f",
                                                             "16ff2efa-540e-4633-9e11-1cabd8525898",
                                                             new Date(1559754636699L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559754643635L),
                                                             "6509f808-4865-4782-8430-5690a91a4bed", -99,
                                                             "7bf124cf-9182-4c38-8c33-81384c606b9f",
                                                             "a1870de2-3a0c-499e-9d0c-ac5b4807039d",
                                                             "1c598ac0-9ed3-4010-80ce-0234868bcd9f",
                                                             "16ff2efa-540e-4633-9e11-1cabd8525898",
                                                             new Date(1559754636699L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559754643936L),
                                                             "41fc4fac-e3b8-4385-bce5-b54052436bfd", 41,
                                                             "59b71522-9e10-4197-ab9f-3fde1c317f08",
                                                             "867d30b0-b677-44ac-90f2-6631e52b24a6",
                                                             "e30878b9-e475-40b3-9ebe-173b65be41c4",
                                                             "6786d9ef-7242-4011-b4d0-00cb7b637461",
                                                             new Date(1559754638213L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
