// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559313348904L),
                                                             "af532288-d12f-4b99-8fbc-fe265d3ed1f9", -123,
                                                             "8028b70d-e6da-4ea0-a170-67d1f7ca04ad",
                                                             "9dd0c9db-8cb2-4536-97d6-504537a1fe90",
                                                             "7eb11d4c-a424-4efc-a0f1-eb79ef2e1ae1",
                                                             "cbf22930-6a0a-4ffd-b58a-2ee29fcbf8e3",
                                                             new Date(1559313341974L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559313339261L),
                                                             "bbe2d114-9b2c-406d-92d3-3f3e7875f3b9", 46,
                                                             "26a0b08b-ceb2-4389-b7e0-ce361ca8615f",
                                                             "8f35dd99-068e-46f9-b181-e01791f50625",
                                                             "b5c9e1c6-942d-4e33-83c1-86ad978dfc02",
                                                             "01ba36b2-3671-4505-9ede-6a16fe19eae6",
                                                             new Date(1559313341549L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559313339261L),
                                                             "bbe2d114-9b2c-406d-92d3-3f3e7875f3b9", 46,
                                                             "26a0b08b-ceb2-4389-b7e0-ce361ca8615f",
                                                             "8f35dd99-068e-46f9-b181-e01791f50625",
                                                             "b5c9e1c6-942d-4e33-83c1-86ad978dfc02",
                                                             "01ba36b2-3671-4505-9ede-6a16fe19eae6",
                                                             new Date(1559313341549L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559313343118L),
                                                        "59d54322-6c5e-4665-adbb-44a907145c17", -43,
                                                        "c8770f47-edce-4a6b-bc64-c2cc450ba113",
                                                        "ce44028f-bb16-4241-9eb2-3b50ba7f620b",
                                                        "a8317c9a-8d11-4ebb-89b9-d46432cf9a49",
                                                        "fd9b2a28-290a-4f51-8a69-9c8a4e720b0e",
                                                        new Date(1559313342886L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559313345684L),
                                                               "fc65168b-ae55-4550-87e3-7bbcd56ea388", -114,
                                                               "7f0f5abd-8d17-4124-b3ab-8743c199dec2",
                                                               "d17a2077-d604-4b4b-b319-5855445d4076b601d6ef-3e38-4fdb-857a-ef322cfd4332ea3e7aeb-39d6-4b1e-a1e1-434535500a13a43d42f3-593c-4333-b965-0b69ccd19b824227c3cc-90a9-4745-a232-8fb376bac0613a45f1b5-d4d0-46eb-a42e-f82b1057fa8c632ca430-78b1-4b9b-a8eb-f3043e97106ed8798c68-50e8-4847-8d92-109a1b6364f80cc08207-971e-47f2-ae98-203228bb859e3f094ef4-5d68-48e4-8ce0-a48b198a6184a08be8f2-b934-47ba-8024-37c5663ceeeb492ad1ec-fc3a-4940-b3b3-b828c885dbc920275dac-89b7-46a7-8eb4-5ab6e646227cb5ee095d-42f5-4582-823a-7888af60fda37871f878-0540-4e05-9904-b55d52ff27092a33c853-720d-45f3-ae6f-ca021b95112e3a607d4d-aff5-45ab-ae99-0204f74b6e8fbea484cf-ecdc-4b7f-97e0-9a7989051558fe737553-c3e6-47e8-bc52-62292901bded2566f686-1916-4cb7-b9fd-6b4adafa032e2d1d172e-a027-42ef-8e3c-ce8e812f8d654f054b59-f2c3-4fea-b51e-6a0f68acfce24ac6b730-986b-44b6-bf42-561b3034939a044911cf-0437-40cf-aaa8-618da175c1a48349a3ad-a0e9-4626-8ba5-85f987afe863cf745126-3983-4869-b7d4-b98da47a035e8416d683-17d5-4d9d-99d0-382e7e15436864b9a364-b8e4-4fc7-8b5e-f564484fc9f640b679aa-ac9d-4413-afd7-5aa62c3d7199b668f76c-e3b5-4e7c-9ca3-b10bac5bfbb38864f250-e1ba-4a46-9b5e-2b20e57f00ab5333d136-918a-4118-b799-24e670778b32413168cf-2d6a-45fe-994c-7ad94ff0261667b624ef-fc55-4a21-ad0d-bb74cad8972960584ef3-2c90-4f1e-820d-7e42d94194dcbcf60116-8222-45d9-9b34-363c15e6c892de19723a-4dff-4b43-93a2-2a645148adcf9b2043d6-88a5-4484-bc7d-5387db4a79ccd094e19f-3448-4c9f-bc34-5bf0333f4764fa94d541-ae7c-4a86-b187-ad450454b0ffda0789b9-5829-453b-a41c-2cdaf4d56a10f714f41d-c322-4cd7-b039-c290f06e39afcc8aa124-1e7f-417d-afef-bc6ceb956719f68f0bdd-b2cc-4c1a-806f-d9cfa1b20bd76495c029-eed9-4fb7-86c6-43e5dc93abda9ca0f6f0-fb76-4b69-ae70-6462cc83c8926ca4d5f4-9c23-43c1-a75b-0d1eb9ef49158ba34b31-74c7-438a-851e-2ee46c7ecc47661c7869-0baa-41fb-b6ed-5ed64be6be9f997fb5d8-e494-4d13-9be2-5f1fafdcd599ea02a140-5340-4a8a-b644-8c03a8c1fc5687997146-9b29-4589-9e07-fd37e499fed131c3e5f4-b412-499b-bf75-4217e9dcc8898f29ea54-d678-4c9e-98be-7512992eaa0b33587af2-1c8e-4992-b3d9-6d69f659e7544483be13-094f-4012-b620-0757af3e624f",
                                                               "b1ec26cc-b489-4d66-bcfc-4024601ed7ed",
                                                               "f9f25c60-e102-4196-a397-120d39bcf55687c3d27b-96e5-4f61-b3d4-01fc5b40cd869e54446a-89b8-443b-bc6b-3118c9ce615cb65d0076-df71-4174-b6b2-2135ee90d670",
                                                               new Date(1559313339990L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559313340180L),
                                                             "549a2804-ca62-4308-8972-4c3343761b6c", -36,
                                                             "b15b14cf-b4a9-48cd-9d01-fb564d789011",
                                                             "8b7feb7a-cdea-48b3-b3c8-a83d2218d45b",
                                                             "ba0687b1-d67a-45e7-8096-a9d9f797fc67",
                                                             "47813a54-629e-4733-98e2-3add8c9f7dcb",
                                                             new Date(1559313345097L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559313340180L),
                                                             "549a2804-ca62-4308-8972-4c3343761b6c", -36,
                                                             "b15b14cf-b4a9-48cd-9d01-fb564d789011",
                                                             "8b7feb7a-cdea-48b3-b3c8-a83d2218d45b",
                                                             "ba0687b1-d67a-45e7-8096-a9d9f797fc67",
                                                             "47813a54-629e-4733-98e2-3add8c9f7dcb",
                                                             new Date(1559313345097L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559313341081L),
                                                             "c811f896-d04f-470a-b8a1-9e89070087e1", -84,
                                                             "944b1c83-dede-49d1-a82d-fdfff28be7f4",
                                                             "730b8497-6662-42d5-b405-6468b08d8652",
                                                             "23d9044a-3f59-41f3-af55-d9b757663bdc",
                                                             "5aea6e8f-b8f3-429d-a48c-335cd54b25a2",
                                                             new Date(1559313349016L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
