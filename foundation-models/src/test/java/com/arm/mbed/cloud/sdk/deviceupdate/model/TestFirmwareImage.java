// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559745298353L),
                                                             "d65644ad-5193-4fcb-ac98-f998387d5540", 68,
                                                             "9cf04915-962c-4477-abbd-90feb4f6158d",
                                                             "d3beeb5e-bd99-4f72-ba85-d4306d50a80c",
                                                             "cbb06e79-c745-4b90-ab60-b015f449a02e",
                                                             "a4d11b51-52b2-4467-b4c6-6c07f38b40d3",
                                                             new Date(1559745298895L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559745303238L),
                                                             "8f11f914-a920-46a5-aaed-4c22992ddcf1", -33,
                                                             "97bc2d48-fb37-4f06-9f67-259627bc1253",
                                                             "b6aefa89-bcfe-4638-af5d-50c0b4ec03e7",
                                                             "85822116-3d1d-46e6-901f-5cb7f944e61e",
                                                             "2ab2cafb-c854-48f5-9303-25585a86f4b3",
                                                             new Date(1559745296630L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559745303238L),
                                                             "8f11f914-a920-46a5-aaed-4c22992ddcf1", -33,
                                                             "97bc2d48-fb37-4f06-9f67-259627bc1253",
                                                             "b6aefa89-bcfe-4638-af5d-50c0b4ec03e7",
                                                             "85822116-3d1d-46e6-901f-5cb7f944e61e",
                                                             "2ab2cafb-c854-48f5-9303-25585a86f4b3",
                                                             new Date(1559745296630L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559745301703L),
                                                        "ca2eac34-5e8a-4855-b058-7abe6cde6537", -46,
                                                        "1b077e10-d608-4f8f-9c03-25e62c660ad5",
                                                        "46045db9-5314-4dee-9cd8-c6aa4aa5d665",
                                                        "056075be-5ce1-42a0-a170-6d6fc26d33bd",
                                                        "ffa05a4c-2bb4-4910-856b-0f5e609e3251",
                                                        new Date(1559745297946L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559745299479L),
                                                               "1aa95440-88e8-4217-a074-a41553304a59", 85,
                                                               "a2f01401-3b09-44d1-91c7-e130379ac71a",
                                                               "c7bf78c6-c3d8-4bb4-9b01-fc4605c70fec9e9beb93-2f85-42cc-92f4-a4665d96833ac41fb96b-5364-4df1-aec5-bc76181f857158af171b-72d0-4416-83db-9e64b16afe0aa386d663-4f80-416c-85ea-4d71241cd56aef469539-ab40-4bba-a2c8-2036dca5c2b65f67055e-2da2-4faa-8413-f53df6ef362f221493ee-daef-447c-a16e-5fdab50cd8cb8822925c-f923-47dd-94fd-430cea2b8bc13e8606b9-3e92-4c8d-9724-f6b22e45a825b1d62abd-e1a8-4e2c-89b9-2258f20d4ec4907b8967-e4d6-46c4-9313-7b37550bcb1de7135688-dd7b-4c24-8c7b-2d79046a2bc6ea6648e1-6568-481e-a21b-672adeabaea74f66cd3f-5e11-48f3-81f0-e05dc7a2d053386d11bd-7b95-40a2-b52e-91d14d88efc4a52d5d21-e478-4e1f-a2db-d626684e161077b1c292-d82b-40af-ae16-bdc2718c352e6d441107-e4be-4299-9557-ece0806111f14c02d21d-c89f-408b-935e-c499f4214b20eba12cc6-ca20-43d4-bf8f-3c6c9b46c1818f983129-3442-471f-b736-4a4b135a49eaf83e03af-98eb-4b71-98f0-3c849b6cee6cb5a29f63-229c-440f-a77b-e338ce2b350fc14b00fb-8901-4722-befb-d34052d9e5014d1484b3-425e-4531-9136-04bb31aa6f0f84291b43-97a3-4b73-a1d4-d4a9b75bcacb74291dff-17b3-4e0e-a23e-a1f01a616c9212133b93-e535-46e1-9c26-1d99a21762baea779836-c549-48b7-85ff-4d94d54939161f41749e-b5d3-42df-9856-02817cc9bd0fb2032992-80dd-4fa4-8335-e052c847857defce5dc8-5744-4eb3-86a2-4cf02ae3176357d8697a-5248-400f-af23-97f9a4557ef7e7e31046-cb16-4654-932d-14484fed48fbcd455a09-20ed-40be-9ad6-d6422861bba6b401f59a-0c2e-43d8-8f9b-35f29b676df1af8d5e83-6e3f-440c-b0c1-4d386b06ae755f878694-1614-4a0f-9ae1-f38f90edb5a9c78b94f7-7f8f-42ad-91b0-20ecb733cfe8c4a21b4a-faff-48ae-a9e9-f7763ed003140081d486-90da-4088-9bec-2c880678630338b508ad-97af-4529-bdcd-317a54424f558f57d891-16c1-43b3-82e4-a9785012deee5b0b8abd-e58b-4134-9c82-f012d3e0f743c363a4ad-5ba0-42f0-8610-75f7523c1914e2eb7ed0-ce30-450d-b8a9-7bad0a89a7778291c439-fd79-4136-8064-d2032036d1b34adb1898-c2cc-429d-9c2e-6b16ca332c08f091d77f-a9de-4681-89b2-695c6edb28088f85be72-58cb-4ec9-9546-414b6a5091055e291969-f345-41e8-ab58-e6140684addfc779d9d5-473b-40a8-88c5-8cc13a4d1ea3ace92d2f-c271-4c81-8ec1-38b869ae301ce9407358-08cf-4795-8d89-9b9529976b75b8cd5f72-e28e-40fa-8d82-a45f75fa6677",
                                                               "161a60e4-9cb9-441a-a5d9-dcb8f51cb72e",
                                                               "118a4ed9-fd0e-4501-b95b-d5e8640b3470397f352a-851b-4730-9955-4c6a2c43c1d2c621e961-5fb5-47ef-a08c-2a4c91ada08f5d17890a-5154-46d4-8bc8-34a5d361266b",
                                                               new Date(1559745294068L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559745295572L),
                                                             "b4fd9052-b1c9-47f3-ac9c-1eb8a36ca941", 23,
                                                             "1cf21018-d30e-4333-8869-2d45978f31e4",
                                                             "a98428d9-190e-4f75-bee1-31da0345a704",
                                                             "eb25e1d6-b240-49d6-84b6-994fe503ae34",
                                                             "0fdd3350-e48f-4695-b8e5-41a2b8db59d8",
                                                             new Date(1559745294773L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559745295572L),
                                                             "b4fd9052-b1c9-47f3-ac9c-1eb8a36ca941", 23,
                                                             "1cf21018-d30e-4333-8869-2d45978f31e4",
                                                             "a98428d9-190e-4f75-bee1-31da0345a704",
                                                             "eb25e1d6-b240-49d6-84b6-994fe503ae34",
                                                             "0fdd3350-e48f-4695-b8e5-41a2b8db59d8",
                                                             new Date(1559745294773L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559745295287L),
                                                             "f961d263-4181-4ee3-a2e9-2beab3ea8540", 18,
                                                             "1d837bcf-818f-4509-af9a-5d3e11da40bd",
                                                             "6d86f02a-d3d7-4790-a5f7-dae1196ae8c2",
                                                             "2d933b08-ec1b-412c-a411-776775178efb",
                                                             "dccde0b3-a37c-4b06-ac14-b3ffc65f055a",
                                                             new Date(1559745294051L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
