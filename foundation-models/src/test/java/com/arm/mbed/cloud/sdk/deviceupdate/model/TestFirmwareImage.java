// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559758612468L),
                                                             "633caba5-daee-4ccb-9156-d3990dea79e4", -89,
                                                             "b67e46bf-7ab6-4573-92c1-d1c13f91f0ec",
                                                             "5d299a85-7ca6-4750-91ae-f62963b5c924",
                                                             "269d351e-14b9-4d6c-8a23-aab66cbde5d7",
                                                             "842fb19a-5f9c-4372-8c1a-a0dfc3df704f",
                                                             new Date(1559758610270L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559758607123L),
                                                             "bbeb2bb1-45f8-4bce-90c4-a1d33630d7c1", 47,
                                                             "cd4333ca-7568-48a0-8dce-9435dce88bb1",
                                                             "b4fc88b4-ddf9-4629-a496-6d6186b63232",
                                                             "38bda6fa-0ef7-4b4d-9a71-ae7d6e3b8697",
                                                             "c61eea9c-ee9e-42b2-9f57-b56a51f9c088",
                                                             new Date(1559758604642L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559758607123L),
                                                             "bbeb2bb1-45f8-4bce-90c4-a1d33630d7c1", 47,
                                                             "cd4333ca-7568-48a0-8dce-9435dce88bb1",
                                                             "b4fc88b4-ddf9-4629-a496-6d6186b63232",
                                                             "38bda6fa-0ef7-4b4d-9a71-ae7d6e3b8697",
                                                             "c61eea9c-ee9e-42b2-9f57-b56a51f9c088",
                                                             new Date(1559758604642L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559758605040L),
                                                        "8e26c0b1-e804-4cd7-ba2a-1e2d8c63daf4", 51,
                                                        "2d53d653-0816-48d3-9548-395a4d41850b",
                                                        "2550096b-0ba9-4315-8e1a-2b85d6241acb",
                                                        "30da6db7-30c7-474f-af9b-9532979c6ae4",
                                                        "2a9d717a-98f7-4f8a-bd30-b19caa47b849",
                                                        new Date(1559758608894L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559758612045L),
                                                               "78c281aa-b1a4-40c5-9dc4-a99dc8a33b48", 52,
                                                               "5f0ea494-8398-419f-a082-afe332c6fe69",
                                                               "ff0c3f2d-bec0-41f9-81fd-3ea16c5b4897a94e65eb-f238-4514-bd26-ae2d316341d925ef117c-ab6f-4089-a430-c02b1c610310e4e9a4df-e0a2-4d42-929c-a2c2d665aba899d8d74d-9fe4-4916-90f7-57a8bef0e58d0c4a5780-8201-4453-8b24-acff13ff25a6706201d0-1413-434c-a14b-9745fd8d8d562875c8bc-22d3-4d1d-aa9d-6f5e3895842962529763-9f25-4c55-bea5-15a65d819d37a406e499-6550-40de-b860-2f965b373ed0fd09ee9c-ec0e-4b11-9c93-3891162c001eccc94818-6c6e-40ae-8fb1-d02d619be64ae5fb9d69-2640-48b1-9325-e931664eb5e73b88bfac-ebf6-49b5-b991-760cb70bfd6ed5918d17-a397-4cfd-90bd-045bdf234d2c621d445f-f6d6-4c09-9e75-bc03e4790075d5cd87f0-aa88-4b14-9a3b-b778581edd18c1e4a54a-26ca-4c82-8309-77d3e75d051425a6f1cb-fe6c-4956-a551-75fb550f15d46939fd45-0175-4d6b-8909-a71e18a25a6cef1dd12e-1606-4e04-85ac-4de585c8e3ebc032f9ca-5abe-4533-9173-13cc8ad66c0893010f32-8524-4dbb-aa1c-33fabba1a34f90711176-431a-43e0-8929-ab0aec9cd4adb90aa566-a878-41ca-8a19-125dac35254f677ff0fb-6aeb-4e99-9fd6-f5e493e30dbd9c099093-dc34-49c5-8895-343953b3deda290beb36-56aa-4b7f-a655-178a2078092b66c2abdd-4e98-4b24-82c4-3c37a896846c3b3b0ca5-b9ab-4cfe-abc3-0a41f29cb54495822a49-94c8-4bd7-94f7-64e5fabd8fa00e4eb276-e8e0-4c97-a9e1-7e864e8dee49bded83a3-5746-45c3-909d-a5c6164d7c3c387d998e-5e68-41ad-8f05-7a815e2fac7667837231-a084-470c-aca4-ae88034407b4cfa22aae-1a4f-4059-85dc-0f0beaf98284117efcf2-08c0-4f66-ac00-e44b5dc0ace8462cce42-1f4f-46c2-b374-6ca52369cc5c1a1fd111-2a48-4f3b-8dea-55fb5f7aefebbfded472-83cb-4f24-9853-625996b06c613e44e707-04b2-41fd-8225-c32cf7235189bd98891d-7ac5-4022-9cdd-a12edf20e4de9cb34a85-f395-42c1-b262-7e81bef34a4109b2a8f4-5246-4b47-aa7d-75e7e85bfc4cd0bd0735-32a7-4cf9-b343-62cb3746ae9c6e6181b7-3ce1-49b3-9a58-fb4415c9b008ff576967-e8a5-4ffe-9aa8-ce152bc7af646e4f73b6-2d48-4bb6-a0f7-b60e0ad7beec753444c1-6eed-4a41-b11e-594d7bdfb1ac77fc301a-f8c7-4b0f-8a87-258fdb2dc5f0178a2045-505a-4bef-8150-18c06620b884d01fc7a3-a518-4d11-89c8-4ab06d71f84e4c5a00cb-8a74-4560-a48c-1f9ba4e8a850f713fd29-b1d0-47c8-bbff-4484ad02b884c8afaf3c-1e8e-4ac0-8884-410d37b6246dea385833-7762-4f65-b331-68d612fb3a06",
                                                               "bab4291f-9073-47c6-b72f-ea8da9dd7cba",
                                                               "4c73aaf7-b532-4584-9271-9985d1baee3455eab637-be2e-4de4-b998-e45810a5c033c2792b0c-315a-4cb8-813e-0688674154c705e7a4df-eab9-4ec2-8c73-7978c99d535b",
                                                               new Date(1559758611088L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559758605799L),
                                                             "a569aaf2-bfa4-4a12-99cd-6f6fb17af533", 59,
                                                             "db10804d-5ccd-4f20-9c92-b93d09dd7459",
                                                             "09b31910-4b16-4d87-b776-e01968978d96",
                                                             "7ef8eb06-1c2f-474d-95a4-14590a318cc2",
                                                             "a4c71f46-1e85-459c-8f9f-73a1610f1971",
                                                             new Date(1559758608162L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559758605799L),
                                                             "a569aaf2-bfa4-4a12-99cd-6f6fb17af533", 59,
                                                             "db10804d-5ccd-4f20-9c92-b93d09dd7459",
                                                             "09b31910-4b16-4d87-b776-e01968978d96",
                                                             "7ef8eb06-1c2f-474d-95a4-14590a318cc2",
                                                             "a4c71f46-1e85-459c-8f9f-73a1610f1971",
                                                             new Date(1559758608162L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559758609109L),
                                                             "cdd6ab93-d2f8-4b03-a4ab-05bd2f960872", -91,
                                                             "c9e94d06-7ec9-4794-b514-3ac27e96ec56",
                                                             "e195e0e9-e97b-42b5-8df9-4a0fc600b8e7",
                                                             "01713105-11a9-47e8-9085-239789aef83b",
                                                             "d44a299b-4cec-488a-98b3-0f1af481a4cf",
                                                             new Date(1559758610174L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
