// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559752147878L),
                                                             "10e6cc6e-d6e9-4154-b51c-dcb34265b0ea", -113,
                                                             "3c001046-8c4a-4a19-b966-de2b53f3b60c",
                                                             "5a0bd21e-031e-4f93-862e-77d2050af51e",
                                                             "f22d2573-5297-4213-b885-f53743713050",
                                                             "5b9683df-adde-42dd-86c1-e52a6f70b0a4",
                                                             new Date(1559752152119L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559752148232L),
                                                             "1862ea1a-328c-44bf-9a54-3b4fefec5223", -7,
                                                             "b29046d5-b45f-4b63-9f79-fe976d1d692a",
                                                             "fe7f640d-e1f0-4dc5-8f6f-8528bff83a64",
                                                             "8abda0d0-7a0b-4356-9f9e-60f44c1588d1",
                                                             "244cd65d-f05e-4cd8-bede-326600435f7e",
                                                             new Date(1559752150064L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559752148232L),
                                                             "1862ea1a-328c-44bf-9a54-3b4fefec5223", -7,
                                                             "b29046d5-b45f-4b63-9f79-fe976d1d692a",
                                                             "fe7f640d-e1f0-4dc5-8f6f-8528bff83a64",
                                                             "8abda0d0-7a0b-4356-9f9e-60f44c1588d1",
                                                             "244cd65d-f05e-4cd8-bede-326600435f7e",
                                                             new Date(1559752150064L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559752148858L),
                                                        "4cb6b51b-3bf7-4252-9a00-7cf9fabbd1aa", 120,
                                                        "d51d74df-5f68-4e3e-a341-3a66fcb796c7",
                                                        "bb61fd8a-f17f-4500-bd26-961c00b2209b",
                                                        "5a05d8ed-5446-4b68-9e9b-8ea9d7bff1e0",
                                                        "b90d5abe-3847-42eb-a0c9-bdd150a753d7",
                                                        new Date(1559752144829L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559752144838L),
                                                               "3e23c3c2-3e5b-482f-8cfa-7cc109dd0421", 35,
                                                               "cddd77d2-8d4c-42fb-96a4-460cf460c612",
                                                               "f52a640c-43f5-46dd-bc45-de307900a036a07b822e-e061-423b-b22d-8b0a210bd5527dffad64-5ad1-4527-a860-0a44fe6c4f064860b2f2-759a-4bef-a0bf-409985e47fbd29acfe5e-957c-4933-b84c-b728049756c6a549dcfa-43bf-42a5-a3a4-4a81941bdd55e569413c-3c96-4f95-9749-0b68ea81f3b678d72977-debb-4c22-ae0e-8e2ae1a437ae0000500c-ef51-413e-acbf-537c47fc9adcb6378e30-134f-4f1f-85a7-ed22faead6e74bd005b0-839a-400b-9c6d-dca28b6eb78cd13617c0-6ed4-42a8-8e19-80f6be53f55e89e41056-8ef5-4205-8bb3-a35c1e6224bbb93978f3-eed4-437a-a628-e0250e70e6d6164735ac-5513-454e-ad0a-5109a2da6da0ac4672ab-7cfb-4b97-b40a-85968374cceecb0f06a9-42df-4fba-9a02-a810a0779c5c1e99e0d7-c676-4726-ac5a-51555c69422f213e757f-6f98-4d48-8393-05916d1cee223ebd83cc-7d10-4bfd-a608-34f8dda94464a0a34520-75e8-4c00-a2b8-3f44dc075b45dea6967e-88fc-4d1b-b96a-85cb54136800ecae7341-477d-4256-85bd-1c39a2c360736f649099-33d4-425d-830b-f9f7484f902fad10241a-3fb2-4773-8643-a933768d09d131de234b-292f-4462-ba7b-0dddfb15b9c5b11a8a1d-e5d0-49d9-866f-d3de46ecdd25148c864d-da86-4e5c-b39b-b3a32aa4edac71af522c-abe0-40c1-9129-64048ac883661f4df64b-13fd-4deb-a4d5-f2bc8037fb14e49b0f1a-1b3d-4747-97d1-f3042ee439df6325e707-69da-4e13-911c-266f7339b582b27286c2-28c7-4b4a-9394-670b3794ddb7e3aaccbc-c82e-45fc-83f7-51dd740be069ff1e470c-5996-4216-9b24-c9f2fdbc3a317cf7a2e1-3b3d-4d3f-936e-33c66ebeac991fc03c83-67c0-44b6-a228-8c89fee3c31e2fb0b6dd-723e-4038-81d5-a4565c91c4487fa57d27-ffda-4cd3-896d-c1b97654e908f6b59ca1-008a-43ae-b08e-ac13261914d67440a0ba-3840-4b36-bfba-311360fb1219ce622355-7781-4bca-b0d4-b90638a6c09646330110-afed-41ee-9bc6-0e71f47a968fc5d0908e-9bdc-4567-bc3f-0d12db4b2f83fd45eb86-8683-4208-86cb-cf8ed87c83fdb1634912-dbf9-4a77-a848-aec732ce102902d7984a-db7b-450c-8301-ce439267224d52814865-2ad2-4076-9484-dea385b2b8342fd81b4d-eb01-4eb4-ae1a-8c5af83b58f8003c7d27-bdec-478c-b45d-18fde0be7b1abd28d96a-cdbd-480d-9dbf-a36f0b0c1a5f15e56658-5ce1-470d-804a-4209a292f7b165db5c5f-f4da-407c-8974-4f9256d05d0b89f4dc1b-41ac-45cd-87e3-446ceef463eb3412220b-6c67-411f-8df5-3b6c884827746a7c1ec7-1e9b-4f45-b8a2-2c191fdd13bb",
                                                               "0dea0955-7f24-4724-9cd5-1afc400145a0",
                                                               "f73816ee-e991-447b-952d-7553e531a6be295bfa10-0d84-458a-adef-e860c09084703b568b10-6d16-48f2-9bfa-dbea78e1694ccdf083ba-6c29-44f8-9b2f-f40a2b1460e9",
                                                               new Date(1559752151418L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559752153321L),
                                                             "d1cdce3e-3cc6-49d3-8b9e-1e45361b648c", 23,
                                                             "85d5cb90-10fe-48f6-813b-a7424310d045",
                                                             "eb1aeac8-a86d-4817-b30b-9a9f7dec97ce",
                                                             "674f1dd3-39da-4f52-ae48-7e76a73fe2f3",
                                                             "a772f407-e76a-4eba-899c-ebd3d322f2a0",
                                                             new Date(1559752145230L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559752153321L),
                                                             "d1cdce3e-3cc6-49d3-8b9e-1e45361b648c", 23,
                                                             "85d5cb90-10fe-48f6-813b-a7424310d045",
                                                             "eb1aeac8-a86d-4817-b30b-9a9f7dec97ce",
                                                             "674f1dd3-39da-4f52-ae48-7e76a73fe2f3",
                                                             "a772f407-e76a-4eba-899c-ebd3d322f2a0",
                                                             new Date(1559752145230L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559752145315L),
                                                             "73ef0e55-5999-4b97-965e-b94a59f550fe", -26,
                                                             "48e12f5d-b114-4697-a763-d77331f82d26",
                                                             "19c9d7a8-f4bd-4747-bc79-bbb7e4d402ce",
                                                             "ac52d86d-328e-4e07-a31e-9761b7c062c7",
                                                             "b868119d-c7f5-43ce-aaa3-a8e4f4ebe872",
                                                             new Date(1559752143767L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
