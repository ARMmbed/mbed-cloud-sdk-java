// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559662783978L),
                                                             "84c5c04a-db83-4be3-a685-93dbd6956218", -70,
                                                             "f461ef00-7990-4f78-93e0-8b8ffd3939a2",
                                                             "8c46dbd5-e081-41b2-a36d-b6c38a2bc203",
                                                             "a91d195f-1302-4c09-ab92-d82035dfc8fb",
                                                             "0f876d61-2e5c-4dbd-85cf-5af28e5280fa",
                                                             new Date(1559662780328L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559662780258L),
                                                             "607e10fc-5eff-4565-956c-4c7d7b74afb2", 115,
                                                             "726807a4-0ebd-4a23-a985-91e5112210c4",
                                                             "8a274ed7-bbab-43b4-8e4c-fc4eae0c0a9d",
                                                             "8a10fc36-16a2-4119-b9db-da72931b5532",
                                                             "7c9a6422-f151-4aa5-a1a5-3c343a0d237f",
                                                             new Date(1559662778233L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559662780258L),
                                                             "607e10fc-5eff-4565-956c-4c7d7b74afb2", 115,
                                                             "726807a4-0ebd-4a23-a985-91e5112210c4",
                                                             "8a274ed7-bbab-43b4-8e4c-fc4eae0c0a9d",
                                                             "8a10fc36-16a2-4119-b9db-da72931b5532",
                                                             "7c9a6422-f151-4aa5-a1a5-3c343a0d237f",
                                                             new Date(1559662778233L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559662785723L),
                                                        "27c0fa93-8078-40c1-93c6-9708eb6a60a4", -108,
                                                        "d65ea800-be27-423c-b761-80f7763b7650",
                                                        "18e93314-4b75-4027-9a47-b57f7edab4b3",
                                                        "4d4d77de-c59c-4cc2-b00d-c2efe39d9fdb",
                                                        "f209a976-b1ad-4536-a6f7-5ef5c5d1e3b5",
                                                        new Date(1559662783053L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559662784296L),
                                                               "4179534d-c1b0-4506-9ad0-a0f7058adb94", 75,
                                                               "42878eb7-3bf2-46b1-a735-5c05b35d6c1f",
                                                               "8e7094fb-bfe6-490b-a402-0448af845a1d4bf80b20-6408-4c95-a86e-56313df5d889e545a5d2-c9a9-4680-92fa-128bb5d3d302b2a648d3-e2e0-426f-852c-5ca778f591422633bdec-d46c-4c70-9df7-75321e7397b6d2b8fff2-e7ce-4c29-bc11-1c87cd2c3367927342c0-67d5-4a66-85de-4f6cc73082ce519a6fc0-f3a6-467d-a704-1cd4461f8c82e2cf3d91-753a-48cd-8fcf-f38c1829492df50cb5a0-3c95-4e12-bfcb-90c8b9f2f6f3279434e0-59bd-4447-82c0-16d6d1f895f8dc32cfe6-34b7-4243-803c-dc35e803444d0ab25968-3014-4bae-b710-495936af993b9f299130-5701-4b38-a9e4-800a822e0bd4a848f0d3-f4ed-4086-9690-55e99c0767fde374dd0c-d637-4fef-a020-0cc99faba440dc54ca5f-c8c9-4c2b-890e-57ead62854eb4b4e5864-6eb4-4c38-87dd-0305a4505827764f6101-9a77-4a31-bedf-bdbefeb074132218a32f-731d-4b99-ad35-1f22d4b80745cefb9ee9-6c67-47a4-8688-6bc7bdbf3607517b8492-293f-4e90-8236-fd9baaae86a9dec04b46-5dff-4b9e-bbcd-6eabf727ffc0a2f6154a-c85d-4b79-b6dd-269e59e583379a24d684-cda8-4639-9527-8ed052eea3149c135f1f-3dfb-4d41-98f1-e795787fe99cfa35ae71-a059-4140-a1bf-889d971d81cd56a5466f-325c-4024-9296-00713469bda42dd59fed-78c4-4ed4-9b08-89504bd9310fce8d6122-eceb-46eb-987c-527d295be71dfd4beac4-7e49-45d7-ab57-8ca4ab245cdb7f72724c-ddc4-4868-b74c-3f943462bd5575515e77-e340-46d9-912d-56cce908fdf3bb591dfb-e01d-4e4d-a59c-1833bde504b84b148329-8277-404e-8f9c-4576f9798549d7ad4142-a405-4042-862c-25af1e2a96971dabbed9-9e07-4205-b832-e5b07041b2729e6e351d-c522-4f25-8028-f750a8cc1632b28a5832-7a93-4a62-910e-aa225a2552091f96e9c4-294b-4da3-8fec-7d91177e055f185d4605-f2d8-4b98-a0d8-b020b60890d2f35dea8e-7344-46d9-8926-b2cff2accfd32e434541-5831-45c0-9f10-da8964b8bfae80a4b178-3212-428f-a384-7f42dac284d626467531-1e9e-49fd-9cf7-b78dd18ec0e576f68502-37fe-4880-b0eb-f1eecac5221d5d4bffef-3a8c-4559-b619-2116da8c9762215812c8-c7b1-4673-ad02-8559684e520920d4ea6e-f21e-42e5-9280-d2ff06e1479bf1523938-0497-4988-8813-27d72e31c1b396249267-391c-4e4c-8866-819557e4876c96579d6f-1e8d-4f5d-b59a-8579980dc8290e9479ae-be03-4ac4-98ea-c814f13e6ee71a987fe0-972f-4fab-aab7-567c38d39dd02dc1fd3d-0494-4289-97eb-3fc1826fc35890998f21-69b1-4685-bf6c-e697343840ab",
                                                               "4c2cf409-b5e0-4fbb-a1aa-a40d33046251",
                                                               "37429ba5-0fa2-4e9c-a159-c7f401ac828702d8a553-9907-40ad-b549-676ebf35906e6ceaa888-1dff-481c-918a-7f0eb7aaec7874fbae89-83ef-4f5f-b4a0-7ef8b222d658",
                                                               new Date(1559662779630L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559662782323L),
                                                             "32dab0ec-c7f1-4b4c-9cf0-ad40e5fc9477", -122,
                                                             "c5d12d36-3afe-4b2a-a230-a9626b390c3a",
                                                             "b62eb883-56f5-426f-9979-189bc20c833f",
                                                             "1a7aeea1-c082-4553-be1f-a999aaffcc85",
                                                             "83c0880b-8ef5-4bc7-836f-b258ca4c9dbe",
                                                             new Date(1559662785223L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559662782323L),
                                                             "32dab0ec-c7f1-4b4c-9cf0-ad40e5fc9477", -122,
                                                             "c5d12d36-3afe-4b2a-a230-a9626b390c3a",
                                                             "b62eb883-56f5-426f-9979-189bc20c833f",
                                                             "1a7aeea1-c082-4553-be1f-a999aaffcc85",
                                                             "83c0880b-8ef5-4bc7-836f-b258ca4c9dbe",
                                                             new Date(1559662785223L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559662782057L),
                                                             "17aad5a0-0ac3-426f-93ff-9c026843373c", -46,
                                                             "44c1b363-e71e-4305-87b9-070c6681b726",
                                                             "121708bb-d2fb-4923-8abe-cb459f9cf091",
                                                             "8dccdac9-bdaf-4944-b45b-dcfb366158e3",
                                                             "2eb88573-6782-4fbf-94ba-8cdbbd3d390e",
                                                             new Date(1559662781804L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
