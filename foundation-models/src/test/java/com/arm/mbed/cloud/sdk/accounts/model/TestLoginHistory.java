// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559655029006L),
                                                          "a4997460-7ae9-45a8-9b76-88d55b760a1e", true,
                                                          "f13d2a45-0121-4005-95e5-798cd127310c");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559655032184L),
                                                          "15be793d-8f99-469e-ab6e-95539d352872", true,
                                                          "71c8691a-d7bf-4b12-b4e0-cfc1e09512a5");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559655032184L),
                                                          "15be793d-8f99-469e-ab6e-95539d352872", true,
                                                          "71c8691a-d7bf-4b12-b4e0-cfc1e09512a5");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559655027829L), "d5e0a68f-6096-4a90-9469-751dec3e6bf7",
                                                     false, "5ec256c3-8a13-46a9-a86a-4941fb889065");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559655028129L),
                                                          "ecfa2668-b572-47ba-92a7-97cbb4b39961", true,
                                                          "6c7d3d28-4c46-4139-96fb-5bd1d478f61d");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559655028129L),
                                                          "ecfa2668-b572-47ba-92a7-97cbb4b39961", true,
                                                          "6c7d3d28-4c46-4139-96fb-5bd1d478f61d");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559655033820L),
                                                          "7e6ea169-8a25-4424-8690-ec02eee2c0e2", true,
                                                          "9b858b5c-b80a-43c8-90e9-9c67f299618a");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
