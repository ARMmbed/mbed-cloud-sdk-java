// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225901354L),
                                                          "5e4f2d6a-d46d-4321-9688-c7bcc67920af", false,
                                                          "2dca2d83-cd3c-4400-b408-737f7bb4fb15");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225898238L),
                                                          "76319382-4402-472a-b038-96682d5d90a3", true,
                                                          "3178ccc6-39b3-4be7-9a02-12fcaeb7d2c0");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547225898238L),
                                                          "76319382-4402-472a-b038-96682d5d90a3", true,
                                                          "3178ccc6-39b3-4be7-9a02-12fcaeb7d2c0");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1547225904542L), "3e673bf6-f357-4a87-99b5-46d5e40e7629",
                                                     false, "e287e9b5-56f1-4335-bf6e-e7aea45d1b58");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225902662L),
                                                          "4590c999-2fd9-48e5-a971-09cb42ad5615", true,
                                                          "9c9f086b-e626-4f4a-9542-bda7981a17dc");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547225902662L),
                                                          "4590c999-2fd9-48e5-a971-09cb42ad5615", true,
                                                          "9c9f086b-e626-4f4a-9542-bda7981a17dc");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1547225900445L),
                                                          "5cff502d-c6a9-4916-8e40-0dfea518a5c2", true,
                                                          "31e83001-2a17-4563-bdf4-4e6aaa6d0943");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
