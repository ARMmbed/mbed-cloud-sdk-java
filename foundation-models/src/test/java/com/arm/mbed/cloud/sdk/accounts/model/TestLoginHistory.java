// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1547041499077L),
                                                          "b801889a-6c4e-4b0d-a6a7-e867e4b36b3e", true,
                                                          "6d7d158c-2b86-4e4c-9f87-b3e02397c74f");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1547041495359L),
                                                          "9d9755d2-cffc-43ca-8c0e-6d78f05ec36a", false,
                                                          "2269a172-a9ab-430c-9ff3-d3f65128165b");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1547041495359L),
                                                          "9d9755d2-cffc-43ca-8c0e-6d78f05ec36a", false,
                                                          "2269a172-a9ab-430c-9ff3-d3f65128165b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new java.util.Date(1547041496348L),
                                                     "ae70bdd0-8d43-46e6-908d-ed0403889b85", false,
                                                     "bce56b2e-fa7a-4d37-ae48-6be932b61842");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1547041496397L),
                                                          "8ce34a1c-73ca-407f-8afc-0d2dd45ee6ee", true,
                                                          "3ff15c2f-f824-4644-b155-ab95d06e4666");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1547041496397L),
                                                          "8ce34a1c-73ca-407f-8afc-0d2dd45ee6ee", true,
                                                          "3ff15c2f-f824-4644-b155-ab95d06e4666");
            LoginHistory loginhistory3 = new LoginHistory(new java.util.Date(1547041496431L),
                                                          "b34be1dc-6949-4a07-8e89-1acd418aa3cd", true,
                                                          "c7e05602-4d3d-4c9b-92d3-863467663d48");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
