// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1548165445522L),
                                                          "ffbf124a-66a5-4bbb-9766-e4b236a17d80", true,
                                                          "9b3cd16e-2dd7-4cd1-9a2a-11574158cb58");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1548165442912L),
                                                          "978cbaea-e3ac-4850-907d-ef68b636e8bd", true,
                                                          "6ca74467-a869-4e65-9b35-b832ce2e3a5b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1548165442912L),
                                                          "978cbaea-e3ac-4850-907d-ef68b636e8bd", true,
                                                          "6ca74467-a869-4e65-9b35-b832ce2e3a5b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1548165447648L), "47b583f3-7ec7-4d69-816a-31e1f9f009fc",
                                                     false, "c950e8e2-f444-45a6-8ef7-351b1926a438");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1548165443548L),
                                                          "fd61a00b-cc80-48e5-8fbf-f4cb110bd322", true,
                                                          "972bfa79-3584-4808-b52c-62bc2208bc53");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1548165443548L),
                                                          "fd61a00b-cc80-48e5-8fbf-f4cb110bd322", true,
                                                          "972bfa79-3584-4808-b52c-62bc2208bc53");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1548165439447L),
                                                          "0bc80b31-6296-494e-93f0-6937bcc78eb3", true,
                                                          "dbc89711-b386-4bd0-8516-61ca79cfa9a0");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
