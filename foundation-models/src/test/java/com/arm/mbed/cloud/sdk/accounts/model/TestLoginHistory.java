// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559300105694L),
                                                          "a64633ba-a35d-41dc-9358-04e60407b691", false,
                                                          "cf41aab2-0c5f-47cc-b043-0b4262cd3373");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559300106077L),
                                                          "bd8bba43-50d6-4276-93d5-fc6eebfdff50", false,
                                                          "d76d2ab7-20ee-43b4-91ed-36c8c22fd148");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559300106077L),
                                                          "bd8bba43-50d6-4276-93d5-fc6eebfdff50", false,
                                                          "d76d2ab7-20ee-43b4-91ed-36c8c22fd148");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559300100017L), "3fe040a1-86d9-48fd-8f64-8bfad277e44f",
                                                     false, "c76b678b-4cf2-46ae-879b-ecb4f1e163f6");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559300100446L),
                                                          "6a3b4dd8-452b-46e4-9772-beb32fb6f884", false,
                                                          "a1007728-09de-4126-a2da-7faec7855ef9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559300100446L),
                                                          "6a3b4dd8-452b-46e4-9772-beb32fb6f884", false,
                                                          "a1007728-09de-4126-a2da-7faec7855ef9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559300103434L),
                                                          "46ef25d7-01e0-4845-a6c5-79e581f1cc98", false,
                                                          "159c2ef9-d8a6-4f71-bc63-c5b361a448fb");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
