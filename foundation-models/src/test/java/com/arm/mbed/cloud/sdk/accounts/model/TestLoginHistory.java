// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1551867949607L),
                                                          "3afe49fe-3723-4d05-a9b0-e8f9122163ff", true,
                                                          "350ffedf-5f71-4b12-8cfe-77263d0f3f1e");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1551867951065L),
                                                          "1599cc44-cb18-42ac-a10d-3d190f8d7be1", false,
                                                          "5025f2b2-18fa-4d9a-ba74-ed5fbc623992");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1551867951065L),
                                                          "1599cc44-cb18-42ac-a10d-3d190f8d7be1", false,
                                                          "5025f2b2-18fa-4d9a-ba74-ed5fbc623992");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1551867946213L), "af951385-54de-4e80-81c5-56c8a8f981d4",
                                                     true, "1b8cbd25-7e80-4cd0-ab38-fecc5e83a1fd");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1551867951765L),
                                                          "68fb5550-70a4-4a61-8417-40f2370b6727", true,
                                                          "72892759-cee0-449d-969c-6d0a329b1e93");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1551867951765L),
                                                          "68fb5550-70a4-4a61-8417-40f2370b6727", true,
                                                          "72892759-cee0-449d-969c-6d0a329b1e93");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1551867950970L),
                                                          "43fcb5e4-083f-43e9-8acc-e3fdeebf2c34", true,
                                                          "8633a704-8533-4955-ab8f-37dc25a45ee4");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
