// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559288255824L),
                                                          "cfc87a16-d39b-4a4a-b570-84fc6e90c20d", false,
                                                          "f9058a3f-b32e-4939-81e0-47103c270ead");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559288261979L),
                                                          "1ca1cead-9db6-449e-a650-2083e8140644", true,
                                                          "9474e876-180b-422f-a4c3-267983ee029b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559288261979L),
                                                          "1ca1cead-9db6-449e-a650-2083e8140644", true,
                                                          "9474e876-180b-422f-a4c3-267983ee029b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559288262143L), "01c2948a-f02f-40fd-92c1-78b98030c67c",
                                                     true, "ca37d5b7-e8d1-4f51-ad59-d57772240e65");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559288262515L),
                                                          "50c7e291-4161-4419-a4d1-f578d99b820d", false,
                                                          "a405f565-2c26-4f9f-94f9-1082003be754");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559288262515L),
                                                          "50c7e291-4161-4419-a4d1-f578d99b820d", false,
                                                          "a405f565-2c26-4f9f-94f9-1082003be754");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559288263388L),
                                                          "58eff18f-d085-490a-8a93-88a5e3412971", false,
                                                          "2c473839-6d3b-4c40-9e69-53b89efdbc7c");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
