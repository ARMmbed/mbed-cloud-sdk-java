// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559746947232L),
                                                          "dfde211b-44cf-464c-90b6-48cf79ade8b7", true,
                                                          "0d287174-f6fb-4c4e-89f1-3a66babf9c83");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559746945764L),
                                                          "4eebade3-ae21-4190-b834-9052cd8a5e34", true,
                                                          "37a04c53-2ab2-4f1f-9d1f-c52a67c6a9f2");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559746945764L),
                                                          "4eebade3-ae21-4190-b834-9052cd8a5e34", true,
                                                          "37a04c53-2ab2-4f1f-9d1f-c52a67c6a9f2");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559746953546L), "32973e32-e797-4006-97d9-de4a892fd07b",
                                                     false, "6d3b547d-403b-4b84-b32a-ec6b5718a3c1");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559746949227L),
                                                          "351806f3-65ba-401f-8257-aa02a66cf94c", false,
                                                          "c7fccfeb-bc1b-4fd6-a643-d4a380b08880");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559746949227L),
                                                          "351806f3-65ba-401f-8257-aa02a66cf94c", false,
                                                          "c7fccfeb-bc1b-4fd6-a643-d4a380b08880");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559746946458L),
                                                          "6731eb64-c3ac-4679-96ba-9557899f44a1", false,
                                                          "358af052-5c7d-4caf-8235-7a819c1869a7");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
