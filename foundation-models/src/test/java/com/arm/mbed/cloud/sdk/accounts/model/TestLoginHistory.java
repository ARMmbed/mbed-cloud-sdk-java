// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559747928621L),
                                                          "a32a0310-75d5-4091-8601-8e43e16635d4", false,
                                                          "bf1dc101-ec2b-43fa-9817-97448608333f");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559747930445L),
                                                          "dfc70550-f7f3-4829-85b9-9253652d8e7d", true,
                                                          "cf33fbee-985e-40e6-bc3d-fb9f48ef4fa6");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559747930445L),
                                                          "dfc70550-f7f3-4829-85b9-9253652d8e7d", true,
                                                          "cf33fbee-985e-40e6-bc3d-fb9f48ef4fa6");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559747927978L), "b28f77f2-4779-472c-8228-a46f39988580",
                                                     true, "e374ed5b-9ad0-4453-8c1b-1108c6d5d9be");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559747932162L),
                                                          "359eab9a-bd74-4c1c-8d65-d13075104167", false,
                                                          "c46641b4-214b-4b24-8b61-cf66f3f48300");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559747932162L),
                                                          "359eab9a-bd74-4c1c-8d65-d13075104167", false,
                                                          "c46641b4-214b-4b24-8b61-cf66f3f48300");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559747934281L),
                                                          "d3d02df4-83cd-4fa5-903a-514c992b0f5d", false,
                                                          "f627c473-761e-4f28-97dd-b99950814eeb");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
