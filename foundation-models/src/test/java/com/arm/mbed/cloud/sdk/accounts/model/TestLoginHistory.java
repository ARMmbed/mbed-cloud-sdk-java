// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546622513540L),
                                                          "92dbc634-6d12-4c22-9b15-7f74741b8788", false,
                                                          "6b32d58a-9217-40a1-8c0c-41c3fbe3dab0");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546622516251L),
                                                          "841053a4-bf57-48e7-8ac5-195bb7746ff9", true,
                                                          "4796c296-ada6-4904-803e-6b3307665170");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1546622516251L),
                                                          "841053a4-bf57-48e7-8ac5-195bb7746ff9", true,
                                                          "4796c296-ada6-4904-803e-6b3307665170");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new java.util.Date(1546622509482L),
                                                     "ab12c10e-6656-445e-852c-512ea3727b9b", true,
                                                     "5ede8be6-71ce-45af-beab-29130a56ea11");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546622511529L),
                                                          "971f7714-e638-4420-831f-64e9de1bd0e3", true,
                                                          "e216c089-ef67-4e01-a9f1-9fc4e4bb97cf");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1546622511529L),
                                                          "971f7714-e638-4420-831f-64e9de1bd0e3", true,
                                                          "e216c089-ef67-4e01-a9f1-9fc4e4bb97cf");
            LoginHistory loginhistory3 = new LoginHistory(new java.util.Date(1546622513138L),
                                                          "3e47d9c0-b36d-4904-b8f7-1dd93d081f56", true,
                                                          "f3628d56-8df1-4766-b30a-c005dfdb3fdf");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
