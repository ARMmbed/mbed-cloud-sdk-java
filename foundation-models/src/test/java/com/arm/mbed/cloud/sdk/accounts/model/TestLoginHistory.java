// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096041343L),
                                                          "0815cbe3-35d4-4f56-b824-9e5ab3dd9f45", true,
                                                          "25f4c87c-94c7-49d7-9fe1-468d1a524d4a");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096039191L),
                                                          "ac30bbd2-c52c-4b03-873b-a4511b2c2206", true,
                                                          "7ca8b402-fcdc-43c4-9b94-cdb0d11ca823");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558096039191L),
                                                          "ac30bbd2-c52c-4b03-873b-a4511b2c2206", true,
                                                          "7ca8b402-fcdc-43c4-9b94-cdb0d11ca823");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558096037002L), "ab1ee1f9-58e8-497c-ae6b-4eff2b577e40",
                                                     true, "099ebc91-8cea-4c13-9c63-62c373694049");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096041214L),
                                                          "7b8e8612-3c20-4ecf-874b-cedbff361198", false,
                                                          "9c6f0063-3219-42bc-84bc-62075b798046");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558096041214L),
                                                          "7b8e8612-3c20-4ecf-874b-cedbff361198", false,
                                                          "9c6f0063-3219-42bc-84bc-62075b798046");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558096041027L),
                                                          "29184b5d-7847-4667-b3b7-6f969e3e96e8", false,
                                                          "9085c15b-3e57-4f63-8d4a-74a2e32a1493");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
