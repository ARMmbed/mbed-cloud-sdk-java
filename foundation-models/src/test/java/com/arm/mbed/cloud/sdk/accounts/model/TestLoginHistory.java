// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559758608888L),
                                                          "4c4fff8f-cc7b-4a89-9d01-514c365f271d", false,
                                                          "3aab8d20-cb33-4f7d-88e7-32dad25761b0");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559758611578L),
                                                          "a0e76d42-a34a-4cb8-9cfe-e2d7705fa098", false,
                                                          "ee9f7cbd-0aee-4b4c-b8ee-264bca84a386");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559758611578L),
                                                          "a0e76d42-a34a-4cb8-9cfe-e2d7705fa098", false,
                                                          "ee9f7cbd-0aee-4b4c-b8ee-264bca84a386");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559758604144L), "69514899-fc99-4e8d-b539-86f20ba93be7",
                                                     false, "db9cb0de-9bb9-49cb-96b8-32c0ce60a4f6");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559758612199L),
                                                          "14ca4ebd-d90e-44c5-bf76-6cc9a7137dd7", false,
                                                          "acd8542b-6747-4819-803d-2e5f1e58bf09");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559758612199L),
                                                          "14ca4ebd-d90e-44c5-bf76-6cc9a7137dd7", false,
                                                          "acd8542b-6747-4819-803d-2e5f1e58bf09");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559758611824L),
                                                          "13c979dd-3860-43bc-a2f3-ab555a386114", false,
                                                          "0041c3f9-7023-45fb-844e-c3cfc9543365");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
