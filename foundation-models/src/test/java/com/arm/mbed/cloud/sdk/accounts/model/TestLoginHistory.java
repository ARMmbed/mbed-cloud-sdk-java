// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559313347895L),
                                                          "1334c2b0-db0a-4d70-b14b-78cfcb1663c0", false,
                                                          "18ccfb04-c7e0-48b1-96e6-7ba7d498adaf");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559313341480L),
                                                          "28c07658-d015-4c78-bde6-c42532dd55f2", false,
                                                          "aa7b8ac1-3db0-4131-ac25-cccf3d25f74e");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559313341480L),
                                                          "28c07658-d015-4c78-bde6-c42532dd55f2", false,
                                                          "aa7b8ac1-3db0-4131-ac25-cccf3d25f74e");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559313346562L), "deb4d7b4-5585-4b2a-8878-31f150be9e58",
                                                     false, "a91acec9-10cd-43f8-a10e-90c13ed1b6da");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559313348706L),
                                                          "a59dd669-2c6a-432f-a33e-34ee21179dcf", false,
                                                          "76fb5000-665b-46f9-b0f6-8a9867e1a5d8");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559313348706L),
                                                          "a59dd669-2c6a-432f-a33e-34ee21179dcf", false,
                                                          "76fb5000-665b-46f9-b0f6-8a9867e1a5d8");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559313349123L),
                                                          "c09ce39e-dfd6-4aa7-a36f-14cfa4fc2a02", false,
                                                          "e232d064-c48a-4fbb-86ec-8c928d6693f1");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
