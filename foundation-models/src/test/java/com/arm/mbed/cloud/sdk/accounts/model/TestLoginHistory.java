// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559662785117L),
                                                          "d9b15779-4b47-4bb5-b134-e290790bcb45", false,
                                                          "a8e6d8ce-d8e6-41e7-b7aa-3bfca9657fa6");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559662779940L),
                                                          "c3b05d6b-03b2-4acf-901d-262c29beed12", true,
                                                          "88535abb-f973-49ac-a14d-e6949c914ebf");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559662779940L),
                                                          "c3b05d6b-03b2-4acf-901d-262c29beed12", true,
                                                          "88535abb-f973-49ac-a14d-e6949c914ebf");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559662778050L), "4e874560-ee00-4fe6-86e7-a4a16cd68ad6",
                                                     false, "f7c494e1-5d18-4f06-8b67-e37a965b5e94");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559662785612L),
                                                          "b9c393b4-878c-4be3-82eb-6db187a34fcf", true,
                                                          "f91209d0-d9d7-4ae3-bce9-a06c6c9a31dd");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559662785612L),
                                                          "b9c393b4-878c-4be3-82eb-6db187a34fcf", true,
                                                          "f91209d0-d9d7-4ae3-bce9-a06c6c9a31dd");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559662785447L),
                                                          "079f6193-5457-426f-87ec-3a00d198d2c0", true,
                                                          "50bf2418-5cfb-4e5e-8994-be49a050a9e6");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
