// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559745301868L),
                                                          "e05b296b-7eeb-48dc-ba9b-102de2597d3f", true,
                                                          "7dd2184c-b705-46f4-b751-348a7752b42e");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559745301638L),
                                                          "ec01da62-6ada-4c32-86ec-b86d4e2570fe", false,
                                                          "cb67ad81-c65d-47ee-ad33-e6d793659f2c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559745301638L),
                                                          "ec01da62-6ada-4c32-86ec-b86d4e2570fe", false,
                                                          "cb67ad81-c65d-47ee-ad33-e6d793659f2c");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559745299982L), "7a80a192-4054-4144-af36-073fe55f03be",
                                                     false, "e4caf863-2063-4074-9e0b-3873d235a027");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559745296320L),
                                                          "5b36e9c7-9ef8-461d-b811-662c857fa086", true,
                                                          "879daee0-dbe1-4f31-99ff-d641858f9cb9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559745296320L),
                                                          "5b36e9c7-9ef8-461d-b811-662c857fa086", true,
                                                          "879daee0-dbe1-4f31-99ff-d641858f9cb9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559745298073L),
                                                          "5280721a-bc42-4bd6-b501-493b5443ebc9", true,
                                                          "d0081340-0269-49b3-87cd-30d1b79dfd95");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
