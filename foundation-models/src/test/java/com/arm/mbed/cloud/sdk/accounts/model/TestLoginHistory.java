// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546448720393L),
                                                          "c78a1acc-580c-45b8-a73a-da7975b587b2", true,
                                                          "eb11e7d2-772d-4ac2-84e2-9aec21d85bcb");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        LoginHistory loginhistory = new LoginHistory(new java.util.Date(1546448720044L),
                                                     "8831b406-44ba-48f9-831d-4a396a48c804", true,
                                                     "112f31e5-185e-4e6f-af17-fa8997b8caeb");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546448717781L),
                                                          "730f5174-f8a6-48c9-b5de-4121b09028da", true,
                                                          "58b54764-50fa-4178-9db7-3bd5ae730d8b");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1546448717781L),
                                                          "730f5174-f8a6-48c9-b5de-4121b09028da", true,
                                                          "58b54764-50fa-4178-9db7-3bd5ae730d8b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new java.util.Date(1546448713698L),
                                                          "3643aed5-2422-4fca-9676-e93aa2be2222", true,
                                                          "9cdd20f5-f1e6-4ff8-884f-d91bd33add1b");
            LoginHistory loginhistory2 = new LoginHistory(new java.util.Date(1546448713698L),
                                                          "3643aed5-2422-4fca-9676-e93aa2be2222", true,
                                                          "9cdd20f5-f1e6-4ff8-884f-d91bd33add1b");
            LoginHistory loginhistory3 = new LoginHistory(new java.util.Date(1546448719464L),
                                                          "e60599d1-8a26-4803-8118-e162f415bfc2", false,
                                                          "d86bab8e-2276-4646-9bab-79f260065a99");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
