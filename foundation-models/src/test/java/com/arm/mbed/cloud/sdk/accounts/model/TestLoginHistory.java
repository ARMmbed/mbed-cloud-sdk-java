// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559560667285L),
                                                          "72af3f1a-f731-4f2b-aede-a7c627b23e53", true,
                                                          "b7a9711b-4030-4c66-8b07-946d73fdea55");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559560667478L),
                                                          "1c0e9cff-14dd-41ff-9789-4d2710942019", true,
                                                          "03fa89f0-b9c1-43e6-a44e-80f70d3bc734");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559560667478L),
                                                          "1c0e9cff-14dd-41ff-9789-4d2710942019", true,
                                                          "03fa89f0-b9c1-43e6-a44e-80f70d3bc734");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559560671482L), "751bd1eb-7256-4a24-82b2-f12eeec8bcf9",
                                                     false, "feb13ee6-fbfe-4066-8e46-59969ecf921c");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559560668165L),
                                                          "6dd7df52-9fa5-4733-9844-d63235f03160", false,
                                                          "9f3dd643-bfbb-4386-8e78-575794e9c949");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559560668165L),
                                                          "6dd7df52-9fa5-4733-9844-d63235f03160", false,
                                                          "9f3dd643-bfbb-4386-8e78-575794e9c949");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559560667686L),
                                                          "c5a61001-90ea-4d88-9271-3f0febf3fe7e", false,
                                                          "fbdaf8ec-ac92-4782-a7e1-c48fa903315b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
