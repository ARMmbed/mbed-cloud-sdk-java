// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547489773679L),
                                                          "147f5d72-1b19-4c4e-b90a-07eb868b0d68", false,
                                                          "6849be5e-c588-4f7e-9133-d7e330e89795");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547489771036L),
                                                          "d4ce6733-e090-42ba-a307-d7ff28a175f6", true,
                                                          "93f7942b-64fc-49bc-8454-dd9a5b240c04");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547489771036L),
                                                          "d4ce6733-e090-42ba-a307-d7ff28a175f6", true,
                                                          "93f7942b-64fc-49bc-8454-dd9a5b240c04");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1547489772302L), "1c2bc0d3-ea43-4f34-828a-2e083ccfa1dd",
                                                     true, "41267010-f9d0-48c5-a0ed-868dd745ea6c");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547489764779L),
                                                          "566a5804-bf8c-4592-be02-dbcfc71d1989", false,
                                                          "206dbe56-80ce-4415-88e3-bccc39d800aa");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547489764779L),
                                                          "566a5804-bf8c-4592-be02-dbcfc71d1989", false,
                                                          "206dbe56-80ce-4415-88e3-bccc39d800aa");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1547489768356L),
                                                          "cb3cf2d1-4fed-4eb5-8da6-d4c4e3352689", false,
                                                          "89edea26-e8ad-492f-b06b-361f7993a851");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
