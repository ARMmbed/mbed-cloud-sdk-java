// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225120786L),
                                                          "5a045c01-e26e-46e3-ba99-93b3c8379b29", true,
                                                          "a6b68d68-2ea0-421f-beea-d52a9ca04e67");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225122125L),
                                                          "8003d9b2-dca2-4ac6-b71f-90cd1214305c", false,
                                                          "aa5be9fb-8f27-4bce-8a2f-695e1321fa5a");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547225122125L),
                                                          "8003d9b2-dca2-4ac6-b71f-90cd1214305c", false,
                                                          "aa5be9fb-8f27-4bce-8a2f-695e1321fa5a");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1547225115858L), "44a0305d-a4d9-42e1-81c0-3deb44b24132",
                                                     true, "84591d08-52a3-4b0f-b982-1584aac19854");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547225119579L),
                                                          "c4573574-b012-4ce4-9352-c736a4fc47f0", false,
                                                          "65fb8d6b-5cf0-4f41-b8f1-6e8607590b21");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547225119579L),
                                                          "c4573574-b012-4ce4-9352-c736a4fc47f0", false,
                                                          "65fb8d6b-5cf0-4f41-b8f1-6e8607590b21");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1547225123810L),
                                                          "3a66f710-9d0a-4724-bba2-e2a21e40ff38", false,
                                                          "4826201b-c2a0-4f89-89bd-2cde64093cd4");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
