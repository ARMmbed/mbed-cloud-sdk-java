// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559754637182L),
                                                          "2af308ff-b850-4ffc-837e-1c4a09264884", false,
                                                          "f537a071-5d33-4fdb-bfe0-a1c6aba498bb");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559754637689L),
                                                          "b3bfe1d8-b500-43cd-879d-e8d3e2e8b713", true,
                                                          "01cf3bbb-0db5-4025-b833-407b97f9a5ae");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559754637689L),
                                                          "b3bfe1d8-b500-43cd-879d-e8d3e2e8b713", true,
                                                          "01cf3bbb-0db5-4025-b833-407b97f9a5ae");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559754639725L), "4e574d6c-8a15-43d0-8f50-f90a91c741d8",
                                                     false, "b83b7176-8282-4823-aa4b-7ec0bbb6ee68");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559754642311L),
                                                          "c9a6a52d-3951-4ccc-b915-ac2a422f152d", true,
                                                          "06a6b088-b28c-4cd6-a2d8-c0f9583123dc");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559754642311L),
                                                          "c9a6a52d-3951-4ccc-b915-ac2a422f152d", true,
                                                          "06a6b088-b28c-4cd6-a2d8-c0f9583123dc");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559754643278L),
                                                          "8ed184f7-6687-4749-943c-882d0517e41d", true,
                                                          "39f5bf5e-f1d8-4238-9613-5871e77af248");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
