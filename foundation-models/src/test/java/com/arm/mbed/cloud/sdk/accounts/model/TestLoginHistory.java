// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547164359153L),
                                                          "2816bf8b-6571-4981-8738-0517e1139ccb", false,
                                                          "9b94852c-8bff-431e-a6dc-0b49ca3c48bb");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547164359346L),
                                                          "e386e960-3b3e-47d1-9170-ffe41d3bd503", false,
                                                          "91b6b2ba-1911-49ac-9d64-23bdaf0a0d7d");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547164359346L),
                                                          "e386e960-3b3e-47d1-9170-ffe41d3bd503", false,
                                                          "91b6b2ba-1911-49ac-9d64-23bdaf0a0d7d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1547164367750L), "89f48c6a-f8e7-4fc7-9e48-5d948211ba67",
                                                     true, "23e71295-b6fe-4a23-a8a5-97c2165ce34b");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547164359014L),
                                                          "729e40a3-9a2e-4b7b-800f-6450e7b7ae6d", false,
                                                          "cbd9ef64-d721-4951-bd0d-7ba10e8c9e3e");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547164359014L),
                                                          "729e40a3-9a2e-4b7b-800f-6450e7b7ae6d", false,
                                                          "cbd9ef64-d721-4951-bd0d-7ba10e8c9e3e");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1547164367661L),
                                                          "00a0fb72-fdda-443f-850a-9f51cfc0a6e8", false,
                                                          "a8b0efce-f63c-4e73-8b18-21e5ecaef3ec");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
