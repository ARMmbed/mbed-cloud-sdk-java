// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547573361683L),
                                                          "47e8eb91-0263-45c5-8b46-a1a1a3029f6f", false,
                                                          "7f8d3082-f885-4973-8342-ee04066731d0");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547573361790L),
                                                          "2720c5e0-bfdc-490e-bf89-ee2c15716dc2", true,
                                                          "ec3a36c6-88ac-4d8a-a9fc-62458eb27c54");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547573361790L),
                                                          "2720c5e0-bfdc-490e-bf89-ee2c15716dc2", true,
                                                          "ec3a36c6-88ac-4d8a-a9fc-62458eb27c54");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1547573365648L), "0fe3039f-1383-40a8-9fb2-4c47daf8c3f5",
                                                     true, "70f3c31a-7c23-4998-99fe-10adefacb913");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1547573365375L),
                                                          "26218bea-9796-497f-9e3f-69aa53b59ad0", false,
                                                          "1573f71a-c18f-4d01-b905-3e6f00d4401a");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1547573365375L),
                                                          "26218bea-9796-497f-9e3f-69aa53b59ad0", false,
                                                          "1573f71a-c18f-4d01-b905-3e6f00d4401a");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1547573363824L),
                                                          "f6812774-dcf4-4fd3-8ae3-86fafd41ec2b", false,
                                                          "364f9344-95b5-4c1c-8c7a-b6493441bb1b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
