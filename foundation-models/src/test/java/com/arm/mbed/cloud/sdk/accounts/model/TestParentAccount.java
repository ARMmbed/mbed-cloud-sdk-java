// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("c1374419-2ecb-4f13-baae-9e71937e5e0e",
                                                             "dc9ebfa7-4580-4c1e-804e-6c94486fd10d",
                                                             "a88f8948-3e98-48c2-99bb-9e386144ee0f");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("59a61a21-6ee6-4cfe-bf78-47ed52f5cb26",
                                                             "f2ed14e7-6ac3-4a4a-bc16-1142c7f698c0",
                                                             "ee5e75a9-387f-44a3-b90f-2c7a0ff89ee6");
            ParentAccount parentaccount2 = new ParentAccount("59a61a21-6ee6-4cfe-bf78-47ed52f5cb26",
                                                             "f2ed14e7-6ac3-4a4a-bc16-1142c7f698c0",
                                                             "ee5e75a9-387f-44a3-b90f-2c7a0ff89ee6");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("9f78e08e-733f-4554-8187-d35e0094b6fd",
                                                        "ea3ab502-f582-4180-9f0b-0ca3fa301fb4",
                                                        "a86946ab-b44e-4e5a-9cab-baa69064796f");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("a7f0f760-71f9-4ae3-a058-f61f00eb755c",
                                                             "d7e744d1-d1cd-4158-987b-85a309b66e81",
                                                             "2aedde1b-d5e3-4da6-ad90-cc7a146118d8");
            ParentAccount parentaccount2 = new ParentAccount("a7f0f760-71f9-4ae3-a058-f61f00eb755c",
                                                             "d7e744d1-d1cd-4158-987b-85a309b66e81",
                                                             "2aedde1b-d5e3-4da6-ad90-cc7a146118d8");
            ParentAccount parentaccount3 = new ParentAccount("7b0d3c43-bcc9-4768-9741-e94349d609d2",
                                                             "787910ef-0c84-4f9b-b0bb-7146e4617b81",
                                                             "bf57d11f-334f-4da0-980b-961b0376ad79");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
