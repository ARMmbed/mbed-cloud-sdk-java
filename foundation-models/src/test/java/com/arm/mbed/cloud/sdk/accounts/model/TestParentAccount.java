// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("efd851ff-bb00-4eff-95d5-a7814d028c95",
                                                             "8b0c6195-99dd-453a-a58b-2849fa930440",
                                                             "126dcaf4-0093-479e-bc23-9f4df3ff21d3");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("f2ae8b9d-35a2-4ecb-8fd8-b8fe0579b9e3",
                                                             "b0291299-a84c-4736-9019-f0215b916835",
                                                             "8d7688dc-fbe2-4d3f-9e08-23213d44c7dc");
            ParentAccount parentaccount2 = new ParentAccount("f2ae8b9d-35a2-4ecb-8fd8-b8fe0579b9e3",
                                                             "b0291299-a84c-4736-9019-f0215b916835",
                                                             "8d7688dc-fbe2-4d3f-9e08-23213d44c7dc");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("cad12291-ac1e-4eed-aedc-a37a6a7cce52",
                                                        "aed1b0da-270b-43bb-91c7-1ea0d97d735a",
                                                        "5bbd218d-1a36-4af9-8e74-c4ebcf26756b");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("104e619b-e567-45c8-9ff9-99afd4f65870",
                                                             "6eb6e886-b0bf-474f-afa1-4b51f8b0a262",
                                                             "7e4a34fb-70a2-4f9f-be72-3c9c91aa77a2");
            ParentAccount parentaccount2 = new ParentAccount("104e619b-e567-45c8-9ff9-99afd4f65870",
                                                             "6eb6e886-b0bf-474f-afa1-4b51f8b0a262",
                                                             "7e4a34fb-70a2-4f9f-be72-3c9c91aa77a2");
            ParentAccount parentaccount3 = new ParentAccount("ff03e7c9-0fbd-4acb-9ff9-7f429820a259",
                                                             "15fde3f1-1daf-4dec-a27d-f7c145368302",
                                                             "7de61187-5c9b-4371-bcc7-4a32b7ef20b4");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
