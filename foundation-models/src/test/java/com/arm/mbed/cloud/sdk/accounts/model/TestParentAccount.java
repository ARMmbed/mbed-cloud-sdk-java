// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ca0faa3b-9a5c-4f13-b965-dfee68f51e03",
                                                             "fd4e046f-a8c0-4555-b14c-e7243abc5a8a",
                                                             "f44d2e03-f062-45dd-aff3-0a0fca1f5596");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("8f225260-d1b0-4bef-b9c8-4fc99e77ae0c",
                                                             "b0072a45-7e1a-46b8-b084-b2066f0536e7",
                                                             "d666ef46-359c-431d-8ec8-4b9b37c01f5b");
            ParentAccount parentaccount2 = new ParentAccount("8f225260-d1b0-4bef-b9c8-4fc99e77ae0c",
                                                             "b0072a45-7e1a-46b8-b084-b2066f0536e7",
                                                             "d666ef46-359c-431d-8ec8-4b9b37c01f5b");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("a7eebee9-34e2-4d39-ab51-a6aeab29758a",
                                                        "8fc939c3-f5b4-45d6-a85d-7afea94083cf",
                                                        "ee3d74db-f252-4dbc-965d-c2f0c7819124");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("70ce6180-dd1f-4a97-b60a-2a3475134503",
                                                             "83973b01-ae86-41cb-9204-3933efa2ec15",
                                                             "6c60d50a-d01c-4074-a55f-b6e6d215e3d9");
            ParentAccount parentaccount2 = new ParentAccount("70ce6180-dd1f-4a97-b60a-2a3475134503",
                                                             "83973b01-ae86-41cb-9204-3933efa2ec15",
                                                             "6c60d50a-d01c-4074-a55f-b6e6d215e3d9");
            ParentAccount parentaccount3 = new ParentAccount("7efafac7-4191-4379-94f6-3ae9b03f7c54",
                                                             "014bbe5a-0088-4985-87fb-3a81640eb81e",
                                                             "c49ac565-56e3-45e4-bc8a-55fc012faf24");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
