// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("f285b4d6-2125-43cd-a865-741f2767cd27",
                                                             "4b71b2bf-411c-4323-81c9-b6d015508576",
                                                             "45e60869-19a1-47ea-bedd-2707fe7f68b6");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("43de606b-7d30-4267-87cd-2c2f12bb735c",
                                                             "7257e26d-c223-4665-b2e3-2583ee500dd7",
                                                             "42ac9e2b-6c78-45dc-a1bb-0469a08e8f59");
            ParentAccount parentaccount2 = new ParentAccount("43de606b-7d30-4267-87cd-2c2f12bb735c",
                                                             "7257e26d-c223-4665-b2e3-2583ee500dd7",
                                                             "42ac9e2b-6c78-45dc-a1bb-0469a08e8f59");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("baab1540-03b7-45c8-adec-e1896936fb52",
                                                        "5aa5d857-366d-4258-8953-70fbb5750dd3",
                                                        "ee9e3a78-1113-4b38-bff0-8f88a4945a27");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("6bad9345-3f4e-41f1-9e9b-56f9c6eafce8",
                                                             "0c7cf194-0213-4361-a5f7-a6e99997de22",
                                                             "e6ec9b75-0215-4f81-94dd-5b5504967453");
            ParentAccount parentaccount2 = new ParentAccount("6bad9345-3f4e-41f1-9e9b-56f9c6eafce8",
                                                             "0c7cf194-0213-4361-a5f7-a6e99997de22",
                                                             "e6ec9b75-0215-4f81-94dd-5b5504967453");
            ParentAccount parentaccount3 = new ParentAccount("5b4e5f2d-aa7a-4c99-81fa-b935554073b9",
                                                             "63175a80-c010-437a-b327-c55d3623e92c",
                                                             "2ecc1280-ba09-40b0-a40b-c5d8f7162cd3");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
