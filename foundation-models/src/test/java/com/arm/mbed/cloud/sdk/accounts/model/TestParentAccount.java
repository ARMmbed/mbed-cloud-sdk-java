// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("c783a477-b3dd-4da4-86b2-5481bf4991ab",
                                                             "a5ece0fc-43fd-4fb3-b510-4b01a272935d",
                                                             "067b7cd7-9423-47a5-b294-04d6f5cd8a43");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("723c8ef8-e4d3-40f1-a055-24b1fa3f9118",
                                                             "5278bccb-acbe-4718-a4ff-b42ae8d6196f",
                                                             "cb6b7a25-6ff2-498d-a8a2-9a9c1d59b8ad");
            ParentAccount parentaccount2 = new ParentAccount("723c8ef8-e4d3-40f1-a055-24b1fa3f9118",
                                                             "5278bccb-acbe-4718-a4ff-b42ae8d6196f",
                                                             "cb6b7a25-6ff2-498d-a8a2-9a9c1d59b8ad");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("e51f9b2d-a2f9-4ee2-bcee-3a3a2980f98d",
                                                        "1b481a4b-238d-4faf-b5b6-57b8843cd093",
                                                        "77d81369-0187-4e3e-9acb-be8304af0177");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("75939a6e-f87c-4ebc-877c-a0bfab5c2002",
                                                             "accbdefb-af43-4e02-b5c4-d05961bc667d",
                                                             "b3d661c9-0446-42b5-b409-d79824df99e3");
            ParentAccount parentaccount2 = new ParentAccount("75939a6e-f87c-4ebc-877c-a0bfab5c2002",
                                                             "accbdefb-af43-4e02-b5c4-d05961bc667d",
                                                             "b3d661c9-0446-42b5-b409-d79824df99e3");
            ParentAccount parentaccount3 = new ParentAccount("a7ec2d84-c7f6-42b6-bb2a-df4a7a608c8c",
                                                             "d99903f6-d042-4455-ad84-121d8afa8481",
                                                             "fb9646f0-fa5f-47c8-a12f-f1c077c59fc8");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
