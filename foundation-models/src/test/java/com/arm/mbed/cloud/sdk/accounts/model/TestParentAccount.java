// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("9730019a-9f26-40ef-8989-2fab987b6a4a",
                                                             "7dbb2fe7-f249-4a15-9987-f17cd573ef5a",
                                                             "85c7a3b5-d5b1-4213-a8bc-44b058171a0f");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("6253fba7-1bec-4ab2-ae0c-405690fccd41",
                                                             "391fe392-0724-4508-a86e-69cc65ceec29",
                                                             "425972ac-b4a2-443f-8fdf-21101a88d6af");
            ParentAccount parentaccount2 = new ParentAccount("6253fba7-1bec-4ab2-ae0c-405690fccd41",
                                                             "391fe392-0724-4508-a86e-69cc65ceec29",
                                                             "425972ac-b4a2-443f-8fdf-21101a88d6af");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("ba0a8fe4-c5cd-447e-a916-08b19a3ba667",
                                                        "e9e54a8f-9ec4-423b-aa5f-63901e2cb054",
                                                        "818404e7-c0ff-4ab4-893c-07c24a4407cc");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ee1ff40b-e8f1-46ef-a635-100162cb6e2d",
                                                             "6f1fb969-70ef-4dfb-80f8-b14b44fa68a3",
                                                             "847e624c-222d-4b78-8aad-5d14a1393de9");
            ParentAccount parentaccount2 = new ParentAccount("ee1ff40b-e8f1-46ef-a635-100162cb6e2d",
                                                             "6f1fb969-70ef-4dfb-80f8-b14b44fa68a3",
                                                             "847e624c-222d-4b78-8aad-5d14a1393de9");
            ParentAccount parentaccount3 = new ParentAccount("c4186aad-ba9c-4169-95ea-db0b8c1b2fe1",
                                                             "066bb3a1-e7ba-471c-a37f-96af785ec6ff",
                                                             "bd74fb98-3b56-4e6f-bfbe-0c08038f1437");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
