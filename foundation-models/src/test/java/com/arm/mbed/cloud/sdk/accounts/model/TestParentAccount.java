// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("2ee56ec9-552b-4e8d-9ff3-bdfe63eb7ace",
                                                             "50fa50a8-a938-4823-aa06-27719b8e98e4",
                                                             "8ab4fd1e-681a-4de0-bc19-674f0810e8d4");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("769caa54-bee8-4a0e-afbb-2865865a1187",
                                                             "6cadcdbd-f3e9-4447-9674-d61737fb4aeb",
                                                             "1828e54c-a31e-4a71-928f-1efac6d133a9");
            ParentAccount parentaccount2 = new ParentAccount("769caa54-bee8-4a0e-afbb-2865865a1187",
                                                             "6cadcdbd-f3e9-4447-9674-d61737fb4aeb",
                                                             "1828e54c-a31e-4a71-928f-1efac6d133a9");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("9dabfe12-9a88-4ab0-8baf-89be98332432",
                                                        "a283b94c-7524-49e7-9f8a-1dbbca58a6ce",
                                                        "ee28f583-7b90-45e0-a25a-0cbb3d6ad459");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("cfac003e-9894-463d-b182-4f7e3e6bbe81",
                                                             "11cc075f-c24d-4d9c-be72-f3fd4d28dfc7",
                                                             "f53c5f0c-becc-4b05-be99-237acfafa25b");
            ParentAccount parentaccount2 = new ParentAccount("cfac003e-9894-463d-b182-4f7e3e6bbe81",
                                                             "11cc075f-c24d-4d9c-be72-f3fd4d28dfc7",
                                                             "f53c5f0c-becc-4b05-be99-237acfafa25b");
            ParentAccount parentaccount3 = new ParentAccount("18866634-57ec-410a-93fb-3c97b14fd8bd",
                                                             "bd8214c9-5ab4-41ea-a569-f73eb3e62fdb",
                                                             "697f4d2f-a639-4328-bcc6-a443cfba6cb0");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
