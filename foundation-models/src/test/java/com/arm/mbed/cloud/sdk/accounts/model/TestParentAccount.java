// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("1b75fa85-be24-4cd8-8fef-847d5424f537",
                                                             "268115eb-a143-4c51-8826-6252713326fd",
                                                             "19b869fa-6c4c-477b-927f-f5bfee97cc68");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        ParentAccount parentaccount = new ParentAccount("3d365aca-f91d-4f12-b59c-2863143174be",
                                                        "6d309eab-7ead-4de0-a42c-b4ae7ab4737e",
                                                        "037ac495-3a1b-4915-95a6-b3bda98f99ca");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("8c65ffee-1031-4527-bee8-afb16b2f1b4e",
                                                             "3775fe2b-2567-46f4-bb3e-9d1b097c5261",
                                                             "41b19712-8835-444f-99b8-ef525b4ecc16");
            ParentAccount parentaccount2 = new ParentAccount("8c65ffee-1031-4527-bee8-afb16b2f1b4e",
                                                             "3775fe2b-2567-46f4-bb3e-9d1b097c5261",
                                                             "41b19712-8835-444f-99b8-ef525b4ecc16");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("f4d57433-76e3-4883-a98d-a694c18a2500",
                                                             "a31ecd47-feb5-417e-be0f-c249b162681f",
                                                             "0d6eb24e-cbc3-4b72-9b2f-5a6881d38aa4");
            ParentAccount parentaccount2 = new ParentAccount("f4d57433-76e3-4883-a98d-a694c18a2500",
                                                             "a31ecd47-feb5-417e-be0f-c249b162681f",
                                                             "0d6eb24e-cbc3-4b72-9b2f-5a6881d38aa4");
            ParentAccount parentaccount3 = new ParentAccount("ed2ba445-4978-4c7e-a4dc-86f5bd3c7958",
                                                             "d97b319c-fd6b-4f1f-a307-494310ee9e2e",
                                                             "967502ba-adc2-4754-a577-989622fb26e4");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
