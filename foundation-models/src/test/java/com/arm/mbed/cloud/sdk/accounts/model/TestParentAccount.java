// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("7241bcfb-0c71-43a4-84b8-28ea7a1f47e1",
                                                             "e5828103-db72-402d-95a8-2a0ee50ee376",
                                                             "b24d9d37-dbf5-47b8-94df-a48d7d069f5d");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("e57b53fd-cd75-4b7e-8b23-cf0091d39d55",
                                                             "cdad9053-fc18-4da9-b87b-38cae37af8d8",
                                                             "8b6454a9-05d1-46de-9120-acd5ad60acb4");
            ParentAccount parentaccount2 = new ParentAccount("e57b53fd-cd75-4b7e-8b23-cf0091d39d55",
                                                             "cdad9053-fc18-4da9-b87b-38cae37af8d8",
                                                             "8b6454a9-05d1-46de-9120-acd5ad60acb4");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("9044ebca-c90b-4c46-9068-cdccfb2c8701",
                                                        "142cb07c-83d7-47ec-a68a-8cb99d630da1",
                                                        "23428459-92eb-4027-8d6e-265fcf184e8f");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("1df27fee-ee05-4f23-8f3e-f689e1d99e16",
                                                             "97fe569c-60a4-458f-a123-238d941fa9a9",
                                                             "3a49c1d4-154b-45a7-bfb4-98d29cd05852");
            ParentAccount parentaccount2 = new ParentAccount("1df27fee-ee05-4f23-8f3e-f689e1d99e16",
                                                             "97fe569c-60a4-458f-a123-238d941fa9a9",
                                                             "3a49c1d4-154b-45a7-bfb4-98d29cd05852");
            ParentAccount parentaccount3 = new ParentAccount("4192fca5-aa1a-43e1-bbcd-7abbe043b3f1",
                                                             "63b67645-6ab0-4631-b9a4-e8c183e19d14",
                                                             "d45a8c15-6659-405b-a760-d08c12ac7032");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
