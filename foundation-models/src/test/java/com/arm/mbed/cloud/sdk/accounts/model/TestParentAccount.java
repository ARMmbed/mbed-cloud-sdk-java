// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("909aee38-321f-4495-9d2e-175e8d270b77",
                                                             "f564351c-3f17-4326-94ba-9f161673fd3e",
                                                             "4fabb1e3-cb67-44a6-a108-f062c0ba6f28");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("fe208226-00d2-4271-a2e7-d21f8596e9ea",
                                                             "1a909092-0bcb-44b3-a094-2374b36157f6",
                                                             "cfa9835e-e264-407e-bc04-18f30b6d1ab4");
            ParentAccount parentaccount2 = new ParentAccount("fe208226-00d2-4271-a2e7-d21f8596e9ea",
                                                             "1a909092-0bcb-44b3-a094-2374b36157f6",
                                                             "cfa9835e-e264-407e-bc04-18f30b6d1ab4");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("a14b1316-f696-49d6-ba33-29cf4d9acf48",
                                                        "2cb6d8b4-7bda-4d86-84cf-8e72198a1063",
                                                        "717b3d72-50b8-4f53-9c9a-3020571f2a13");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("1c4bf20c-8641-4b74-ae29-a7d4b0830c82",
                                                             "6b2b7220-d24b-40a0-b352-bc30653a3a26",
                                                             "bf1cbb2e-13a1-4ff1-b68b-dd9d9aff487d");
            ParentAccount parentaccount2 = new ParentAccount("1c4bf20c-8641-4b74-ae29-a7d4b0830c82",
                                                             "6b2b7220-d24b-40a0-b352-bc30653a3a26",
                                                             "bf1cbb2e-13a1-4ff1-b68b-dd9d9aff487d");
            ParentAccount parentaccount3 = new ParentAccount("39a683eb-3c4f-4b72-b3fa-960324b8a879",
                                                             "f6d9ae38-b267-4115-9193-881661983b84",
                                                             "719d8ec0-e980-436d-8abb-a5cc43286f78");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
