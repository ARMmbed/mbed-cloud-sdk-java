// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("9bf3d70a-0118-4ddc-b72e-366bc52552ad",
                                                             "9c41e096-2837-4836-8c66-c526a13c0608",
                                                             "6a82aa61-f8e7-4523-9210-04e0936f5c6f");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("fe313a85-c9d8-4cb6-a631-45a99478069f",
                                                             "abdb2a78-41f0-420d-933b-6342b4aed46b",
                                                             "86623aae-301e-4bbf-819a-38da275d231e");
            ParentAccount parentaccount2 = new ParentAccount("fe313a85-c9d8-4cb6-a631-45a99478069f",
                                                             "abdb2a78-41f0-420d-933b-6342b4aed46b",
                                                             "86623aae-301e-4bbf-819a-38da275d231e");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("c54f3a2e-2195-45d3-a9eb-b5104c5e4a9c",
                                                        "4d9e06c2-1d78-48d5-bb10-4c0a4ef6f26e",
                                                        "50d50f79-3fe9-449a-b15a-c85e35818fbd");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("f518326c-96e4-42b7-b080-e469d54c62c1",
                                                             "e92aa93a-29ce-4754-88f1-80705b0ea45a",
                                                             "67ebbf30-b7e6-4170-980d-cc3c5571bb75");
            ParentAccount parentaccount2 = new ParentAccount("f518326c-96e4-42b7-b080-e469d54c62c1",
                                                             "e92aa93a-29ce-4754-88f1-80705b0ea45a",
                                                             "67ebbf30-b7e6-4170-980d-cc3c5571bb75");
            ParentAccount parentaccount3 = new ParentAccount("f3161ec6-41ec-4b5a-adbf-80104e5a6939",
                                                             "53387ede-4201-4e1a-ac91-ce1ec8595d99",
                                                             "e065f8e9-53f7-434a-852b-968bf90e94b2");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
