// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("4960fcff-bb9a-4e0e-926c-6646a9876d64",
                                                             "75158f5b-eada-4dbc-8ce7-462e1aba9b51",
                                                             "6cf2ab6b-7cb1-4a05-b8a9-6537dfc4730a");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("fdad7ad8-b2b8-41e2-a54e-83129cb80efb",
                                                             "5e2fbe10-77cf-4e9e-8e28-b9ccd5cfca98",
                                                             "a79863af-99d7-4e69-8847-d956be07532e");
            ParentAccount parentaccount2 = new ParentAccount("fdad7ad8-b2b8-41e2-a54e-83129cb80efb",
                                                             "5e2fbe10-77cf-4e9e-8e28-b9ccd5cfca98",
                                                             "a79863af-99d7-4e69-8847-d956be07532e");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("a3ff39cb-1c3f-4fab-b0ed-e95a378fda8d",
                                                        "3c2b7fa9-f471-4a4c-a6bb-02411c48f5e1",
                                                        "3d33f312-2ebf-456b-b5a8-96225b363bd4");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("7fafe5c2-1776-445d-bee7-d04f655b93b9",
                                                             "0a3eb4df-2fc1-4e7c-a5fe-2fa6a4de7623",
                                                             "7360c488-c6ba-48fe-85ec-b6b0a8801d38");
            ParentAccount parentaccount2 = new ParentAccount("7fafe5c2-1776-445d-bee7-d04f655b93b9",
                                                             "0a3eb4df-2fc1-4e7c-a5fe-2fa6a4de7623",
                                                             "7360c488-c6ba-48fe-85ec-b6b0a8801d38");
            ParentAccount parentaccount3 = new ParentAccount("d3f010ff-3f3c-4fa6-9760-dbc157602cdf",
                                                             "5c97a19b-911d-42da-b987-c3e13f17c19a",
                                                             "569bb81a-ed7b-49f5-a5df-23c5155ad495");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
