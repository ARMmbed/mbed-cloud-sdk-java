// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313346220L), 10,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "f6fe9348-399c-4974-84ee-91bd8eace236", -65,
                                        "4664e06d-3dba-4869-8e77-e5ea8418cc7b", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313344576L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313345377L), 3,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "00f52abd-d5de-4bde-8e11-fbafc79b4bb0", -75,
                                        "69116191-08d5-48fe-8755-5706450a32af", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313344941L));
            ApiKey apikey2 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313345377L), 3,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "00f52abd-d5de-4bde-8e11-fbafc79b4bb0", -75,
                                        "69116191-08d5-48fe-8755-5706450a32af", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313344941L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313340200L), -69,
                                   "c26ebd108cbc6d2e0e403ca038b7faa6", "ba025b2f-fa43-4fd1-bb9d-c0094167d7fc", -16,
                                   "9b3dd470-dd58-4437-a376-cb42f52296c2", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                   ApiKeyStatus.getDefault(), new Date(1559313340085L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("5â¬³U\u0013\u0005PJä›¹â©ŽGWWë˜‚)ì“µ55?\u0012'ì¶Œ55\u0018ÏŸPä™˜ç¤¹)5\u0000Z?\bã·?\u0007>5ë¾¹á˜„\u001b\u001c555G5î—Š,ä“¯ç¶´Xï€œ\f5H×¤ê‰±]\u000eAè“œ",
                                          new Date(1559313341024L), -78,
                                          "5â¬³U\u0013\u0005PJä›¹â©ŽGWWë˜‚)ì“µ55?\u0012'ì¶Œ55\u0018ÏŸPä™˜ç¤¹)5\u0000Z?\bã·?\u0007>5ë¾¹á˜„\u001b\u001c555G5î—Š,ä“¯ç¶´Xï€œ\f5H×¤ê‰±]\u000eAè“œ",
                                          "4e04944e-d812-485d-bc1c-5f9aac14dc57", 44, null,
                                          "5â¬³U\u0013\u0005PJä›¹â©ŽGWWë˜‚)ì“µ55?\u0012'ì¶Œ55\u0018ÏŸPä™˜ç¤¹)5\u0000Z?\bã·?\u0007>5ë¾¹á˜„\u001b\u001c555G5î—Š,ä“¯ç¶´Xï€œ\f5H×¤ê‰±]\u000eAè“œ",
                                          ApiKeyStatus.getDefault(), new Date(1559313349019L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313344863L), 102,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "1ee46ec6-2277-4615-98d5-afde9721a303", -28,
                                        "e7628c98-e747-46c2-ae4a-bb8aee6bddef", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313343676L));
            ApiKey apikey2 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313344863L), 102,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "1ee46ec6-2277-4615-98d5-afde9721a303", -28,
                                        "e7628c98-e747-46c2-ae4a-bb8aee6bddef", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313343676L));
            ApiKey apikey3 = new ApiKey("c26ebd108cbc6d2e0e403ca038b7faa6", new Date(1559313346606L), -9,
                                        "c26ebd108cbc6d2e0e403ca038b7faa6", "99774fc3-2eb8-4d8e-825c-1dc55bf308f4", 9,
                                        "736eec16-c752-406e-a999-ff0bdeff3816", "c26ebd108cbc6d2e0e403ca038b7faa6",
                                        ApiKeyStatus.getDefault(), new Date(1559313343495L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
