// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("2cc8aeb9de662ca292de7e6ded3b5a0a", new Date(1547225121663L), -100,
                                        "55d09a43-010e-43b9-bfd5-8f0578f47fb9", "ee0495e3-ad43-473a-ac95-6be4f2687ff8",
                                        -56, "92a34f44-4318-45fd-a3e2-4c24e4b44781",
                                        "cf0026d7-70a7-49ed-bf60-5acbdd7ef941", ApiKeyStatus.getDefault(),
                                        new Date(1547225121292L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("37607c33a9a55ef1c6bccc6bfd7afc16", new Date(1547225116356L), -76,
                                        "008a602f-2ca5-4716-b450-cd0132e22960", "42dc0c53-52f2-4e1f-ac7c-33d971a14211",
                                        -123, "6e9bb260-da0d-4dd7-a151-55741639c7c1",
                                        "e8479ba6-9636-4df3-9c9e-f44b20d487e1", ApiKeyStatus.getDefault(),
                                        new Date(1547225116462L));
            ApiKey apikey2 = new ApiKey("37607c33a9a55ef1c6bccc6bfd7afc16", new Date(1547225116356L), -76,
                                        "008a602f-2ca5-4716-b450-cd0132e22960", "42dc0c53-52f2-4e1f-ac7c-33d971a14211",
                                        -123, "6e9bb260-da0d-4dd7-a151-55741639c7c1",
                                        "e8479ba6-9636-4df3-9c9e-f44b20d487e1", ApiKeyStatus.getDefault(),
                                        new Date(1547225116462L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("3ffaf8d9ea6f221a6f0f855edd57cd5a", new Date(1547225122941L), -10,
                                   "1eed767c-ff77-482c-9dff-a566cbd10aa5", "b23c2aa2-14e7-4b74-af74-bb65b36583d8", 65,
                                   "4d7eda4d-9ee0-410d-b821-826f4032b5b7", "e6dfe124-831b-4927-837b-2981dda70d59",
                                   ApiKeyStatus.getDefault(), new Date(1547225119223L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("/\u0005í…‚1é€½16\u000146A4ï–?6å?ˆ4æ—ƒ \u0007\u00014\bJ461A\u0011\u000fæ‹†\f\u000b464é¨¬T9ì‹‘\b14ç¾¤411F16`îŠ°6F)9\u001bQJ61WS6",
                                          new Date(1547225115075L), 18, "4ca8be47-a645-4e4d-9150-983de4178c0e",
                                          "6f0c6ac8-5da7-47c2-914e-e9653d498228", 121, null,
                                          "d21904b0-9c2b-49cb-8308-74c32ed70ca4", ApiKeyStatus.getDefault(),
                                          new Date(1547225116232L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("11e26cf0b5b875dcabea097ee3fdac3d", new Date(1547225122936L), -87,
                                        "2143bd99-e2c0-4883-88d9-c99af8db1230", "57b37a0b-2a09-4992-9883-1c0c53766e75",
                                        35, "f4482788-0aa9-4c69-8807-813e345e5752",
                                        "bba5c8c8-f5a0-4226-9e81-89bb0b5b7ded", ApiKeyStatus.getDefault(),
                                        new Date(1547225113897L));
            ApiKey apikey2 = new ApiKey("11e26cf0b5b875dcabea097ee3fdac3d", new Date(1547225122936L), -87,
                                        "2143bd99-e2c0-4883-88d9-c99af8db1230", "57b37a0b-2a09-4992-9883-1c0c53766e75",
                                        35, "f4482788-0aa9-4c69-8807-813e345e5752",
                                        "bba5c8c8-f5a0-4226-9e81-89bb0b5b7ded", ApiKeyStatus.getDefault(),
                                        new Date(1547225113897L));
            ApiKey apikey3 = new ApiKey("ecdd0821fab53c1882ca82066282452f", new Date(1547225122547L), -105,
                                        "6e20ee38-46cd-46b4-b37b-ed5f302c8e62", "bbff6f8b-a957-430b-b483-7bb414f89730",
                                        9, "b32b2cf4-ad1e-440c-a7e2-9094b576fb02",
                                        "1749c461-8632-4ef4-ab23-e4337a502460", ApiKeyStatus.getDefault(),
                                        new Date(1547225116494L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
