// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745299488L), -126,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "ef752e6b-c2f9-431e-8b80-c163b78f3455", -61,
                                        "1fd92b8a-e5e8-45c7-a6be-81d1cda3f546", "1fb3d6dc3467de6fb631f982b0ebed24",
                                        ApiKeyStatus.getDefault(), new Date(1559745303800L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745295869L), 31,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "3b93c16a-9a25-4d2c-99a2-7875de0ac1da",
                                        -102, "c843777a-1d98-4e7d-b7cb-38110185a08b",
                                        "1fb3d6dc3467de6fb631f982b0ebed24", ApiKeyStatus.getDefault(),
                                        new Date(1559745301734L));
            ApiKey apikey2 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745295869L), 31,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "3b93c16a-9a25-4d2c-99a2-7875de0ac1da",
                                        -102, "c843777a-1d98-4e7d-b7cb-38110185a08b",
                                        "1fb3d6dc3467de6fb631f982b0ebed24", ApiKeyStatus.getDefault(),
                                        new Date(1559745301734L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745295634L), 113,
                                   "1fb3d6dc3467de6fb631f982b0ebed24", "353f9390-a5af-4157-957c-05d5a9a70e80", 34,
                                   "4054db95-be46-46c2-bbeb-2d391e9a2c68", "1fb3d6dc3467de6fb631f982b0ebed24",
                                   ApiKeyStatus.getDefault(), new Date(1559745302705L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                          new Date(1559745297586L), -40,
                                          "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                          "5dd5b98e-b426-4b0d-8860-5b8dbe0aea30", -128, null,
                                          "ì™Œê¿£-[(5â”•5à¹¹5&B\u001e5Oa`ãŸ–è‹”5G\f-\u001aæ›¤ë—§E\u000fM5\u0005í•‚OKç›€ç»¯=5OZ]5\u0007,5ã»ª\u0012ï?¶,[5PZ5â”‘5\u000fá¾°åª™$$5ç‡«",
                                          ApiKeyStatus.getDefault(), new Date(1559745303130L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745301838L), 9,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "fa6cec16-64f1-41b5-b4cb-29d7de37211a", 109,
                                        "81358eb0-5b29-4acd-946e-72c5102c35f2", "1fb3d6dc3467de6fb631f982b0ebed24",
                                        ApiKeyStatus.getDefault(), new Date(1559745296085L));
            ApiKey apikey2 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745301838L), 9,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "fa6cec16-64f1-41b5-b4cb-29d7de37211a", 109,
                                        "81358eb0-5b29-4acd-946e-72c5102c35f2", "1fb3d6dc3467de6fb631f982b0ebed24",
                                        ApiKeyStatus.getDefault(), new Date(1559745296085L));
            ApiKey apikey3 = new ApiKey("1fb3d6dc3467de6fb631f982b0ebed24", new Date(1559745295774L), -119,
                                        "1fb3d6dc3467de6fb631f982b0ebed24", "95025d63-7e23-4e7f-b5c9-a503ace68242", -59,
                                        "af1827d6-fc43-459d-aeb2-01aae086d07d", "1fb3d6dc3467de6fb631f982b0ebed24",
                                        ApiKeyStatus.getDefault(), new Date(1559745301756L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
