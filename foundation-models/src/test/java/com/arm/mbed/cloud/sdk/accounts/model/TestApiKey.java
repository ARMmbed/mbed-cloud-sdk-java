// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("a4ef7aaeae936fddea65e7dffd2c55a3", new Date(1547573359254L), 24,
                                        "ec0eb4f3-71ae-41b0-b333-0b8e07e29595", "67a109d1-76ea-414f-983d-89562737b597",
                                        -97, "3393ab8d-f047-4c17-b17f-40a1fa09be77",
                                        "f04b11fb-97a4-4b92-ae5b-40cd0868ce18", ApiKeyStatus.getDefault(),
                                        new Date(1547573360928L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("25c45f1da439a42cdec8eb3cbdb8eefb", new Date(1547573356287L), 49,
                                        "7857c43b-c399-47c9-b438-8970f7dc4a67", "14d065ce-a91a-4f43-8fb6-be909881c625",
                                        64, "8c6149c5-9410-4155-9b99-0b6986dac673",
                                        "e87506cf-88e9-4df5-902a-5f2942e145b0", ApiKeyStatus.getDefault(),
                                        new Date(1547573363204L));
            ApiKey apikey2 = new ApiKey("25c45f1da439a42cdec8eb3cbdb8eefb", new Date(1547573356287L), 49,
                                        "7857c43b-c399-47c9-b438-8970f7dc4a67", "14d065ce-a91a-4f43-8fb6-be909881c625",
                                        64, "8c6149c5-9410-4155-9b99-0b6986dac673",
                                        "e87506cf-88e9-4df5-902a-5f2942e145b0", ApiKeyStatus.getDefault(),
                                        new Date(1547573363204L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("cae29a04fc33f47ce54abd4b6a1ffa66", new Date(1547573359612L), 80,
                                   "3e9aad9f-735f-4350-88b0-240c49553eb3", "44ed8a56-2ebc-4dbf-9049-2c18c188f3df", -75,
                                   "f54013e0-af81-4519-9293-fa5df2a72e49", "5551d20e-e5e9-413a-b361-1b533b3800f5",
                                   ApiKeyStatus.getDefault(), new Date(1547573356626L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("Z^ (`\u000eâ¸¦\u0015á±€Mé¶‚Aí—ƒVé½®\u001bT\u001f_èƒ§]è¼´æ±?8\u0013$$;PêŸ¥?\u0014/\u0004H\u0017\u0012=+=R[Sâ?¡â§¢_B\u001cëµ¶áŸ”ï?ª\u0013;!X*á¸‰!ìµ’\u0005éž‰IZYî”?",
                                          new Date(1547573356286L), -23, "b08a4ebd-bfa4-4108-91b3-521adf0a6e42",
                                          "ebfc8969-c633-4b2e-9d21-293fe87d7544", -79, null,
                                          "8c93d69a-9149-41d7-818a-c3636792885b", ApiKeyStatus.getDefault(),
                                          new Date(1547573358423L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("bec094fbab45a17daa8fc1a58c5cce89", new Date(1547573355923L), 46,
                                        "2595ee24-e939-4da6-96ce-45db06df6db4", "9b9e1ead-720b-489d-80ab-a81c0038952e",
                                        -53, "b9c7aba6-f6b2-446d-94a1-d62112fac3a1",
                                        "a6a28619-0c50-4cb3-ab33-910f126f7845", ApiKeyStatus.getDefault(),
                                        new Date(1547573363218L));
            ApiKey apikey2 = new ApiKey("bec094fbab45a17daa8fc1a58c5cce89", new Date(1547573355923L), 46,
                                        "2595ee24-e939-4da6-96ce-45db06df6db4", "9b9e1ead-720b-489d-80ab-a81c0038952e",
                                        -53, "b9c7aba6-f6b2-446d-94a1-d62112fac3a1",
                                        "a6a28619-0c50-4cb3-ab33-910f126f7845", ApiKeyStatus.getDefault(),
                                        new Date(1547573363218L));
            ApiKey apikey3 = new ApiKey("e6f845d260b005a5870b46bbce29b9ee", new Date(1547573357579L), -69,
                                        "057dd01a-1b4d-4adb-8fda-bb1eaf97c215", "015f01fd-2130-4c15-9c91-25fec0dca30a",
                                        100, "647d4068-b7a3-479c-bab1-ba2d6c3711e0",
                                        "a4e6eada-a9c0-488a-a995-9ef780a1b2e0", ApiKeyStatus.getDefault(),
                                        new Date(1547573363420L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
