// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300098555L), -117,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "ed669cdf-fcd8-4d16-a476-3b6523695da2", 5,
                                        "ffdeb3d6-d963-4989-a145-e8e49e64933c", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300101542L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300099689L), -80,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "57789f3e-8cad-47de-a460-3920383426f0", 98,
                                        "d1bda5d4-dc18-4b36-97c9-4046b99ffa8b", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300101221L));
            ApiKey apikey2 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300099689L), -80,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "57789f3e-8cad-47de-a460-3920383426f0", 98,
                                        "d1bda5d4-dc18-4b36-97c9-4046b99ffa8b", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300101221L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300105464L), -19,
                                   "e5adc84a514e5b3d136332ece0ac7d95", "f6a0e590-5508-436d-95ae-99270532f45a", -79,
                                   "5ce11e21-4f39-4aba-8397-1bdf1ac6b0fb", "e5adc84a514e5b3d136332ece0ac7d95",
                                   ApiKeyStatus.getDefault(), new Date(1559300098517L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                          new Date(1559300106014L), 63,
                                          "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                          "287e28c4-3c12-4cf1-a8ca-0cb6ebe016c6", -91, null,
                                          "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                          ApiKeyStatus.getDefault(), new Date(1559300102552L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300097464L), -18,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "2ba51110-ad26-4024-bb7a-4f1f0527d665", 67,
                                        "872b45b0-07c1-4fb2-aa8e-3afb6adbf817", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300105252L));
            ApiKey apikey2 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300097464L), -18,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "2ba51110-ad26-4024-bb7a-4f1f0527d665", 67,
                                        "872b45b0-07c1-4fb2-aa8e-3afb6adbf817", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300105252L));
            ApiKey apikey3 = new ApiKey("e5adc84a514e5b3d136332ece0ac7d95", new Date(1559300106642L), 105,
                                        "e5adc84a514e5b3d136332ece0ac7d95", "8aedc783-8e9c-4463-9184-f507414f9009", -7,
                                        "f8477c64-8d56-4e13-99cd-557454c0e125", "e5adc84a514e5b3d136332ece0ac7d95",
                                        ApiKeyStatus.getDefault(), new Date(1559300106492L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
