// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662781894L), -4,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "b5f3b177-2242-4e74-a0a7-830e40ce1446", -95,
                                        "eb5e1593-0ab8-4f63-b2d2-bd0fc97cfd23", "f33f4df6191a3d432ba4b4ea8fd5906b",
                                        ApiKeyStatus.getDefault(), new Date(1559662783156L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662777651L), 66,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "1c77ffa2-904f-400d-9c65-18633d78812e",
                                        -108, "17392a45-fd98-4afa-b14c-3bf22fca53e7",
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", ApiKeyStatus.getDefault(),
                                        new Date(1559662777400L));
            ApiKey apikey2 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662777651L), 66,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "1c77ffa2-904f-400d-9c65-18633d78812e",
                                        -108, "17392a45-fd98-4afa-b14c-3bf22fca53e7",
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", ApiKeyStatus.getDefault(),
                                        new Date(1559662777400L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662783548L), 112,
                                   "f33f4df6191a3d432ba4b4ea8fd5906b", "4250cd27-cdfc-458e-a87e-cbb754f74d02", 63,
                                   "e3d915f1-be77-43ee-8a91-2e5a4b000b42", "f33f4df6191a3d432ba4b4ea8fd5906b",
                                   ApiKeyStatus.getDefault(), new Date(1559662782790L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("7ã??cccUî‡±c7ä¨§\u0003îŒ¾æ­œ7c^Tæ·¨c`è–¯ä•§7cD7äž¾c\u0006\u00117ST-7K-cé§ƒ7cë¼¯ãŠ¯\t\t7cÕ¶cã²ŽâŸ¢\u00177 ;í?½cã½Œ%æ¿´B?7",
                                          new Date(1559662778331L), 6,
                                          "7ã??cccUî‡±c7ä¨§\u0003îŒ¾æ­œ7c^Tæ·¨c`è–¯ä•§7cD7äž¾c\u0006\u00117ST-7K-cé§ƒ7cë¼¯ãŠ¯\t\t7cÕ¶cã²ŽâŸ¢\u00177 ;í?½cã½Œ%æ¿´B?7",
                                          "d4820033-9860-436b-a0ae-ad79325adf4f", -124, null,
                                          "7ã??cccUî‡±c7ä¨§\u0003îŒ¾æ­œ7c^Tæ·¨c`è–¯ä•§7cD7äž¾c\u0006\u00117ST-7K-cé§ƒ7cë¼¯ãŠ¯\t\t7cÕ¶cã²ŽâŸ¢\u00177 ;í?½cã½Œ%æ¿´B?7",
                                          ApiKeyStatus.getDefault(), new Date(1559662779971L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662780064L), 89,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "59354fd7-7d22-4629-8aeb-588710d31322", -11,
                                        "3bfe666a-ca9e-413d-86a2-e3342fa77e46", "f33f4df6191a3d432ba4b4ea8fd5906b",
                                        ApiKeyStatus.getDefault(), new Date(1559662776422L));
            ApiKey apikey2 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662780064L), 89,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "59354fd7-7d22-4629-8aeb-588710d31322", -11,
                                        "3bfe666a-ca9e-413d-86a2-e3342fa77e46", "f33f4df6191a3d432ba4b4ea8fd5906b",
                                        ApiKeyStatus.getDefault(), new Date(1559662776422L));
            ApiKey apikey3 = new ApiKey("f33f4df6191a3d432ba4b4ea8fd5906b", new Date(1559662785175L), 97,
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", "ed9c1ec7-a9a0-4889-b59a-5e76c8963f6f",
                                        -122, "abc44306-8230-4878-98cd-2b0dc8062316",
                                        "f33f4df6191a3d432ba4b4ea8fd5906b", ApiKeyStatus.getDefault(),
                                        new Date(1559662782439L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
