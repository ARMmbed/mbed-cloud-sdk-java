// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758604416L), -113,
                                        "360efa29edf1702da7045dd46bf2c0ee", "72ba08b2-8fcb-4fbc-96b6-49951c5164e6",
                                        -112, "99ef166f-650a-4d08-97f8-aa05270648a4",
                                        "360efa29edf1702da7045dd46bf2c0ee", ApiKeyStatus.getDefault(),
                                        new Date(1559758604837L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758605758L), 72,
                                        "360efa29edf1702da7045dd46bf2c0ee", "c3431042-3d38-4d73-ba20-647696fe18aa", 37,
                                        "b3cfe291-56d6-4db4-bc6f-d69100d25fce", "360efa29edf1702da7045dd46bf2c0ee",
                                        ApiKeyStatus.getDefault(), new Date(1559758609284L));
            ApiKey apikey2 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758605758L), 72,
                                        "360efa29edf1702da7045dd46bf2c0ee", "c3431042-3d38-4d73-ba20-647696fe18aa", 37,
                                        "b3cfe291-56d6-4db4-bc6f-d69100d25fce", "360efa29edf1702da7045dd46bf2c0ee",
                                        ApiKeyStatus.getDefault(), new Date(1559758609284L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758612862L), -83,
                                   "360efa29edf1702da7045dd46bf2c0ee", "7156e47e-cb7f-4cbe-912e-8d5529e4774a", 4,
                                   "84d08d9d-6b65-4a73-9595-b9c98e19f54a", "360efa29edf1702da7045dd46bf2c0ee",
                                   ApiKeyStatus.getDefault(), new Date(1559758607618L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("TU8ã½…\u0019ZDDâ¬?ê²…8êˆ›è½?*8ç¾‚_\u000e\t\u0013W8Tí‘¼åµ…,\u0001. 8ê?¢8è¡¾\u0001é†€ 8î¢˜\u001bç¶’Sç‚¤ê·ˆ\bëŸ¬\u0011L8\u0010K?î¶¥8ï‚•è‰­ë§¦\u000eG*êµ­8Q8",
                                          new Date(1559758608246L), 116,
                                          "TU8ã½…\u0019ZDDâ¬?ê²…8êˆ›è½?*8ç¾‚_\u000e\t\u0013W8Tí‘¼åµ…,\u0001. 8ê?¢8è¡¾\u0001é†€ 8î¢˜\u001bç¶’Sç‚¤ê·ˆ\bëŸ¬\u0011L8\u0010K?î¶¥8ï‚•è‰­ë§¦\u000eG*êµ­8Q8",
                                          "ee11810b-f3c2-4ca2-b933-518b0a9a8ca5", -51, null,
                                          "TU8ã½…\u0019ZDDâ¬?ê²…8êˆ›è½?*8ç¾‚_\u000e\t\u0013W8Tí‘¼åµ…,\u0001. 8ê?¢8è¡¾\u0001é†€ 8î¢˜\u001bç¶’Sç‚¤ê·ˆ\bëŸ¬\u0011L8\u0010K?î¶¥8ï‚•è‰­ë§¦\u000eG*êµ­8Q8",
                                          ApiKeyStatus.getDefault(), new Date(1559758607772L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758610032L), 7,
                                        "360efa29edf1702da7045dd46bf2c0ee", "629d788a-926a-41af-9858-87b21a636600",
                                        -100, "c08698a8-0632-4f4c-b08f-c2e84be79ad7",
                                        "360efa29edf1702da7045dd46bf2c0ee", ApiKeyStatus.getDefault(),
                                        new Date(1559758609316L));
            ApiKey apikey2 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758610032L), 7,
                                        "360efa29edf1702da7045dd46bf2c0ee", "629d788a-926a-41af-9858-87b21a636600",
                                        -100, "c08698a8-0632-4f4c-b08f-c2e84be79ad7",
                                        "360efa29edf1702da7045dd46bf2c0ee", ApiKeyStatus.getDefault(),
                                        new Date(1559758609316L));
            ApiKey apikey3 = new ApiKey("360efa29edf1702da7045dd46bf2c0ee", new Date(1559758604171L), -127,
                                        "360efa29edf1702da7045dd46bf2c0ee", "f81d6ad9-f6c4-4744-a318-e772808bbeb2", -30,
                                        "a537c696-39d5-4d69-a7d2-bb1e4b48ee9f", "360efa29edf1702da7045dd46bf2c0ee",
                                        ApiKeyStatus.getDefault(), new Date(1559758609157L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
