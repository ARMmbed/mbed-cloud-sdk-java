// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("43617f12-4913-4a74-acf5-d7403eefa575",
                                                                      new Date(1547730057995L),
                                                                      new Date(1547730056670L),
                                                                      "3AwARek08D308tTXuw51g59toQ79o3WI",
                                                                      "A-n35uH7yqxLgGz1TUAmka6v6ciZT9t5DbH149KVGi4s45p3LbQbxenI5s7nCU1flKyI54zJ7U429Wsp1:iy2:HkSc0a8rY2D",
                                                                      new Date(1547730052073L),
                                                                      "11urrMvhKpuv2WS2v39P1OL07kXt39N1");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("35536849-d3f8-4a69-b7ca-8ed9b6240226",
                                                                      new Date(1547730056955L),
                                                                      new Date(1547730058508L),
                                                                      "Up1W0y7768Oxi1VBH83gaparqwVe5zZz",
                                                                      "A-8IW8j1IJH3cJaMj:I4Veq1Yj438haLlcqOX3goX5i3l3f60ApO21UQ0XYzsIIvE7S:e3mtk4WX6Xq1EJt4j11IVraX1WHSa",
                                                                      new Date(1547730050754L),
                                                                      "kY447ZKP4E7Hs8lrYcp9KAXIVKA5X0z1");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("35536849-d3f8-4a69-b7ca-8ed9b6240226",
                                                                      new Date(1547730056955L),
                                                                      new Date(1547730058508L),
                                                                      "Up1W0y7768Oxi1VBH83gaparqwVe5zZz",
                                                                      "A-8IW8j1IJH3cJaMj:I4Veq1Yj438haLlcqOX3goX5i3l3f60ApO21UQ0XYzsIIvE7S:e3mtk4WX6Xq1EJt4j11IVraX1WHSa",
                                                                      new Date(1547730050754L),
                                                                      "kY447ZKP4E7Hs8lrYcp9KAXIVKA5X0z1");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("07ceb3da-34b6-4b16-9816-a0236332b4ff",
                                                                 new Date(1547730048966L), new Date(1547730055266L),
                                                                 "YbbKLq68i8o7IB7qV2o9V3A2jJ3YKwg8",
                                                                 "A-t41MLW8BUoqS8pI1NL9rrk:en9Pyb:1226y5Aac8gg6xLuL7WrB8x8Sx5:9EZ959a9V5lnuCuB6:Ul:z9L3gGF3eXiffPXk",
                                                                 new Date(1547730056392L),
                                                                 "m0s72bE2H4Vo5FJ68157oZqjVUOM95t3");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("b03e5282-0c43-435f-9421-7ee50c04cf5b",
                                                                        new Date(1547730051003L),
                                                                        new Date(1547730051040L),
                                                                        "r13Wpê?—HK?Hpp:rmH3R^pKY8EY`W\u0006j83\u000e\\\\nTAnF[pr3vwuORâ?žOê¾Ÿ55uYp<E>HbRKmp",
                                                                        null, new Date(1547730058167L),
                                                                        "_Uèƒ¶8XH6XK>T6q\u0019kXT\u000b\u0002\u001cX]Ta]UT*jHRj6æ°¾cJRTHHXQ:q\\\\qXHoHRCTHt*o=U\u0010Hk86");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("43d06da3-0071-4ea3-b4ff-855fec13ae88",
                                                                      new Date(1547730049685L),
                                                                      new Date(1547730055653L),
                                                                      "09F9Fk7f9RtRBbE96mT6H81K1ZSLjH6x",
                                                                      "A-Za5y01Bq6x26Aq51cSVE4jUk:bUZ:w0C7L1xVEs7InZwrFVXzXWc0ihU6kDAUOC95Svi3PBDESMdu3fE776d7jX3nBs4io5",
                                                                      new Date(1547730055908L),
                                                                      "6q57711ZlJUqL6qKcD706eeXYY6dOLk9");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("43d06da3-0071-4ea3-b4ff-855fec13ae88",
                                                                      new Date(1547730049685L),
                                                                      new Date(1547730055653L),
                                                                      "09F9Fk7f9RtRBbE96mT6H81K1ZSLjH6x",
                                                                      "A-Za5y01Bq6x26Aq51cSVE4jUk:bUZ:w0C7L1xVEs7InZwrFVXzXWc0ihU6kDAUOC95Svi3PBDESMdu3fE776d7jX3nBs4io5",
                                                                      new Date(1547730055908L),
                                                                      "6q57711ZlJUqL6qKcD706eeXYY6dOLk9");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("7378187a-d966-478c-a1b7-56d6cfc162c4",
                                                                      new Date(1547730049836L),
                                                                      new Date(1547730055786L),
                                                                      "P4X1YQ07Q3MHQSP4bu1U09HqqDlXkYIm",
                                                                      "A-1L6r23jJd8lcgGsjzTzTh77FwhMwo3E493gguWEG421y8RW711:1pL1k5ub2K014EXU4v6oPc9q1aGYQ3o7mUMn6gtTeyC2",
                                                                      new Date(1547730051753L),
                                                                      "w016l5M3c2fNs1ySE37x1q39j2Y17GSY");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
