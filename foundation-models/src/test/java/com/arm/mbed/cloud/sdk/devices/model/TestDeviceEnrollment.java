// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("3bf5c872-954d-4dc6-a5ff-ea94fc0f268e",
                                                                      new Date(1559655032566L),
                                                                      new Date(1559655036979L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655028831L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("4b1f2af1-7cf6-42dd-a165-d7ec42217348",
                                                                      new Date(1559655031794L),
                                                                      new Date(1559655031978L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655029921L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("4b1f2af1-7cf6-42dd-a165-d7ec42217348",
                                                                      new Date(1559655031794L),
                                                                      new Date(1559655031978L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655029921L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("87891837-1405-4941-911e-ca3599228bb3",
                                                                 new Date(1559655035088L), new Date(1559655032092L),
                                                                 "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                 "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                 new Date(1559655031049L),
                                                                 "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("9f77659e-2da8-405a-bc5c-7b863bb3703c",
                                                                        new Date(1559655031375L),
                                                                        new Date(1559655034028L),
                                                                        "1Q颿B$$SmuQQWVKW11WVSvQ]u:XGNSB_LQWbQXdm1Sh\u001eS[`@V꧈um`>QlBK\u0016EJ1v,bc",
                                                                        null, new Date(1559655029103L),
                                                                        "1Q颿B$$SmuQQWVKW11WVSvQ]u:XGNSB_LQWbQXdm1Sh\u001eS[`@V꧈um`>QlBK\u0016EJ1v,bc");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("952ef870-3c69-4607-81ae-e58b0e1b40c2",
                                                                      new Date(1559655037022L),
                                                                      new Date(1559655029722L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655028339L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("952ef870-3c69-4607-81ae-e58b0e1b40c2",
                                                                      new Date(1559655037022L),
                                                                      new Date(1559655029722L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655028339L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("2c04be01-d003-49ec-95de-95441e3898e9",
                                                                      new Date(1559655036713L),
                                                                      new Date(1559655035281L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p",
                                                                      "A-pa9N7:j2HQg262rPgWWibr3zf8Mo3JVcP4Tw2x7d8xfXx0Glueek8xHpHH4WFIBhbf9ko80btNi74X7Ny8OO3B014g9GtAK",
                                                                      new Date(1559655029100L),
                                                                      "Hy3f6ppT27RR04qIY3UgP8OerrxDAs5p");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
