// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("b7e0506c-8ac0-4c9b-815e-3675ab4f832f",
                                                                      new Date(1559313345682L),
                                                                      new Date(1559313339392L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313345219L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("45f51268-f02f-436e-830e-7d6738224d76",
                                                                      new Date(1559313342346L),
                                                                      new Date(1559313340418L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313345012L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("45f51268-f02f-436e-830e-7d6738224d76",
                                                                      new Date(1559313342346L),
                                                                      new Date(1559313340418L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313345012L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("a2482e3c-8409-479c-ba94-9762df3e4c1d",
                                                                 new Date(1559313348346L), new Date(1559313348682L),
                                                                 "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                 "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                 new Date(1559313346397L),
                                                                 "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("93fb8f95-1e36-4f34-9911-835110694d61",
                                                                        new Date(1559313344956L),
                                                                        new Date(1559313343355L),
                                                                        "UVh>Zql\\\\CFqs55lEl5\tl5CErp`wRx檼x5ehv:OFUxṄxPNEIqIGhlF莮p]I\u0011Flw8J`",
                                                                        null, new Date(1559313344798L),
                                                                        "UVh>Zql\\\\CFqs55lEl5\tl5CErp`wRx檼x5ehv:OFUxṄxPNEIqIGhlF莮p]I\u0011Flw8J`");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("7affc5b8-9179-4344-97c8-2f45c0e65ff6",
                                                                      new Date(1559313339127L),
                                                                      new Date(1559313344760L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313340537L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("7affc5b8-9179-4344-97c8-2f45c0e65ff6",
                                                                      new Date(1559313339127L),
                                                                      new Date(1559313344760L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313340537L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("6e8120d1-4dd2-4895-8d05-2183ae5ccbec",
                                                                      new Date(1559313348571L),
                                                                      new Date(1559313347759L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0",
                                                                      "A-86SPY9Uhwj2x1sF6640kw14Ze4:2KHaL8s3j7f30NUj0xVaNdDR1qhymzhhuh20f:05g2PY3:98U:U2IC1C7tHirix:i223",
                                                                      new Date(1559313343147L),
                                                                      "KM42z3WaD13fQL0gHn3fHX16t6kgKub0");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
