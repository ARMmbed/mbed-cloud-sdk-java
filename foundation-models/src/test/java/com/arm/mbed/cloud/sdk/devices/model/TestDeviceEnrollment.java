// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("e0af9dad-0381-4409-b57e-4afc3f33b23a",
                                                                      new Date(1548165447823L),
                                                                      new Date(1548165438746L),
                                                                      "8z293D063vFK1WQz55EP1LQHyh9io13I",
                                                                      "A-kG:d1:SPVW88P3ZA3j2dmcn:JoTz1T:108dsA9zfs7gJ33:9rk4Na4GlQpNqpT6p4:mMjioE23mk2UpGT9181b1INCrpYrp",
                                                                      new Date(1548165440940L),
                                                                      "5q773B2jfBZ4OldtrJHNlc87PDw8qgW0");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("523bc9e4-cffb-464e-b2f8-d532541afc0d",
                                                                      new Date(1548165445395L),
                                                                      new Date(1548165440700L),
                                                                      "vu5CZu1N9hfnlPFi9kdlmHKc31djxz51",
                                                                      "A-m6tf:Y1VW1UNMi0u32NMh:IfNrSWGahMoL53qcO1g8DoM:jB0sp9haDksHFNvh1239bk4408j24pub11NAw:G3:30X3ATjU",
                                                                      new Date(1548165447493L),
                                                                      "5Xc8tz15a5nM7EhXFmWF13OJgrG8JgrT");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("523bc9e4-cffb-464e-b2f8-d532541afc0d",
                                                                      new Date(1548165445395L),
                                                                      new Date(1548165440700L),
                                                                      "vu5CZu1N9hfnlPFi9kdlmHKc31djxz51",
                                                                      "A-m6tf:Y1VW1UNMi0u32NMh:IfNrSWGahMoL53qcO1g8DoM:jB0sp9haDksHFNvh1239bk4408j24pub11NAw:G3:30X3ATjU",
                                                                      new Date(1548165447493L),
                                                                      "5Xc8tz15a5nM7EhXFmWF13OJgrG8JgrT");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("9bcd255d-c3ac-4453-b80e-e86f2a606a34",
                                                                 new Date(1548165443040L), new Date(1548165447911L),
                                                                 "d4ggLx893sw2f90U5wQBZ4nvn51SAUJv",
                                                                 "A-Dl5xqDe6gD:9e0HpdOJbK3c60LaBO24ds:acE24StgSwNZ:42W7kajO75rtkiS6Fdk:t5o0312l0ZAHD8x29F06GLEW7:AG",
                                                                 new Date(1548165447956L),
                                                                 "tA3nA8N2yaVG34iq0n0taUT47m4lCcS4");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("cfb08ceb-562b-4b16-9f69-792c2042572b",
                                                                        new Date(1548165447645L),
                                                                        new Date(1548165443434L),
                                                                        "nEq<_A\u0012^Nn\\\\Q\\\\ejRdReqn\u0005\u0017íž”qQS\u0011n)[nRUí˜¼N<RNnJNã‰šjWâ”¯UNVUq dVU\u0005SJWfN^a",
                                                                        null, new Date(1548165440747L),
                                                                        "X6B?V3VwRusgwQ5_?_!mKwIm!5gD\tdé°†ïº½b\\\\FEK2ç?–â®¶@:b\\\\3\u0015o3sG2:Vd5;3?6GQU@\u001d");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("d19b58d7-89be-47af-b43d-45e37a8a2f5c",
                                                                      new Date(1548165444109L),
                                                                      new Date(1548165444193L),
                                                                      "WF51VNwSWK7v6yuII8J38Xs72g25S0zN",
                                                                      "A-2CAn62s3xn:Et5828ex:93:eemswGwn7I90W8RcgE1EI0e62rNYv1jn1KY9i7Fk5M2T:KSR7I3H8f2S54bo7Cr29kXm4NM2",
                                                                      new Date(1548165446365L),
                                                                      "LqvQJJ9HBRSmO4rG7RL9LlDxdKQjIdL6");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("d19b58d7-89be-47af-b43d-45e37a8a2f5c",
                                                                      new Date(1548165444109L),
                                                                      new Date(1548165444193L),
                                                                      "WF51VNwSWK7v6yuII8J38Xs72g25S0zN",
                                                                      "A-2CAn62s3xn:Et5828ex:93:eemswGwn7I90W8RcgE1EI0e62rNYv1jn1KY9i7Fk5M2T:KSR7I3H8f2S54bo7Cr29kXm4NM2",
                                                                      new Date(1548165446365L),
                                                                      "LqvQJJ9HBRSmO4rG7RL9LlDxdKQjIdL6");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("c22fdf8a-5209-4948-8894-8febb0716310",
                                                                      new Date(1548165447663L),
                                                                      new Date(1548165441986L),
                                                                      "uCK333NU7r96M7UcI1m232P640007WNw",
                                                                      "A-fdaAkSSsy2tMdewz16ud02b7Un4rRM1pTyC13c0xvouh54500OpElFpyRS8UOccO3Zc5UEzmdhxRjA2LKq8fInKr3XgrrnN",
                                                                      new Date(1548165441502L),
                                                                      "59n0gU95m218qV2QErqqK7PhIUMeVH2w");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
