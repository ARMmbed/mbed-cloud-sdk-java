// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("6077f222-cdc7-4261-ab4f-98b87eb8d32c",
                                                                      new Date(1559662777952L),
                                                                      new Date(1559662776795L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662784747L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("37fddea1-fe19-4316-bc6c-2f196ee285f1",
                                                                      new Date(1559662784835L),
                                                                      new Date(1559662780424L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662780790L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("37fddea1-fe19-4316-bc6c-2f196ee285f1",
                                                                      new Date(1559662784835L),
                                                                      new Date(1559662780424L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662780790L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("0556d99c-2901-4fbf-be1a-a5e5676494de",
                                                                 new Date(1559662777993L), new Date(1559662786105L),
                                                                 "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                 "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                 new Date(1559662779070L),
                                                                 "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("47c6178d-b186-4dc1-aa9f-3d6e81d902ad",
                                                                        new Date(1559662784021L),
                                                                        new Date(1559662782886L),
                                                                        "mwt^^31mmO⻘$$鴧c@1fw?1T3rXmG`D[QwL;f9r3C31s3Gsu?T1`Gff;1\u000211mXQk1f",
                                                                        null, new Date(1559662786247L),
                                                                        "mwt^^31mmO⻘$$鴧c@1fw?1T3rXmG`D[QwL;f9r3C31s3Gsu?T1`Gff;1\u000211mXQk1f");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("587c2a53-39f1-44a7-a484-510c7185a2ea",
                                                                      new Date(1559662777574L),
                                                                      new Date(1559662779344L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662778210L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("587c2a53-39f1-44a7-a484-510c7185a2ea",
                                                                      new Date(1559662777574L),
                                                                      new Date(1559662779344L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662778210L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("107561db-28c0-419c-b9ca-432d0e14ef16",
                                                                      new Date(1559662785494L),
                                                                      new Date(1559662786028L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq",
                                                                      "A-500SG1YkVM4lBjQwbFMxt:1Qx5863c0d304zYjB:e80ws2HqOL15lCB0jd5jkWL:1J9ZWqXqYNJ3hYPHarI4U5Q49LmnQJl",
                                                                      new Date(1559662781450L),
                                                                      "0h74aA6Uepnvj8o2aZMixgg45aBARSYq");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
