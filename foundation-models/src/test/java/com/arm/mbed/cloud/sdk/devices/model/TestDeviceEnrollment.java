// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("bdc9a50f-2bea-4478-b028-bb2c1d25a06e",
                                                                      new Date(1547159625209L),
                                                                      new Date(1547159624468L),
                                                                      "SvG0WeKFF0868rJ9g319ftDMzqoadRSc",
                                                                      "A-2AgK8y16fn02FUDsQx5BYnI:nJmXg8Mvek72euiwqII15T0sJ9xtAP3r8E5Zx4Z:B7b0n3p6:LQ4HbtUG3l5bc::rhvQ:rP",
                                                                      new Date(1547159629297L),
                                                                      "3Y46s3VzPAnDn8Ww0c128HItAq6NL2qB");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("d87d9972-64ca-42e1-ac42-8a7ccd67c076",
                                                                      new Date(1547159625768L),
                                                                      new Date(1547159627290L),
                                                                      "H96qOp3XRtM7vIt720CD8a02v6Xg7AhK",
                                                                      "A-nbI9S4f3pfG595319l765Oi74g4b86MZ3rKmbJ20:tPol7rBq0W1meF864k23vU4:5623YkWtOi415sNl79amOeaIlGLsBp",
                                                                      new Date(1547159624253L),
                                                                      "aCbvNGZl5ugv5FrF4LcE2KYKh2L67TBb");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("d87d9972-64ca-42e1-ac42-8a7ccd67c076",
                                                                      new Date(1547159625768L),
                                                                      new Date(1547159627290L),
                                                                      "H96qOp3XRtM7vIt720CD8a02v6Xg7AhK",
                                                                      "A-nbI9S4f3pfG595319l765Oi74g4b86MZ3rKmbJ20:tPol7rBq0W1meF864k23vU4:5623YkWtOi415sNl79amOeaIlGLsBp",
                                                                      new Date(1547159624253L),
                                                                      "aCbvNGZl5ugv5FrF4LcE2KYKh2L67TBb");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("027d8969-5477-408e-8793-3d379415a08d",
                                                                 new Date(1547159627800L), new Date(1547159620569L),
                                                                 "uoT945m01rq7F2Ksd1qmccA16EzIXR99",
                                                                 "A-hovgtl2gep6uTJUoy2F3mfbRRZFM1lak6dX3ufog05IR373KBtLS0A3Pzc0O9gA8P:PWqD7wcs7Rna9Cb5OCoh0zL2kLoIM",
                                                                 new Date(1547159624837L),
                                                                 "J3J4G3Lgyg0f4caEkl4Vh7L91231133i");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("7547cfb4-495c-4d9e-b960-26413d73c3de",
                                                                        new Date(1547159624864L),
                                                                        new Date(1547159629253L),
                                                                        "gBì‹?YI3iuV1=1TGGW?ï„¢RkwjV15T?31C\u0013\u000fTT1o815YåŠ†C81u5=CQRre8QjQx55D1ê¿²gT",
                                                                        null, new Date(1547159629147L), null);
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("fac35f60-f96f-4d2c-a66b-56157f6026fa",
                                                                      new Date(1547159627120L),
                                                                      new Date(1547159628044L),
                                                                      "1jI2Gzo0Vvy6f2YSt18eWLx0pc0Ed5NM",
                                                                      "A-lOQPTAh23FyYEMf4l43YI2Ml62B3xj9:24:Yq0QX7BI064n6K7XIPFSykcXe9EhrKesqPbTXCj43r2w90a29Md6Lx30YLtK",
                                                                      new Date(1547159620931L),
                                                                      "M1PS56jTHRiy3gO0cI6193W1h1zsW8mN");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("fac35f60-f96f-4d2c-a66b-56157f6026fa",
                                                                      new Date(1547159627120L),
                                                                      new Date(1547159628044L),
                                                                      "1jI2Gzo0Vvy6f2YSt18eWLx0pc0Ed5NM",
                                                                      "A-lOQPTAh23FyYEMf4l43YI2Ml62B3xj9:24:Yq0QX7BI064n6K7XIPFSykcXe9EhrKesqPbTXCj43r2w90a29Md6Lx30YLtK",
                                                                      new Date(1547159620931L),
                                                                      "M1PS56jTHRiy3gO0cI6193W1h1zsW8mN");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("f0416096-c905-4c3f-bc1e-567fdc5d59c6",
                                                                      new Date(1547159622183L),
                                                                      new Date(1547159622023L),
                                                                      "qK8E1895p201laFngM2W7g581k8V37XQ",
                                                                      "A-RdKYqjfzm4e3kW27d5KdyY6X9dc3ACpes4YiLh9ve7:ZjlX05KvbccXcGIYgCms3bs4IM9cXdF6upnC5o1mpo5wrXEypjzp",
                                                                      new Date(1547159624706L),
                                                                      "xOpOyH0lKN51CHV4mZWB07wo85786BqV");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
