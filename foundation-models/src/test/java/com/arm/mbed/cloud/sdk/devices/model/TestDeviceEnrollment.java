// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("260619e4-642c-47ce-a2c0-b3df084b2b1e",
                                                                      new Date(1547573355669L),
                                                                      new Date(1547573360882L),
                                                                      "MXDym5X3ZZ8LMc8GcL14N1b991CYI8nX",
                                                                      "A-j:3oE4IPw8L:kGajYH8:97awDmQauVbpF1MKlvK9Hph5fgo0r9MueuFdU907O32d7WX57ZR9RLNN71dtuq73a2awFzgs0c9",
                                                                      new Date(1547573359462L),
                                                                      "5zQqBh5skO47hdBO0XcbpC294965W1tQ");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("38b73674-e653-4227-be80-9ce94d9182d0",
                                                                      new Date(1547573358995L),
                                                                      new Date(1547573361566L),
                                                                      "xORX7USXYa357EY61KX165UcU34niU14",
                                                                      "A-3A2exL7TngMh9cozL0sGo1A7D:ZXBIUi4P31ieyQ9426PZxG8:rQcM5P3sT0GUb859U::S1:6IMF5zu1vl:i20HQEyXNt40",
                                                                      new Date(1547573363221L),
                                                                      "euItDYy8U6fa5m9rM717feWZ6iI06o6k");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("38b73674-e653-4227-be80-9ce94d9182d0",
                                                                      new Date(1547573358995L),
                                                                      new Date(1547573361566L),
                                                                      "xORX7USXYa357EY61KX165UcU34niU14",
                                                                      "A-3A2exL7TngMh9cozL0sGo1A7D:ZXBIUi4P31ieyQ9426PZxG8:rQcM5P3sT0GUb859U::S1:6IMF5zu1vl:i20HQEyXNt40",
                                                                      new Date(1547573363221L),
                                                                      "euItDYy8U6fa5m9rM717feWZ6iI06o6k");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("0c4a5e1e-8fd1-4d19-9494-237f62849996",
                                                                 new Date(1547573361745L), new Date(1547573357314L),
                                                                 "CnS4DhMKxH5Y6km5MDJBmuRW3Nnjr1jA",
                                                                 "A-zi6cH7:Cv46vAk14Up5ccf6n2flt0q:SAnd9590hfKxnXXp7VrAmvmrP54R2Tp3dY46kbzwh35CzCyEUzMlY2fLYCNWW:tY",
                                                                 new Date(1547573360948L),
                                                                 "7r1WiRqd3DQ63TDMpz1uJl5S73SukSok");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("514f5f88-1f20-4b5d-a55c-c3c6eeff3553",
                                                                        new Date(1547573355360L),
                                                                        new Date(1547573361838L),
                                                                        "rEvKcTosiHpchmfmHceá³“OUcMQ<MK2ca2`2ME]K5Jx\u001fQ`R\tmRâ?ˆH[E2OL2pì²‚(Hcm_c",
                                                                        null, new Date(1547573364915L),
                                                                        "_6@7gSeFKphQ:hUD^oQé¿‰U\u000b2lBoPhkJU?Ué˜¦Sl2mláœŽUaUu=nXï¾¸<JUQthuh]\u00166\u001466XS");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("cbe2a3ac-f6a1-4f9e-b207-58f7861d69b1",
                                                                      new Date(1547573357925L),
                                                                      new Date(1547573355865L),
                                                                      "b41dEh334gj2Ac80jxjiLDwj3YflQl9U",
                                                                      "A-zPW3GQwqR70Z0CN6C8FHC8Un:d1DRgclSB2o7ws9o8Sfs247Sb9R3WXs8e:16BRj8B3LYbqpaYrxq18M8483:1gjN20m165",
                                                                      new Date(1547573359454L),
                                                                      "49F3bV0Y6rhM4Njocnzo12IBlwh3imL0");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("cbe2a3ac-f6a1-4f9e-b207-58f7861d69b1",
                                                                      new Date(1547573357925L),
                                                                      new Date(1547573355865L),
                                                                      "b41dEh334gj2Ac80jxjiLDwj3YflQl9U",
                                                                      "A-zPW3GQwqR70Z0CN6C8FHC8Un:d1DRgclSB2o7ws9o8Sfs247Sb9R3WXs8e:16BRj8B3LYbqpaYrxq18M8483:1gjN20m165",
                                                                      new Date(1547573359454L),
                                                                      "49F3bV0Y6rhM4Njocnzo12IBlwh3imL0");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("0c8138e8-3dcb-41cf-984a-86e31b51bbe3",
                                                                      new Date(1547573361093L),
                                                                      new Date(1547573363019L),
                                                                      "rXxHJ5zls7THIb9dJMk7nHxP2J4cOf3D",
                                                                      "A-:56XeL2tTwQNQ1a2ALP7YmN64D1jX163N4N6NtJfIQJiy87Is64LMo:5WbZ:H1s6U34aHp4OzNNWEnBzUC3t0NbLZiJL4uy",
                                                                      new Date(1547573361559L),
                                                                      "DB4rmr04w6d4O71ii235b4E67l0NJO8c");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
