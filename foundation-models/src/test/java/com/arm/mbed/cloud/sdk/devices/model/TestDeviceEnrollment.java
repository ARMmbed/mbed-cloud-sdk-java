// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("f7ac3a12-a851-4587-b4a5-132e017bcc0d",
                                                                      new Date(1547164366848L),
                                                                      new Date(1547164362867L),
                                                                      "Pd5L782030fwz1HyFBk3k0f2mI3EkUB1",
                                                                      "A-nB996R62XI867067x67:gffd03:6guTzu5Q2j6D42tF34L0fmGs:PG2n0p81seDk7Gh2Ri336NuDvaRHvG33T621R36EY61",
                                                                      new Date(1547164363507L),
                                                                      "HKZ6Py0vdb0QOJT0ymhiS55Vm8260HlE");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("d1298ec0-28e0-4c7e-ae4e-7d19e659661d",
                                                                      new Date(1547164360313L),
                                                                      new Date(1547164365757L),
                                                                      "Yxa6iYvLB6OHXY40U4HbPz1sca0864Vl",
                                                                      "A-4W6:Kh::SQj7i77eOUa4qme5trX9:670Qkv5Q56CoNlpaGD3fU6Bu3RQP3PR5t60qbVVnL5Kmz3OVt724ufIjo6i53o4Ile",
                                                                      new Date(1547164363237L),
                                                                      "QoeZyxZclOHzVTJdrhl6sD09mZfrR6dS");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("d1298ec0-28e0-4c7e-ae4e-7d19e659661d",
                                                                      new Date(1547164360313L),
                                                                      new Date(1547164365757L),
                                                                      "Yxa6iYvLB6OHXY40U4HbPz1sca0864Vl",
                                                                      "A-4W6:Kh::SQj7i77eOUa4qme5trX9:670Qkv5Q56CoNlpaGD3fU6Bu3RQP3PR5t60qbVVnL5Kmz3OVt724ufIjo6i53o4Ile",
                                                                      new Date(1547164363237L),
                                                                      "QoeZyxZclOHzVTJdrhl6sD09mZfrR6dS");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("96845c84-230b-4974-9ccf-7c5ba469fd9c",
                                                                 new Date(1547164366550L), new Date(1547164358301L),
                                                                 "bpf02nVMs77uud0rzuU0BDa5u3Ue7ISD",
                                                                 "A-sOxvpm7vAGPpZUMT8:4ep3J6Yz0A29Ud9LVTGn17vE7Mr4443tDwRSBKwcR3iY9Oo2n60BceAOe93F91kp2XltXopT4fsD7",
                                                                 new Date(1547164364446L),
                                                                 "sMibcjRMFv2Rt2AAM6gKDusm8gtme82e");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("21b7b873-6fd3-4ae1-9a5a-aa438d528bab",
                                                                        new Date(1547164360299L),
                                                                        new Date(1547164359931L),
                                                                        "\u001bvdrF\b]3Ñ¡\u001ef\u00166QEu]eNr\u0017å©¬/fQNmã¹š`@GXO\u00063m`]3G\u0003è?ªã¬Ž[m\\\\As66@=FNje&_8GQUL",
                                                                        null, new Date(1547164366636L), null);
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("b57811b3-d59b-44ef-9a7b-65f61ee1a118",
                                                                      new Date(1547164365667L),
                                                                      new Date(1547164363164L),
                                                                      "W2gR7028o0GQ3rv98dfAUOnv6t4VxcYm",
                                                                      "A-Tln6TeBx31aK9iiu39Fso69UJ3EsMtThJ4gsERg7o4HSZYws35:5cOD5y:0UOwH4Hlb5vX6py:IN:EV7vmj0V1t1cH:H2U4",
                                                                      new Date(1547164367125L),
                                                                      "7oHN2SxdI7MuIQMvCwNxhWchlUV30aL6");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("b57811b3-d59b-44ef-9a7b-65f61ee1a118",
                                                                      new Date(1547164365667L),
                                                                      new Date(1547164363164L),
                                                                      "W2gR7028o0GQ3rv98dfAUOnv6t4VxcYm",
                                                                      "A-Tln6TeBx31aK9iiu39Fso69UJ3EsMtThJ4gsERg7o4HSZYws35:5cOD5y:0UOwH4Hlb5vX6py:IN:EV7vmj0V1t1cH:H2U4",
                                                                      new Date(1547164367125L),
                                                                      "7oHN2SxdI7MuIQMvCwNxhWchlUV30aL6");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("006228d4-d318-4f03-8638-0d2b4ee7b49d",
                                                                      new Date(1547164360430L),
                                                                      new Date(1547164364800L),
                                                                      "r2VF0uPtNPq0zEG32q0dB5al1B2ysAJ2",
                                                                      "A-ADQg6gnz9sSW1Ogi2PR3cQyn47532M690inUnK70r664HZFN9MSEpF3z803:ZT8QpQoL3u1cTQG2HPxhChZ6aYvQXo82EHO",
                                                                      new Date(1547164358723L),
                                                                      "KCAYQQ1YasKsh4Y8YdLWEzRtN6j4MYv5");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
