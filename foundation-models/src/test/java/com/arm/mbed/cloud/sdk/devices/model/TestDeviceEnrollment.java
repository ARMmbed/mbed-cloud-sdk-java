// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("ec1f240a-2ebf-452f-8d7d-4b85a783fde2",
                                                                  new java.util.Date(1546031371762L),
                                                                  new java.util.Date(1546031367813L),
                                                                  "9N273084EwhP6bMXUJu3z6tG94866st9",
                                                                  "A-vEGdl2959MuvVLgdPDG7i065:r:R2II2g9i80D:EJ5bV36X93KY1Eit0WwbsgQdLK50RgGa:O7o3UXWstb2s45E:y:p4Jje",
                                                                  new java.util.Date(1546031369528L),
                                                                  "t76d5ZN065g7F5ce0goUGqbMGwHEUF9q");
        DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
        assertNotNull(deviceenrollment1);
        assertNotNull(deviceenrollment2);
        assertNotSame(deviceenrollment2, deviceenrollment1);
        assertEquals(deviceenrollment2, deviceenrollment1);
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("057178a7-efc1-4145-9833-7c8afc84fcf4",
                                                                 new java.util.Date(1546031373772L),
                                                                 new java.util.Date(1546031370342L),
                                                                 "KTgz2W5W75adUxFq33drjnDc5jV5xqih",
                                                                 "A-qPA307CAxlBIa2:r6N9p3hX75ee8:VP1dqA9::SWqd05G3jP6:AQXq8hEy79s8rnk5fHm0QX46KTYsI5aUyYyN6mmx4h:2U",
                                                                 new java.util.Date(1546031372551L),
                                                                 "71pkXN7H6e5v2b3M4f7JNcZx4Z976PTJ");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("fe215c32-29da-429d-bcf3-3320f81acd96",
                                                                        new java.util.Date(1546031371120L),
                                                                        new java.util.Date(1546031365290L),
                                                                        "R6JHï±ŒWHqfWl=â¯šFHè¾Žkq6Hì‚¹OBp@ï™š[N>Rî£½?>KFjì›»6x>WR:6I(%BFF6Ie^RWFCN6_J",
                                                                        "<Pvg>Kn7HKyVdv;gnLP7ä?¸@LInWppPnVk=Lydy3pG3jg@P;PynyPd?ppPvGngvv",
                                                                        new java.util.Date(1546031370107L),
                                                                        "vCF]SFVYë§©C8ãŠœVãž„cnn^nkev8wC_;â†¸n:kRYRYV\\EPVV6qcSCErYCJg5c6gV66gY");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a9a606fd-9041-46b3-88bb-336f0e5abedd",
                                                                  new java.util.Date(1546031372640L),
                                                                  new java.util.Date(1546031365104L),
                                                                  "Kj6Ecpag16wWTPYvr28a2Sxl2uB6tcw1",
                                                                  "A-Ew5dQ9c8G32TE181HvOHBliQEYB6z934abvf22eoCg03Z144AvuUq8JVPFU0t8RcOab:W0mFuK:2irf9A88r934fmMWeDg7",
                                                                  new java.util.Date(1546031367908L),
                                                                  "qH2aege7bLqCnyL2e486a6A8274iim9b");
        DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("a9a606fd-9041-46b3-88bb-336f0e5abedd",
                                                                  new java.util.Date(1546031372640L),
                                                                  new java.util.Date(1546031365104L),
                                                                  "Kj6Ecpag16wWTPYvr28a2Sxl2uB6tcw1",
                                                                  "A-Ew5dQ9c8G32TE181HvOHBliQEYB6z934abvf22eoCg03Z144AvuUq8JVPFU0t8RcOab:W0mFuK:2irf9A88r934fmMWeDg7",
                                                                  new java.util.Date(1546031367908L),
                                                                  "qH2aege7bLqCnyL2e486a6A8274iim9b");
        assertNotNull(deviceenrollment1);
        assertNotNull(deviceenrollment2);
        assertNotSame(deviceenrollment2, deviceenrollment1);
        assertEquals(deviceenrollment2, deviceenrollment1);
        assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
        int hashCode = deviceenrollment1.hashCode();
        for (int i = 0; i < 5; i++) {
            assertEquals(hashCode, deviceenrollment1.hashCode());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("f18fa0e1-6b06-41c9-a890-e84aa350d1cf",
                                                                  new java.util.Date(1546031370620L),
                                                                  new java.util.Date(1546031368106L),
                                                                  "XVtp34QX0R1tb0207rtgn4ANfL0Zf18q",
                                                                  "A-5Hz2MnXEiEqAhd6YRjbI2xEQ7h2Ua421b:I8I2lwoAjK5g1N:661I3fZ77H5hTs3HuZpRWs:cDzvb2z4gRv47zBj2voy725",
                                                                  new java.util.Date(1546031368080L),
                                                                  "qBfWP2Nsdq5739SPz6A22i3Y52UvBatC");
        DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("f18fa0e1-6b06-41c9-a890-e84aa350d1cf",
                                                                  new java.util.Date(1546031370620L),
                                                                  new java.util.Date(1546031368106L),
                                                                  "XVtp34QX0R1tb0207rtgn4ANfL0Zf18q",
                                                                  "A-5Hz2MnXEiEqAhd6YRjbI2xEQ7h2Ua421b:I8I2lwoAjK5g1N:661I3fZ77H5hTs3HuZpRWs:cDzvb2z4gRv47zBj2voy725",
                                                                  new java.util.Date(1546031368080L),
                                                                  "qBfWP2Nsdq5739SPz6A22i3Y52UvBatC");
        DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("aed6d796-291e-4d83-8fbc-70ff0b645937",
                                                                  new java.util.Date(1546031372645L),
                                                                  new java.util.Date(1546031365546L),
                                                                  "W0e041U3MO8fW4EXdB737jqCTzm21173",
                                                                  "A-P7HXR56piZsr3u2zdNxW3s1Tjs6RH2Zi07H0k64qUnVsQo0O:G5sh::9vQDtOKnv0Hlbk9O71A7I1Rh7eC:1qPnIbkbyMH1",
                                                                  new java.util.Date(1546031369520L),
                                                                  "8x0mn03uaM0HH894e4ut425I9PgAY6Kn");
        assertNotNull(deviceenrollment1);
        assertNotNull(deviceenrollment2);
        assertNotNull(deviceenrollment3);
        assertNotSame(deviceenrollment2, deviceenrollment1);
        assertNotSame(deviceenrollment3, deviceenrollment1);
        assertEquals(deviceenrollment2, deviceenrollment1);
        assertEquals(deviceenrollment2, deviceenrollment1);
        assertEquals(deviceenrollment1, deviceenrollment2);
        assertEquals(deviceenrollment1, deviceenrollment1);
        assertFalse(deviceenrollment1.equals(null));
        assertNotEquals(deviceenrollment3, deviceenrollment1);
    }
}
