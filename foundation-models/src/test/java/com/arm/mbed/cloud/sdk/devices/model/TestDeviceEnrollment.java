// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("33a820ee-f89a-48f4-a7b0-ba821f6cc6fc",
                                                                      new Date(1547489771358L),
                                                                      new Date(1547489768764L),
                                                                      "tnSHL72q59jvBtimOIICp35h0eYqx7As",
                                                                      "A-R9ndidWUSiImCS8u2zZ:o1V5Dx5e8XvrN2Mit8JRF689NrsappRcO5Wx4LKyrYQUSbHsiE:327r8Z11x46sIZhNqSJK9p:3",
                                                                      new Date(1547489768490L),
                                                                      "f6lMWHG2pn1tf8qDa2mb7qEot92ky1vl");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("b42a382b-54bf-4472-8788-5934a9fd515c",
                                                                      new Date(1547489772517L),
                                                                      new Date(1547489768506L),
                                                                      "1cf8ib0SWk5N6R7JD6Dobi01I56bB06C",
                                                                      "A-SxNSC7uxw7Y0KE:zzW8dkto325ne5n8ILR7ykmt8t77Gu43qpKqeS480RDHHx5XIt:REAA79nisF987B42V2F3lHp4601:K",
                                                                      new Date(1547489769501L),
                                                                      "m8X8sRKyucSXNlWm4XnIde5E2dt62g2J");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("b42a382b-54bf-4472-8788-5934a9fd515c",
                                                                      new Date(1547489772517L),
                                                                      new Date(1547489768506L),
                                                                      "1cf8ib0SWk5N6R7JD6Dobi01I56bB06C",
                                                                      "A-SxNSC7uxw7Y0KE:zzW8dkto325ne5n8ILR7ykmt8t77Gu43qpKqeS480RDHHx5XIt:REAA79nisF987B42V2F3lHp4601:K",
                                                                      new Date(1547489769501L),
                                                                      "m8X8sRKyucSXNlWm4XnIde5E2dt62g2J");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("5e8be752-b6ef-44f5-93ee-29189431a158",
                                                                 new Date(1547489768104L), new Date(1547489764577L),
                                                                 "i79pLQCU9YcBL7G6ZJE1A09OVqy58Q91",
                                                                 "A-5V42FYoQg25F8TcTyl:RyDzgkmFThFjfwtIT48tsVow468wr8FYLdkimrS5t4:fTy5:4KC2LI30RLdZzr990ErS6h1CUN5u",
                                                                 new Date(1547489769104L),
                                                                 "746iHo6tMW5LxBdYWTx3WpBcF3o5mh5s");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("12f1a2c1-de93-4964-97d8-a6ea01c06a8e",
                                                                        new Date(1547489764886L),
                                                                        new Date(1547489766952L),
                                                                        "ifl\u000en䗶Bq!VᮛJl;bqsiBqsOi:uf=<Rufymif]qBfff%RyyOOivRBs@xGKsqBliKxs",
                                                                        null, new Date(1547489763279L),
                                                                        "qTwms8\bJf;PShwVLWwfwh\\\\88f7^LJkNdT32LGJwoJJLN3@TkLhWoDGR豙2Ll3o8DJ");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("699add09-cd08-4b9a-924e-03e3c07e4499",
                                                                      new Date(1547489765245L),
                                                                      new Date(1547489764399L),
                                                                      "5p0bPW50eE5iosXF9ySHl7d9d326N822",
                                                                      "A-Iqb51m7R7Vlc6H7bW15t4uh2Icw00x:mOOjn17IzxmIl9Ij8Ug0C:vI64N8pM19r3CxKy6F8mqk1:L:YZ08J440cQA05tnV",
                                                                      new Date(1547489772379L),
                                                                      "yrKaqNYRdb41cfRAiYgr17lE4GLU7iYm");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("699add09-cd08-4b9a-924e-03e3c07e4499",
                                                                      new Date(1547489765245L),
                                                                      new Date(1547489764399L),
                                                                      "5p0bPW50eE5iosXF9ySHl7d9d326N822",
                                                                      "A-Iqb51m7R7Vlc6H7bW15t4uh2Icw00x:mOOjn17IzxmIl9Ij8Ug0C:vI64N8pM19r3CxKy6F8mqk1:L:YZ08J440cQA05tnV",
                                                                      new Date(1547489772379L),
                                                                      "yrKaqNYRdb41cfRAiYgr17lE4GLU7iYm");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("0bf0374a-f479-46e2-9de5-c74f47b47fab",
                                                                      new Date(1547489762959L),
                                                                      new Date(1547489769863L),
                                                                      "1NlHfCN1L0Hf0zOQ1F3SS26Z6Acyeh43",
                                                                      "A-r88y4o12F0Ql49AwL:PQ7MOmevZkXt1:V2IaJu2gU4RG:O3j1S4Kyb75w:ml744bo0MU2Bs29k:rLuCm2lPSryNB9:xVbbV",
                                                                      new Date(1547489765943L),
                                                                      "c4hV15tI3j5S9aF5p71JiL4Ty4bXx0GS");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
