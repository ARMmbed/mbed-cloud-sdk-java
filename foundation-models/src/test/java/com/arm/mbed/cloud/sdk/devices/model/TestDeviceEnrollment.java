// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("64cb33dc-b352-40a2-858b-a22285f69cf8",
                                                                      new Date(1559560673207L),
                                                                      new Date(1559560666831L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560663883L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("2fb011e4-a87e-4e66-bbb9-b84a6c8c4fe6",
                                                                      new Date(1559560669200L),
                                                                      new Date(1559560665460L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560667646L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("2fb011e4-a87e-4e66-bbb9-b84a6c8c4fe6",
                                                                      new Date(1559560669200L),
                                                                      new Date(1559560665460L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560667646L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("8609b214-9023-478a-86d0-96975cb78c45",
                                                                 new Date(1559560672658L), new Date(1559560665127L),
                                                                 "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                 "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                 new Date(1559560669451L),
                                                                 "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("fae9a2bc-aaec-40c5-885a-dbde1db52950",
                                                                        new Date(1559560667947L),
                                                                        new Date(1559560672792L),
                                                                        "jiUe2dN选fjR4RdLQRf4uLQ>V뜄w@`Rwxxh잚V‚Rxwu^eJL2Ni4ZnRd4୛bOORON:L檌",
                                                                        null, new Date(1559560664998L),
                                                                        "jiUe2dN选fjR4RdLQRf4uLQ>V뜄w@`Rwxxh잚V‚Rxwu^eJL2Ni4ZnRd4୛bOORON:L檌");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("476cf171-4351-4a93-af84-53b0cec6798d",
                                                                      new Date(1559560666520L),
                                                                      new Date(1559560667325L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560673092L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("476cf171-4351-4a93-af84-53b0cec6798d",
                                                                      new Date(1559560666520L),
                                                                      new Date(1559560667325L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560673092L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("458ee04d-4a53-4824-929c-31f42e26e820",
                                                                      new Date(1559560666420L),
                                                                      new Date(1559560669180L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58",
                                                                      "A-2O00JVO7fCr6j075ljGiN64I6nUhKg4R39y133pzjc8dK778csEFN9OZ9G86c0GwvXJCf27CXL83V898M53m072B3Ci3rv9",
                                                                      new Date(1559560673243L),
                                                                      "W9tcgW3936EDHKP5708kIFGl3MSyvP58");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
