// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("0a9933fd-9c63-4eb1-b905-935298425bbd",
                                                                      new Date(1559288263195L),
                                                                      new Date(1559288253704L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288259417L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("894c6c1d-bcdf-4cbb-af90-4d9eb734f5e6",
                                                                      new Date(1559288262803L),
                                                                      new Date(1559288257184L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288260196L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("894c6c1d-bcdf-4cbb-af90-4d9eb734f5e6",
                                                                      new Date(1559288262803L),
                                                                      new Date(1559288257184L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288260196L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("667fd706-da66-4892-9937-e4534558fe6c",
                                                                 new Date(1559288254021L), new Date(1559288256125L),
                                                                 "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                 "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                 new Date(1559288260364L),
                                                                 "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("0d1c2305-bd5d-4fec-a6be-fb67380109cb",
                                                                        new Date(1559288260318L),
                                                                        new Date(1559288261893L),
                                                                        "QXU4QSx1;m^rkQl?`i13\u0017FL@Q1xU=BG4?JXFI_F%LkL]m>Qxil\u0010yL>LBq\\\\yJ斥1iS",
                                                                        null, new Date(1559288254083L),
                                                                        "QXU4QSx1;m^rkQl?`i13\u0017FL@Q1xU=BG4?JXFI_F%LkL]m>Qxil\u0010yL>LBq\\\\yJ斥1iS");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("837b76e3-1ceb-4cef-a6e1-2e5fae0ec519",
                                                                      new Date(1559288254921L),
                                                                      new Date(1559288260635L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288254659L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("837b76e3-1ceb-4cef-a6e1-2e5fae0ec519",
                                                                      new Date(1559288254921L),
                                                                      new Date(1559288260635L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288254659L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("1ddb3544-745a-44aa-9454-99531b41d856",
                                                                      new Date(1559288258525L),
                                                                      new Date(1559288255083L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E",
                                                                      "A-ze9g8IbiLW4FA8i:Vj5mOS09Xk9u0bWbWpz:n:J9znkA3dPnqIFK88p33551fKOOFinLA23qHS2ML626sxJtH3V2:15313l",
                                                                      new Date(1559288262671L),
                                                                      "Won0ttaPbMMAzvYDW26jR6jh0HuhKw2E");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
