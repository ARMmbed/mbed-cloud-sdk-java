// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("f239c5b5-2957-471a-b74a-acea978974b4",
                                                                      new Date(1547225115574L),
                                                                      new Date(1547225117002L),
                                                                      "Pjr7kVn9dj3Tc1xu5oXFiaau1w8Dtz38",
                                                                      "A-5VZO7pgg4r88hv2XmtehmMBzRwE74bshy9mAdZ021Wr02002jSM54OW9g3Y4fa0cL152YpY5OlI:lB4IOSP:b2O3L3A:t2Q",
                                                                      new Date(1547225117962L),
                                                                      "KYZ99fjcmg4njHNd061c65v0OVyxDs2w");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("85c32c52-ec64-4eae-ba43-ca45c7dd1869",
                                                                      new Date(1547225120026L),
                                                                      new Date(1547225118993L),
                                                                      "TVv9h6u19scr7Yaz21Ja6q1N6f2Xg8D2",
                                                                      "A-QV0csNWUn084s1caD1Fx9R363Zh1K5514516GIplF3vo:DNjIj3F4E9y4ydAR:g92I40s28:KfVjCUr5v39152FLu368U:7",
                                                                      new Date(1547225121065L),
                                                                      "xz1mg5uqxbC8dmZ2Elm72UwloVwJE8uq");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("85c32c52-ec64-4eae-ba43-ca45c7dd1869",
                                                                      new Date(1547225120026L),
                                                                      new Date(1547225118993L),
                                                                      "TVv9h6u19scr7Yaz21Ja6q1N6f2Xg8D2",
                                                                      "A-QV0csNWUn084s1caD1Fx9R363Zh1K5514516GIplF3vo:DNjIj3F4E9y4ydAR:g92I40s28:KfVjCUr5v39152FLu368U:7",
                                                                      new Date(1547225121065L),
                                                                      "xz1mg5uqxbC8dmZ2Elm72UwloVwJE8uq");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("701598c1-e1fc-4bea-bdf3-4e6974434e59",
                                                                 new Date(1547225120734L), new Date(1547225122523L),
                                                                 "i3G7Jrz6UAV99gDuDqRm7RKzuDKc4w5Q",
                                                                 "A-813:6x325i1dUwetyH:r:R0vm768lbZUL50exd95n8c0ebc337A7UTulGf:407x95MAt43Re5O2gM5l9lUSZQKpaYwkBcT6",
                                                                 new Date(1547225120334L),
                                                                 "T5lEz1H7VUICLFaeT5Sf63f82T2TFz8C");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("211754d4-7fb8-4a01-b2fd-4a54dee5f329",
                                                                        new Date(1547225117826L),
                                                                        new Date(1547225118863L),
                                                                        "Yr\u001eFR4E7 kTwimy7\u000eYdDMVdmA:%72ryyä•¡7ewyRKyY=y`N7é«¨4jwrï‰¬d1rïŸ”,4\\\\wF2Rc",
                                                                        null, new Date(1547225115568L),
                                                                        "_uIqX[ê¨¤hZ\u001c\u0004\u0006F.XIoI,ïµ†mIF^LbVXMrI\\\\rF:QnFX\u0013Lmäˆ“n[:[m[Å®Gá´´Ð„qXLmtâ€®á?´a8G<");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("afdb19d8-007c-4765-b7c0-d08df4a7dae9",
                                                                      new Date(1547225115103L),
                                                                      new Date(1547225116717L),
                                                                      "79DuulxeYyR0E32t9J392JW2Tmm969JY",
                                                                      "A-GU2L5YRKJ9M8YrAmCnULPZ89f83yx1BlO7445Rt7Q8dsAQS6gw86WyCQPazF:rqjsJY6Hcki2oqU:eM60GMuL5GkUVSvQ4t",
                                                                      new Date(1547225117752L),
                                                                      "6Ky414bYfEeE39LX3tPa8V4vx231H41g");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("afdb19d8-007c-4765-b7c0-d08df4a7dae9",
                                                                      new Date(1547225115103L),
                                                                      new Date(1547225116717L),
                                                                      "79DuulxeYyR0E32t9J392JW2Tmm969JY",
                                                                      "A-GU2L5YRKJ9M8YrAmCnULPZ89f83yx1BlO7445Rt7Q8dsAQS6gw86WyCQPazF:rqjsJY6Hcki2oqU:eM60GMuL5GkUVSvQ4t",
                                                                      new Date(1547225117752L),
                                                                      "6Ky414bYfEeE39LX3tPa8V4vx231H41g");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("951d2fe6-e333-463c-8214-2af8450192ef",
                                                                      new Date(1547225118544L),
                                                                      new Date(1547225121238L),
                                                                      "0F5u7O4JzeA892FK4G8V495Ms48jSI3y",
                                                                      "A-0J185cJW9WGy80rewEU407epX0N3zF6D74l6S6VVc:oCCD8e5X2kqJuPeJ:dFY04yah1Z:C75jZ8wUQglm5CKmH0HfbOYKn",
                                                                      new Date(1547225116360L),
                                                                      "6QGg79wTREt6o1tVJciN9e6RW5OpXySU");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
