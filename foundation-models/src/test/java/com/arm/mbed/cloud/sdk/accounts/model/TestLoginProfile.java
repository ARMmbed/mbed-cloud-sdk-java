// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("5a85b487-50a9-4f82-b8d9-39ae094a3ec1",
                                                          "5f3c11b9-256c-4812-ba6c-ccca12b67515");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("5867cd1d-77f3-4953-a249-78e5f4b8a447",
                                                          "32ce8666-b7bc-47b0-be40-7b8c3b971e75");
            LoginProfile loginprofile2 = new LoginProfile("5867cd1d-77f3-4953-a249-78e5f4b8a447",
                                                          "32ce8666-b7bc-47b0-be40-7b8c3b971e75");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("5b5f3291-a12d-4e93-a47e-d44f9849be11",
                                                     "ea3fedc0-8bb9-4625-a49c-cd8c1a6afa5c");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("82ba30db-6eb3-446d-b590-d6752b5faa86",
                                                          "0da27cfd-fe94-4267-9e3a-c9a958b5de74");
            LoginProfile loginprofile2 = new LoginProfile("82ba30db-6eb3-446d-b590-d6752b5faa86",
                                                          "0da27cfd-fe94-4267-9e3a-c9a958b5de74");
            LoginProfile loginprofile3 = new LoginProfile("692db03b-64bb-413a-9c5c-44f3c52a606b",
                                                          "f7520b80-e748-47f9-9f1a-a0e5e590a7f6");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
