// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("2fa2db44-1935-4d82-a5a3-537faee27e92",
                                                          "2f88a103-284c-41ce-991c-9eed56fb58dc");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("57ff36eb-0c69-4a0f-9f2f-5e80862c62b9",
                                                          "13bb4603-8a14-490b-ba23-6d4bf44eac78");
            LoginProfile loginprofile2 = new LoginProfile("57ff36eb-0c69-4a0f-9f2f-5e80862c62b9",
                                                          "13bb4603-8a14-490b-ba23-6d4bf44eac78");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("59a20cfc-dc1a-4a18-8604-9efa5ce22468",
                                                     "3a9524cb-1e5e-4cf8-bfaf-ba3c76fb4be1");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("207c88d5-77ac-4247-9894-e8f5507f3c98",
                                                          "b5597a39-a1f3-4dc9-b580-a82b90e4cf86");
            LoginProfile loginprofile2 = new LoginProfile("207c88d5-77ac-4247-9894-e8f5507f3c98",
                                                          "b5597a39-a1f3-4dc9-b580-a82b90e4cf86");
            LoginProfile loginprofile3 = new LoginProfile("227ee3cc-3988-4506-b743-48339120fadb",
                                                          "89026afa-abf6-4509-8e05-d7567624d49f");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
