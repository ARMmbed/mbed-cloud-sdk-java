// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("a05b4bdb-e9e0-4a05-9dda-263ad8c15586",
                                                          "5ca0bae7-6098-408f-962e-12c8c5197789");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("72404603-c88b-46e0-99b6-94abdd8e48e8",
                                                          "6ce1ae0e-b22f-4c0a-a9f1-faa1beb663ab");
            LoginProfile loginprofile2 = new LoginProfile("72404603-c88b-46e0-99b6-94abdd8e48e8",
                                                          "6ce1ae0e-b22f-4c0a-a9f1-faa1beb663ab");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("deb6466b-37da-408d-9f5d-95d1d5cd4f24",
                                                     "d33fa578-fede-4355-85f1-1cd2e54834b4");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("bf099288-3b37-4547-9fcf-7ebe56726a26",
                                                          "3f35eeae-8c60-47a0-bd5a-549982bc0c5d");
            LoginProfile loginprofile2 = new LoginProfile("bf099288-3b37-4547-9fcf-7ebe56726a26",
                                                          "3f35eeae-8c60-47a0-bd5a-549982bc0c5d");
            LoginProfile loginprofile3 = new LoginProfile("0bb1b18b-50a3-4d7a-b7bb-957e6436a506",
                                                          "98627d1c-5b30-4327-8cfd-13ded55a8ab8");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
