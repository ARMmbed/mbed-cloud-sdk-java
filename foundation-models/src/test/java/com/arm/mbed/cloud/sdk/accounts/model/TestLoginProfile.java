// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("41c443b3-68e1-40e3-b908-fb7b87646059",
                                                          "93d9a2c3-d51a-485c-a486-f5ea435fb91e");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("e6409dc4-db90-4665-978a-78edaed1cea4",
                                                          "effa0791-f528-4470-9c29-9aa83aee55c8");
            LoginProfile loginprofile2 = new LoginProfile("e6409dc4-db90-4665-978a-78edaed1cea4",
                                                          "effa0791-f528-4470-9c29-9aa83aee55c8");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("9b16e273-2b81-4f68-956d-7f86e56b5f60",
                                                     "4ed800e8-5402-4777-8199-3f9ebdefc174");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("cef3c5ca-5733-4d9f-bd14-ec1c8ca0ef38",
                                                          "44ef3d33-2fcb-47dd-b7e9-7d28492ab608");
            LoginProfile loginprofile2 = new LoginProfile("cef3c5ca-5733-4d9f-bd14-ec1c8ca0ef38",
                                                          "44ef3d33-2fcb-47dd-b7e9-7d28492ab608");
            LoginProfile loginprofile3 = new LoginProfile("e60485d7-4137-463e-a95a-d0e284375455",
                                                          "5eab540e-7c6f-450a-ba1d-f144e711f1e0");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
