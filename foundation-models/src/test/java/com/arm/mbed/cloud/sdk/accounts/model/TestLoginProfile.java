// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("c3121971-e2a5-4c34-927f-a6534d6d4009",
                                                          "f06905e1-b032-4623-aaa1-2cf3a77538a9");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("1fa829c4-a3d4-4b67-b71a-d176cbd15094",
                                                          "f16b0d37-0132-4e21-9ad9-d4b955c686f5");
            LoginProfile loginprofile2 = new LoginProfile("1fa829c4-a3d4-4b67-b71a-d176cbd15094",
                                                          "f16b0d37-0132-4e21-9ad9-d4b955c686f5");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("e695b349-5a4d-4d65-99cd-dee9df850108",
                                                     "b9ed274c-330b-49d4-bc75-5f9653ef4076");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("fed16d87-ea67-441a-aea8-8523c2718a0f",
                                                          "df12ca03-5769-476f-af1e-52b4fe8e5bcf");
            LoginProfile loginprofile2 = new LoginProfile("fed16d87-ea67-441a-aea8-8523c2718a0f",
                                                          "df12ca03-5769-476f-af1e-52b4fe8e5bcf");
            LoginProfile loginprofile3 = new LoginProfile("1d7d1168-4178-473b-829c-1ba563fb4970",
                                                          "2656fe93-b028-4cac-8611-8244d161c02c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
