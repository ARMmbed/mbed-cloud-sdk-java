// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("8f03bd80-3778-4bd7-9d8d-2ab983013f26",
                                                          "94575a17-d1a9-4af0-ae5c-2b72a1f0df68");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("9a2bc9e0-5883-4a4e-acd5-b9cb710477a9",
                                                          "81995c38-30a3-4973-9066-f57bda6f55ec");
            LoginProfile loginprofile2 = new LoginProfile("9a2bc9e0-5883-4a4e-acd5-b9cb710477a9",
                                                          "81995c38-30a3-4973-9066-f57bda6f55ec");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("686d082e-3359-4745-9dc5-77ba389f72af",
                                                     "0f2be39d-7594-4b79-8801-a062c997caca");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("146c7c94-234f-4d68-bea1-097206b35b92",
                                                          "8263bb4b-546b-40eb-84e8-8df5f3ab540e");
            LoginProfile loginprofile2 = new LoginProfile("146c7c94-234f-4d68-bea1-097206b35b92",
                                                          "8263bb4b-546b-40eb-84e8-8df5f3ab540e");
            LoginProfile loginprofile3 = new LoginProfile("a0d8cb8b-3820-4dca-94f2-9f858db84aaf",
                                                          "43bd262b-7040-4b9e-b20d-4d5b7e298dd7");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
