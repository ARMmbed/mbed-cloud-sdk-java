// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("47cb79d2-0999-4c19-83c7-348dbfba7adf",
                                                          "bc124208-5729-4a83-85a3-b4d3e6490424");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("b11edb06-1efe-405a-ab7c-fa7b217a048c",
                                                          "7221f7e4-f2cb-4ff5-97db-9f073117a6fb");
            LoginProfile loginprofile2 = new LoginProfile("b11edb06-1efe-405a-ab7c-fa7b217a048c",
                                                          "7221f7e4-f2cb-4ff5-97db-9f073117a6fb");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("1674faf0-132e-45d8-94d3-825ab9862a5e",
                                                     "96ec0fba-9a98-40b4-a880-07b5c90b5d6c");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("7e520f30-b738-4c94-99c0-f7f200c70b43",
                                                          "14a60212-3c4d-44ec-a034-02db92920ae0");
            LoginProfile loginprofile2 = new LoginProfile("7e520f30-b738-4c94-99c0-f7f200c70b43",
                                                          "14a60212-3c4d-44ec-a034-02db92920ae0");
            LoginProfile loginprofile3 = new LoginProfile("dcdc91df-ca9f-4db1-8897-80e4ecc5e074",
                                                          "42eabcdc-cba4-411d-a8cf-46263cf4bd82");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
