// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559745302078L), null,
                                                       "58c6d22e-7873-4079-8b51-7cc5bdcbd19a", -109,
                                                       "4fbf7020-96a4-4034-b95c-3e9c64df28c8",
                                                       "9e0f2fa7-22f7-4597-a32c-7676572ca8e9",
                                                       new Date(1559745301676L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559745303316L), null,
                                                       "ce152993-a5a7-4345-ae17-1a92f2da3003", -51,
                                                       "0ebfdacd-d073-4686-b35f-98fa6933a6f0",
                                                       "ace65785-6b0d-4a31-a33f-7d694232b7c2",
                                                       new Date(1559745297930L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559745303316L), null,
                                                       "ce152993-a5a7-4345-ae17-1a92f2da3003", -51,
                                                       "0ebfdacd-d073-4686-b35f-98fa6933a6f0",
                                                       "ace65785-6b0d-4a31-a33f-7d694232b7c2",
                                                       new Date(1559745297930L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559745296692L), null,
                                                  "30a22d78-d6b6-4182-ad68-c75559011b3b", -56,
                                                  "c454f96e-7374-44b5-b50e-15f7ad2d82bd",
                                                  "bd2e5b70-a33c-4580-b7e3-e38313c9e59f", new Date(1559745301978L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559745301108L), null,
                                                         "9723a473-2aef-466f-8ea9-388d24754a2dfbafc156-175a-4e8a-9bd3-4e31933b9223ebded702-efb7-4383-a0b6-d8df1c4a1251a3577b05-51cb-46aa-8ef0-d702b5e6384f162cd3ed-2da4-4cb9-b3f5-ea19f7cc94763292c9c8-7c34-4ee3-a58f-7c7ee0897e20e09ae3f6-9c7f-4e8a-869e-4784009a623a30a8f24c-6d44-4440-968a-6bb941bd7c7f8e350200-d3ee-4cb6-b7f6-eea009b015cb4ab2ce07-15ed-4cdb-b939-b20e4ade36481170268e-cbaa-4a44-acfc-076bc55b1389faab741a-397e-4aa7-9287-b57c85859358509d0e4e-d190-4c3e-a307-1c3cb8fe94fa0fc25982-d3b1-4c97-9fe2-1cb977e297b6c817fd9c-10f8-4e36-b272-f13eb330d8a6c922a153-5887-4241-b36e-00585c64a8dc5a14f2fb-82c0-4061-a88b-15536555bdff0bc4f080-182a-4250-b53a-fa4595007760917e00ee-77cc-436d-a212-cbbfdadb2de2d4666965-e45b-4b6d-9dc1-947713c4b37516c2c808-58a7-4686-b4d8-e40dc80f9d7ff506115e-fa55-4a38-b949-90a6bf43efdf56e616b5-9989-422f-809c-72765c8238f7cc94525c-c005-4446-b955-a30b0838641f1caaf62b-329d-4d2d-b99c-ed53a67844d2c5b300ef-d2cb-4df3-a256-f0b99c77212be153e837-0372-44b3-bc94-d21bb6c0a28c97c90967-987c-437a-89df-63622581042f05c5b165-5ecf-49c6-becc-46eaa6a2a63db183b852-c94e-47cb-895a-4eb3845db7b631a52ea6-f06f-4178-ba24-208a6d52fbeeea7120f9-9f94-45d2-9b3f-de73ce9b9f119a25479f-0fbd-46d6-ae5d-54c13f5bd18a9d758a5e-3c44-440c-9516-91f8ead3d530fd1f5a04-78bb-423a-9726-a6661845b2ff8a0277a2-d788-4a39-b4bc-896fe91d038633ceb8ce-794b-47c6-8ec5-10c627796f5cfbc7cbaa-e572-4348-93a6-d1f1ae9dd83eb737b88a-08c0-4998-a655-4b7ccf69f917103e7219-a76b-44c2-a06e-3c79c96cf14b1591f38b-4818-4aef-9348-f5fec1da893713df7e52-9f63-4b7f-87ac-6c1ddb29961f246f6b70-78ff-42b9-92c1-52c81c9af3239c469b34-0324-4379-9ba8-eaf624ee46a7b40be78d-2aa5-4e9e-bc52-0206734c29b877b7c1ae-f66c-445b-b8f5-63db5040d214ba99ee54-fae4-4f74-8fc2-834a0792900929cce6e4-bf5e-4c05-a700-dec01a8d1063aa3b0604-884d-49a6-89e9-3ccfcdced1d68fb7b60f-4d5b-4a2a-b44a-3eada9b146d8974d6d92-dbac-4c66-a33d-5852c5f7600b32c2d478-1283-466f-9416-85193c450c1ac8d7e364-e2dc-4f9f-a8de-5cf73e3265c5e2feb06f-3319-488e-ad2e-d028a1065b4e23bab6e9-bb01-42e5-869c-edf7a77859dc71b670e6-1390-45f8-a46b-45fd3fa070cd",
                                                         -117, "f8ced804-cf9f-4308-b954-664c160f30ef",
                                                         "7d3f7264-3bbd-479e-9c16-f20402b5f7a89f162898-9ff0-4c60-a2bb-035db892dc2f36faa9bb-f580-41b4-b83b-c680e90abb0ea27525fd-210b-46f6-98bd-9db6a4bfe722",
                                                         new Date(1559745296113L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559745298528L), null,
                                                       "430c5014-060a-429d-b12b-57c025c3c716", 94,
                                                       "efb4d716-f9a0-4d38-9369-50591acf6233",
                                                       "1ca1f2ea-9cad-42a1-bc87-0cf24f3708b8",
                                                       new Date(1559745301684L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559745298528L), null,
                                                       "430c5014-060a-429d-b12b-57c025c3c716", 94,
                                                       "efb4d716-f9a0-4d38-9369-50591acf6233",
                                                       "1ca1f2ea-9cad-42a1-bc87-0cf24f3708b8",
                                                       new Date(1559745301684L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559745295059L), null,
                                                       "5d753f4d-690d-4ece-832e-40b7a99fcc50", -41,
                                                       "efc6c1a9-5f4b-40fd-8ca4-1029425b108d",
                                                       "a9cf7a1e-a541-4d46-80ff-f8de273c8066",
                                                       new Date(1559745295005L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
