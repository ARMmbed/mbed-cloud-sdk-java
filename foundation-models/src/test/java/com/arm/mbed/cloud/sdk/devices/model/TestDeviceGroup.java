// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559655035122L), null,
                                                       "761f16be-c54b-47e8-a1d9-902e9fa0fddd", 79,
                                                       "c0cc6aa8-d6d3-4df5-bcc9-09d143c83656",
                                                       "c956ba53-86dd-416a-a491-a87ed1c4f1c2",
                                                       new Date(1559655033953L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559655028044L), null,
                                                       "d65ca6ce-fa8e-44f1-b423-a1ff249edfaf", 94,
                                                       "d03ba72a-9266-424b-9631-55f19bce1f27",
                                                       "91af804a-eb11-4daa-a207-9b946f62a03e",
                                                       new Date(1559655036079L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559655028044L), null,
                                                       "d65ca6ce-fa8e-44f1-b423-a1ff249edfaf", 94,
                                                       "d03ba72a-9266-424b-9631-55f19bce1f27",
                                                       "91af804a-eb11-4daa-a207-9b946f62a03e",
                                                       new Date(1559655036079L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559655033065L), null,
                                                  "8084f3c7-4796-4cbf-ae1c-4ef846bb698f", 49,
                                                  "14949e2c-d421-4e09-81f3-b8a589e1fa78",
                                                  "2dfd765d-cf95-4ea3-ae65-61715ac0e0f9", new Date(1559655027349L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559655030747L), null,
                                                         "31c0b6c4-a8fb-4190-9653-1ad05a9b8a4ee2b14199-cad4-46b9-b475-685c826ec567bd6a126c-d991-4436-9a93-a5d7139fb564564718d6-2973-4854-ac72-dce7305ed0b1aeee3373-68ee-4ab2-9180-a6f854067f44ecf4a3a7-813f-4669-a09a-c6d13e7eaed552f4694d-ad64-442b-84de-0395cff3433126a58746-0ba3-4998-b9b1-cd926be674cfcb46b0f8-3d3f-47a3-b406-d5c4498136356b4a0917-556d-498f-901f-1c5d657f09999ede2913-0604-4a6e-8951-a51535eea3839de08018-86e5-41a2-b3eb-a6c50e1e146d378e990d-89cc-406b-bad3-79897f0dbee50a7f2253-0c7e-4ff7-8e44-d88489d53750170db7a7-04de-4ca5-863b-6789619905a04c13b228-2d6e-4d23-a636-1fcf81601788337e458d-e85b-4506-af3b-db62cb85b3164ba4497d-381f-4aba-8634-5cb03d152179becb63af-f760-4cef-a6e3-3d23eab1d3230f3c37ba-d3bc-4afe-8b85-ceeef88929de15b69306-6d9a-499b-81bc-19e5fb3ddaa01511348d-e878-4d09-b9b3-4c29e1c5b64d2cbc62bd-0c3f-4c0c-b2aa-d764bbc3e1b70648aa7f-dc0f-4001-a7d6-5dbcbe5dc236a9e14fa8-438f-43de-b804-bbd880a855662ba3076e-a987-44e6-a720-a9411f7d8378e21c2e07-0938-44d5-bbfa-0eb0136ea53d9911a995-c20f-4282-888e-654496baafd9ca099ed8-d0d7-41fb-8108-9fca7243f988cef1adc1-cf3f-4fe6-a7a2-84d60136ee905635943c-150e-4c32-94be-2574600eb311643fb011-b1d2-4320-809d-0fc6f8242897201ad459-a63a-4e34-950f-05d8585937f98f5a679f-8e22-4e15-ae54-426895ddb6e1da80cea2-00d0-448b-aacd-edf22b688b0ca17ebf6b-a17e-40d3-b04b-7e2b1b3df187435b5df4-6204-4878-8cc5-050b9ba6ab01042480de-9f3a-4796-a854-a5a4717f9baa0df7463b-c725-4522-9e24-ff0eb9a9d750797524b8-a812-49b4-b2ae-1b2185a6916aeb2349e6-5f62-405b-a5f9-f12ff59383f12731bf69-ba6a-4db9-b8b2-ce5bcfbfe85d84d345e9-daef-49fd-8565-109ab7224dc1024d414e-41c4-4e63-8f6f-986de34d9904fb69e4ae-754a-4e43-a333-d52efaeaa528c4aeb413-01ea-46a0-a51e-6251f60aebf1bede9117-cce2-4119-8576-abbce6734c81ebe3601c-0a14-430b-a627-851c6f07f709f0dcab05-fb86-4835-841e-152daa46cd7c9a8e434b-be05-4107-b322-79d06ebe859c8b0ea6b8-f243-454e-ac0f-cec5618ae2b9ac85182a-0717-411c-a2c8-41b9b1af37af7cfd0a9f-540a-42ba-aa24-18b07b8c50e2d0e76a8d-4e60-44c3-9ead-6d1bdc18777530e45f0b-7ccb-4d1f-887a-346329216580b0620b0b-c39d-424a-aefa-4705f6c048f0",
                                                         88, "768dbfb1-7056-48e0-827f-03bfb369c442",
                                                         "5758903d-267e-4bac-8c37-4adcf1e722cff4344924-b701-458a-85b0-f688db9a49c7dff74204-6e88-4c66-b71e-3cfa294f883e1fbf92b9-dacf-42c9-8fc4-8ca528989278",
                                                         new Date(1559655035238L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559655027664L), null,
                                                       "8a0340ef-bcc8-47f9-aa68-2d2db39acebb", -89,
                                                       "7add2a00-15b9-4334-bc60-436248b0555a",
                                                       "57ee83ed-cabf-4e79-ad53-376621debab7",
                                                       new Date(1559655031943L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559655027664L), null,
                                                       "8a0340ef-bcc8-47f9-aa68-2d2db39acebb", -89,
                                                       "7add2a00-15b9-4334-bc60-436248b0555a",
                                                       "57ee83ed-cabf-4e79-ad53-376621debab7",
                                                       new Date(1559655031943L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559655036142L), null,
                                                       "213de206-ec8d-41cd-b279-4ad76b58f64b", -47,
                                                       "5ccd3431-7073-4767-9828-39aedb61e43c",
                                                       "6e0cdcb6-29ee-4026-a518-364adde2a1a0",
                                                       new Date(1559655034912L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
