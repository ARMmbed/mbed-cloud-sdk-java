// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559560664962L), null,
                                                       "9f205932-5546-4226-b1e7-3350b8c6d8ee", -61,
                                                       "ce86e78e-66fe-475e-b494-b9763084a2f7",
                                                       "e5a08385-3755-4ed5-963c-b2faf46efcee",
                                                       new Date(1559560663635L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559560667047L), null,
                                                       "211678db-3da8-479b-ba4a-aed1fb5d87d3", -121,
                                                       "79b865f4-c67e-4453-8dce-c9d606d1b2ce",
                                                       "f4703c2c-378e-4a3c-b338-bf7067d1b932",
                                                       new Date(1559560665723L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559560667047L), null,
                                                       "211678db-3da8-479b-ba4a-aed1fb5d87d3", -121,
                                                       "79b865f4-c67e-4453-8dce-c9d606d1b2ce",
                                                       "f4703c2c-378e-4a3c-b338-bf7067d1b932",
                                                       new Date(1559560665723L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559560669524L), null,
                                                  "7740968d-9431-49b1-8f8e-75beab8d319b", -4,
                                                  "685c59d5-5918-4c2a-890c-d1fe9dd3056e",
                                                  "b7362a0e-4e9d-4008-a638-1f5cdb3cf126", new Date(1559560666778L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559560671756L), null,
                                                         "56b5a144-724b-4e85-9957-9553299e2ef76892ae6d-616e-4d1f-82f1-7171c94239794fd995bb-a6d4-420e-a8da-685333bfbebe62d5f378-77c8-4b35-bd14-566f8e27ac5f8fec482f-c125-4aba-9e9d-a8a46946aea722658730-6ef6-46c8-b170-080c61590bccafd83a95-4993-40ac-9c82-07a266f9286c66aa7ee3-0fec-4be4-991d-cb3463229d2062a3cc5b-2d24-4e58-9a10-3c7ee11953cdc81fc4b6-30f6-470c-ac5b-219c50bea68ab9e738a3-eac4-4e4d-8bc1-92f701d729308d9b5a58-826b-496c-b9fd-06292ca2ff858d563228-5d34-4182-8f8f-d7ce1ca40ca642ec59f0-776e-4762-8068-197394a176c8549973a8-cb54-4916-96ca-965c9ef8db609fcdc207-f953-4212-8695-5d756b61789c340e6ab9-0ed4-472b-a433-e9e4680f6921d38d6c81-53a3-488d-a88b-6fe9e879cb7d84ebbb5c-2d7f-4d34-b396-90df5a3e367a8f943091-5a19-4eb7-86b6-22f003a50c1361eb57cb-3cc1-464a-92f0-dfbf01e740168a30dbff-113f-4e32-9406-cec1215efb1e50d824b0-5d23-44aa-b8b8-5ee515c8c95c1ddda9bf-6615-4cf0-bb45-1416d50faac51cd5cfbc-4a64-4a63-b011-b64598efac7c63a3da73-666b-469e-86fa-9fbf10894e23bc890bbc-5b02-4f85-a1e1-53ccda9c88825a0d1000-778d-42a1-823b-fbb7a5368a78b740a627-4be8-4dd5-a6fc-4cd0ab09438db70029bf-5f49-45c0-8523-e99ec0944b563bff04a0-3a72-46b6-b797-3983e90fae6221b9f787-f162-4ac4-940f-540adeb36b5987c7b316-30a3-4216-bec3-0b03a3ec280fcff55958-d7e5-450a-9f56-0bb0e88888b5bcc98e3c-4932-4748-943e-0ad826c308025bd2ce11-27ed-4c77-b441-740e971370852b4fc2e0-af4e-4d63-9b26-8c369d5ffc8bf3782a45-7fe4-47dd-a18e-d5f57600b449ef44a361-8ca5-43f0-84f0-fdee4bde03ca3a9bac5b-af26-4e0b-901f-8ba5fcb6c80717df50b1-df21-4139-ac58-d065f052784d79b5ac97-d4e2-42f1-85a2-a8fabbb143ad61a2644b-7479-4817-aa05-d62d1abc066691577dfd-3d8e-4970-b38d-f687a79d2ba68636134c-a943-4595-95ea-4bf1441524b56ce0a439-745c-4ad3-8ec8-1e3ba75e32971692ac51-7350-4c91-ac6d-dddf5d87c59f750712b5-a260-48ba-9303-12a4a478023b24c681f0-f88c-4b22-b0c4-cbbe1541ba7fda9e4b05-1525-4be0-8373-e80fe51394e3d1a37ab0-b33a-4399-b213-00f062ef5655dd7e5e29-d33b-47cc-8049-3815905fa24448718783-f79d-42c8-a9f9-aeb53938a4a004946fe4-5de8-4bfc-9aa8-0859811b95dcd9ace4fe-f251-4557-8f44-fdc4478dab4b7de4a59c-c417-478c-9db9-a8e566f4d95d",
                                                         -6, "85293efb-c570-4ee1-9997-b823a5567a12",
                                                         "88fac4d5-f835-4f9e-9d37-bfd077ca56fae48d28a5-a256-46f3-a9a1-effac3b596b96157c972-28f7-48af-b22e-0ba34beff4b37e6d1ac8-8c87-4ec5-b51e-97ecc5b09bf8",
                                                         new Date(1559560671230L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559560671776L), null,
                                                       "a0036dab-e91b-4857-aa7a-1c2e592d0a2b", 97,
                                                       "fb36a3c7-0154-4297-9762-6025eb542657",
                                                       "c26ecb6d-ad94-4eda-b972-d81ee31b303a",
                                                       new Date(1559560671214L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559560671776L), null,
                                                       "a0036dab-e91b-4857-aa7a-1c2e592d0a2b", 97,
                                                       "fb36a3c7-0154-4297-9762-6025eb542657",
                                                       "c26ecb6d-ad94-4eda-b972-d81ee31b303a",
                                                       new Date(1559560671214L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559560667356L), null,
                                                       "1df41202-2ac6-46a9-85e4-19f8384426e8", -65,
                                                       "efa605b7-5bef-41e3-bcfe-39141653d6e6",
                                                       "16dd5d44-8375-400a-87ae-0025592c5fe6",
                                                       new Date(1559560667969L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
