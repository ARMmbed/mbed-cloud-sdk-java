// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559758603245L), null,
                                                       "a4208546-03a3-49e8-b616-5c9947dfb66e", -108,
                                                       "8a71a941-fddb-4237-8fb8-601045058346",
                                                       "b335137c-f46c-468a-85f9-63db8dba3550",
                                                       new Date(1559758603257L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559758603666L), null,
                                                       "b458b8f1-aa65-46cc-aafe-809bc2f32793", -52,
                                                       "9ff917e4-ec20-4ad8-af6a-29ab0fe5c6ec",
                                                       "ae95df26-efe0-4956-9703-669a49903a65",
                                                       new Date(1559758604349L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559758603666L), null,
                                                       "b458b8f1-aa65-46cc-aafe-809bc2f32793", -52,
                                                       "9ff917e4-ec20-4ad8-af6a-29ab0fe5c6ec",
                                                       "ae95df26-efe0-4956-9703-669a49903a65",
                                                       new Date(1559758604349L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559758612554L), null,
                                                  "ea8e7596-9af0-4acc-aa13-389f10d130c8", -17,
                                                  "ec369c42-b9af-4bff-a90f-3b5bc6819469",
                                                  "f396273c-df82-4353-9381-0df180cd88ab", new Date(1559758605466L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559758606036L), null,
                                                         "76ec3463-9186-4822-83cf-f43277133fc6b85f24e3-7b8f-4b63-bd3f-892f08fc1b994ba2320e-205f-4678-8946-3b5ca3e99eeaa4edd269-ef0e-4ddd-ad85-80741081c82169348761-9e4b-4757-9b56-925b7ee7e49fc0f7c63c-edbe-45c4-8cba-1c178b21dc55cc9c35e5-1a76-4385-80ff-90cebb6ff4f2ce8b3dd3-2659-433c-ba7e-e8679c7d050a1a052c23-a9b8-4d73-abc9-df5273915f711461a367-a34e-4f80-ac01-d4a71ebb4f0e6481858c-71c0-47ca-9ac7-7ad4020852f066525c21-392f-40e4-a450-12449087df80a6b2e3b0-b4d9-4474-bf49-171c4150dd77a16f7d98-b9b7-4dd7-a6a8-0140b692be525f6f18df-917c-4637-904c-40f50cec76f55e603006-bd02-4a81-8361-d881217d85b84a3cceb5-3ba8-43a6-8c66-73d3ccbb93d9e6bc1e8c-9626-4aec-abc7-3b962de711658ed0c644-0963-474b-90c9-1f4fc3008542b6e9a2e1-ab90-4184-bceb-a6bdb06e3923bbe5c3c6-d100-41a3-aaba-5d7f26b39ab0d95fecf0-6a10-4c48-b4db-f137241afce764c05a51-6de6-4690-a9ae-9257e6386cca8c118361-71c6-4e5e-ba4c-0653facd2af647a9077e-da59-4829-a6c5-356e4757349a07c61487-5ec4-4eb2-856c-4c3f9b35c9be019146a3-fa7c-40a6-a8e3-8f83e10fa285a80dbbba-7549-48ef-adc9-9eb4562fb5d4037a156a-f7f6-4edb-82c8-9fac97f250bd13b8a25a-4514-462c-b904-5f0b3f116e37b47e2031-8225-46c1-b41b-2e79252efa440686bfab-466a-4476-bf28-eda503994f59ca8e8776-c943-451f-8450-b07c1851118b7b954a5f-3bd0-4887-bac5-caa26e266a33d2ecdd5c-2813-4a5a-a0b2-edb15944f96d02c1bed5-8445-448a-a758-391fdc2dc6d1c43d7ade-9c2b-4e4f-be19-f8e3dc1ba310188fd9e8-398f-407d-990c-f2ba5da6254d0dc3af8f-6b06-4fd3-8649-2b999bd59fa7371dd27e-341e-498b-aecc-27c6033fa0f74c086947-d676-493e-83dd-263e2d5d81d84326ecb3-b1e5-430a-a0ed-b703be0721c8723d4995-f1d6-41a0-a8ea-ccac58d64daf10b8a22a-92f5-4ce0-a165-e8b42b85c438d1082722-1ba3-40a8-ab9e-557ca70f302df87d2370-fcbb-4835-8bfe-20f5ffd2bdc28e63d83c-6a55-4164-ab2f-ee9e5db742b39dfb2ff1-e21a-419e-ba8c-420a1e39160e2701ee3f-a3da-46a9-8682-683c97c8e78c9e1041f8-21ea-4705-8a1c-ee6270a996d1a192c44c-5d8d-439a-a473-d851b37d83157e40e2af-707f-4ae2-aad5-361734c2c5613cd0d5f9-d954-49c0-81af-6ed2f30816032970d07b-d505-4eb4-aef0-0c1ee8cd5e3d083f5ede-03a1-4510-9c35-552834fa4ab93f8c0479-4f56-4fe6-93a5-38d70c81af8f",
                                                         15, "65178a64-a504-4dd8-a27c-2d398639d25e",
                                                         "aa8ae731-efe5-4680-aaaf-61b2f0951bd443b15f0e-e1e4-40f3-8e3c-542425ad85d011a2d5e5-eff1-42cc-adba-db55460058d35fda9819-6c37-4adf-a7e7-86f7edecb895",
                                                         new Date(1559758604907L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559758609015L), null,
                                                       "5e1313dc-af6e-4a65-8dc1-7ff35de0f4e8", 104,
                                                       "275dceff-f134-4690-ae15-25ce0a94f3e5",
                                                       "9f8cc068-2811-409a-a9e0-fe1f35743ea8",
                                                       new Date(1559758611803L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559758609015L), null,
                                                       "5e1313dc-af6e-4a65-8dc1-7ff35de0f4e8", 104,
                                                       "275dceff-f134-4690-ae15-25ce0a94f3e5",
                                                       "9f8cc068-2811-409a-a9e0-fe1f35743ea8",
                                                       new Date(1559758611803L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559758610333L), null,
                                                       "abee0b5f-6a2d-455a-ac34-e226b4d2895c", -78,
                                                       "a4c984a4-c03b-4995-b4fb-4eb98638c80e",
                                                       "512d791f-4c78-4263-9df5-781ea905c4c9",
                                                       new Date(1559758603867L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
