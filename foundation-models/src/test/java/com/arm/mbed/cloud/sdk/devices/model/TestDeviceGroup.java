// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559747933258L), null,
                                                       "9aa05063-1f72-4f7b-9e41-f93031abb0db", 96,
                                                       "bd879b7b-f548-414b-98d6-9f78d8d0c737",
                                                       "1b784fbe-71d8-45ce-b5cf-50bb3250f302",
                                                       new Date(1559747932361L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559747933357L), null,
                                                       "74320000-6386-4fdc-b7a3-9264aea789dc", -94,
                                                       "f8f8b541-9f4d-4fa8-a055-54d6699929a0",
                                                       "d24d4c6b-412a-4013-9104-7a4ba3e8ecdb",
                                                       new Date(1559747925638L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559747933357L), null,
                                                       "74320000-6386-4fdc-b7a3-9264aea789dc", -94,
                                                       "f8f8b541-9f4d-4fa8-a055-54d6699929a0",
                                                       "d24d4c6b-412a-4013-9104-7a4ba3e8ecdb",
                                                       new Date(1559747925638L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559747927746L), null,
                                                  "e6807909-6e58-4b2c-9d7c-435e3df41240", -16,
                                                  "be4b96e7-4987-415c-8d73-c1949d8ae84f",
                                                  "79f13ace-6fec-475d-aa52-ceb4d93bfb49", new Date(1559747932210L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559747930404L), null,
                                                         "8540cb8d-ba0d-4bf3-8bcf-9fdc07a770afa5acf395-4d3c-463e-9ed8-0f63644d3e3742e6d9b9-4f7d-40f1-bdcd-c1fddf27e26d96f62275-8139-4fea-ad40-a472574cb55a0d4eea16-5d0b-4fc1-9861-97e63706a10a75d5f916-83ab-420f-980d-4cd249b28d87ed9ce5eb-081e-4fdc-853d-2977bcdc8ba589d9cddf-073e-4a60-8d93-ceb14741cc437cf451c0-b751-488c-911c-7818fcfb5a6b4dfe9c4d-dd3d-4a5d-b3fb-757baee4b07bc3b9fc5d-9eb8-4dfc-ab30-a1515ed042898ff1a515-dc86-4fd7-aad3-e3779ef289838f20463a-183e-4f63-bd70-06667acff4de2cf349f0-b05a-4bcc-9efb-46ce0efa08449c12319e-c627-4418-aad2-249ac90e06502b599898-8a8b-4200-afaf-7fd47cffd6ac60292afc-ef75-4bca-9bef-0433f80556f4441e25ca-ab82-4a59-9243-8b0bb9529fbc7620ad63-6901-49a9-88bc-7f92a9ac16b3233b22ab-4b82-4cf9-9f84-18c9e295381b6ad27ad2-5d03-4b50-9116-afb7eca673eba7385476-d10e-4031-b449-89760d2af3fc9e4f7c43-8aa6-48bd-8718-540285ed871401c15561-4ac8-4752-8cfa-330e7a3e0c6dca4d54ee-455a-4a14-a36c-d985ba274c3c46952dee-38fa-4d50-956a-de6d85a6dc85c19688fe-8921-4d89-bd9e-b9bd7ef91bea6c0b72e3-979f-418a-9697-aaac0611fe62fcc81cdb-5507-4680-b841-400ea1c45ff49ed92c34-f5f9-42af-aebe-3fd3cbdd2153d946e0a4-0763-4e33-a420-14fcc0637391c583cab6-a8e7-454c-89da-571c3d4c5193ff2c64f0-7680-43a9-9223-bed88eb1ae7d9a72755e-8d8d-4a5f-b060-2f57c59a86e749887498-a821-4055-baa7-9533c9ce24e534ef54b8-abad-4428-afed-c69eb0091b916e22281e-348d-45c6-a78a-6daee04db9de76a8cfa4-bb2c-4324-91a7-a8b66e9f2f45d7b7649d-b11b-41e5-83be-73205ab1ef39d831ff81-e0ec-4dd9-b7f8-48feac25efc52059096e-a04c-45c0-bd11-be4fb29d2b4f5c2de202-ce80-4be0-bc0d-61c16f3b8abe941f66b0-1b94-4291-99bd-a74286c3517c850e618e-65b2-44ea-90b3-023ff00354312a19100b-e853-4137-bd13-9b19e3acb8959d7b9807-7377-4ae9-bc69-8d9eea910d83fdbafd9f-f52c-469e-92e0-649e9ad9ef5818c12ce7-d36e-4efa-a06b-cbe29f1a136e8764321f-1515-4ade-8a23-bf85e68a986d67bf6d91-c120-4fc9-8c02-e495921322a72d867d5b-46e6-4cf2-a730-61e558a5924f35870ce9-b11d-44ca-87de-41c8a48e6cf0ed32646f-e1a0-4077-94b3-0787dce7f5521a75f488-9aad-405e-957c-0c889c9467afd511a88f-6bed-4e68-af60-3147b9b9b17e96522564-45c9-41aa-bf2d-3859ffefcf9f",
                                                         -123, "282b1688-e0b7-47ca-ba23-0c6cdda51d9d",
                                                         "b7cda8e4-1313-4e38-aad8-6bb9c40c7da673981f20-1cb5-4c49-9faa-d62e8f952ecab8440f32-3fcd-4352-a860-227e6a1b8675d2b61a4e-c3bc-4875-b7d7-74ab3cf44c4d",
                                                         new Date(1559747931200L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559747929046L), null,
                                                       "eb5ea4ce-4fce-4589-a754-3c2b31bc290d", 58,
                                                       "dacf488d-b960-4f78-af14-891243032081",
                                                       "38224a24-696f-4a81-adad-7f5ed8a48191",
                                                       new Date(1559747926491L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559747929046L), null,
                                                       "eb5ea4ce-4fce-4589-a754-3c2b31bc290d", 58,
                                                       "dacf488d-b960-4f78-af14-891243032081",
                                                       "38224a24-696f-4a81-adad-7f5ed8a48191",
                                                       new Date(1559747926491L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559747926875L), null,
                                                       "c0c23017-1f11-4c95-96d6-0474b27bd778", -115,
                                                       "d959b5ac-1eb0-4791-b470-c13cf6bcd191",
                                                       "238e8958-afff-4fa7-bb34-aba70dd407f5",
                                                       new Date(1559747934199L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
