// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials. */
public class TestServerCredentials {
  /**
   * Tests the clone method.
   */
  @Test
  public void testClone() {
    try {
      ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546452537089L),
          "2cf73612-41a5-47d3-becc-c1463f2b4254",
          "1aa74cc9-aea6-44e4-82c4-2ad62478ffd0",
          "c2b45560-a510-415c-96ac-0bc506139bf1");
      ServerCredentials servercredentials2 = servercredentials1.clone();
      assertNotNull(servercredentials1);
      assertNotNull(servercredentials2);
      assertNotSame(servercredentials2, servercredentials1);
      assertEquals(servercredentials2, servercredentials1);
    }
    catch(Exception exception) {
      fail(exception.getMessage());
    }
  }

  /**
   * Tests the isValid method.
   */
  @Test
  public void testIsvalid() {
    ServerCredentials servercredentials = new ServerCredentials(new java.util.Date(1546452540526L),
        "ffae6b08-bc66-44c6-b1a4-bea544d62748",
        "7178ace4-8322-4e62-8484-a0d44a3d8ae7",
        "6180e136-cbcc-4f5f-b2bf-94c467e93693");
    assertTrue(servercredentials.isValid());
  }

  /**
   * Tests the hashCode method.
   */
  @Test
  public void testHashcode() {
    try {
      ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546452542167L),
          "a73a4e36-37eb-431e-a305-bfe975239307",
          "e0acd965-0f14-4a8e-aede-f4ad832379b0",
          "b9e3d363-52e1-4310-8e3a-b5011f1da61e");
      ServerCredentials servercredentials2 = new ServerCredentials(new java.util.Date(1546452542167L),
          "a73a4e36-37eb-431e-a305-bfe975239307",
          "e0acd965-0f14-4a8e-aede-f4ad832379b0",
          "b9e3d363-52e1-4310-8e3a-b5011f1da61e");
      assertNotNull(servercredentials1);
      assertNotNull(servercredentials2);
      assertNotSame(servercredentials2, servercredentials1);
      assertEquals(servercredentials2, servercredentials1);
      assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
      int hashCode = servercredentials1.hashCode();
      for (int i = 0; i < 5 ; i++) {
        assertEquals(hashCode, servercredentials1.hashCode());
      }
    }
    catch(Exception exception) {
      fail(exception.getMessage());
    }
  }

  /**
   * Tests the equals method.
   */
  @Test
  public void testEquals() {
    try {
      ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546452540814L),
          "f466734c-f6c4-4001-aff5-c7db2c5ac96b",
          "7589fc52-f91d-4a1a-a883-c222e62f407a",
          "eda75cf6-2aa5-47f0-bfb4-0971c1d934af");
      ServerCredentials servercredentials2 = new ServerCredentials(new java.util.Date(1546452540814L),
          "f466734c-f6c4-4001-aff5-c7db2c5ac96b",
          "7589fc52-f91d-4a1a-a883-c222e62f407a",
          "eda75cf6-2aa5-47f0-bfb4-0971c1d934af");
      ServerCredentials servercredentials3 = new ServerCredentials(new java.util.Date(1546452532413L),
          "921a0fd8-85ba-4082-b468-589a8060f93c",
          "75f46c90-767b-4958-87ba-816bbcaa3ec6",
          "4bc09e32-0925-4d32-9267-833192f1d375");
      assertNotNull(servercredentials1);
      assertNotNull(servercredentials2);
      assertNotNull(servercredentials3);
      assertNotSame(servercredentials2, servercredentials1);
      assertNotSame(servercredentials3, servercredentials1);
      assertEquals(servercredentials2, servercredentials1);
      assertEquals(servercredentials2, servercredentials1);
      assertEquals(servercredentials1, servercredentials2);
      assertEquals(servercredentials1, servercredentials1);
      assertFalse(servercredentials1.equals(null));
      assertNotEquals(servercredentials3, servercredentials1);
    }
    catch(Exception exception) {
      fail(exception.getMessage());
    }
  }
}
