// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559288262922L),
                                                                         "e6eae29e-96e8-441b-8a87-4b37c972784e",
                                                                         "d72091f5-9663-48d7-b793-ac0b9b2005b6",
                                                                         "8ddd5c13-b8b9-4800-8c2c-45c2a94ab3c5");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559288255402L),
                                                                         "18d4ea38-79ad-47ba-910e-7a45d4a60f70",
                                                                         "2f521c8d-8205-4073-90a4-42996b5a1eb6",
                                                                         "0002fea5-cdbe-4a32-b8fe-fefdd3f4f1b0");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559288255402L),
                                                                         "18d4ea38-79ad-47ba-910e-7a45d4a60f70",
                                                                         "2f521c8d-8205-4073-90a4-42996b5a1eb6",
                                                                         "0002fea5-cdbe-4a32-b8fe-fefdd3f4f1b0");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559288259187L),
                                                                    "9d642318-6004-45cf-a1a8-e3e3463949c1",
                                                                    "8da68f85-7af9-4e21-ab0f-6c0140572ea7",
                                                                    "8761e73e-727b-4a49-a44e-75a87f6715c4");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559288254521L),
                                                                         "5c420d22-eadb-4bea-851f-50d1945eacf9",
                                                                         "3d37aa84-0793-4f6b-83d2-d300049109d1",
                                                                         "8a7feda0-b34b-4d79-a380-64ecd679d4a4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559288254521L),
                                                                         "5c420d22-eadb-4bea-851f-50d1945eacf9",
                                                                         "3d37aa84-0793-4f6b-83d2-d300049109d1",
                                                                         "8a7feda0-b34b-4d79-a380-64ecd679d4a4");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559288259838L),
                                                                         "11b13ebc-36e2-4655-94bb-7b654e9e261a",
                                                                         "d0733eee-52c3-49a7-ad64-44e25c388635",
                                                                         "aa60387f-c838-4d76-8e6a-f6e5490d2879");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
