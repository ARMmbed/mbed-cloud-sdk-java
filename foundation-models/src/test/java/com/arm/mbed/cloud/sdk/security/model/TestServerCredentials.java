// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1548165447720L),
                                                                         "39971904-061e-4d76-ae0f-26277cae1499",
                                                                         "c3be5ed5-1331-4414-87ae-d65e09e57112",
                                                                         "bb6c9f8f-da60-4cc9-b8a6-af6b8ef77d3d");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1548165447800L),
                                                                         "3b0009a9-0267-4ab9-948d-edb57abb7cb5",
                                                                         "ebc0fd32-4b76-4385-9fa4-d049000e8d52",
                                                                         "8a7d2ae9-fdb6-41e1-b94e-f9442330fb40");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1548165447800L),
                                                                         "3b0009a9-0267-4ab9-948d-edb57abb7cb5",
                                                                         "ebc0fd32-4b76-4385-9fa4-d049000e8d52",
                                                                         "8a7d2ae9-fdb6-41e1-b94e-f9442330fb40");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1548165448615L),
                                                                    "ef71fd09-e4fd-4f66-b522-89e44a9b46a1",
                                                                    "e41f5d73-7986-4212-8ffc-da3de3f82ef6",
                                                                    "ec8fcdba-f426-46fd-9e4d-809d592a4846");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1548165443308L),
                                                                         "330ec770-b9cf-458b-8353-9946034af95b",
                                                                         "d4a87248-d4d1-4290-b3b1-ad0d37b6d3cd",
                                                                         "ced75db0-b455-4eb3-895f-0c4a3671d671");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1548165443308L),
                                                                         "330ec770-b9cf-458b-8353-9946034af95b",
                                                                         "d4a87248-d4d1-4290-b3b1-ad0d37b6d3cd",
                                                                         "ced75db0-b455-4eb3-895f-0c4a3671d671");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1548165445140L),
                                                                         "3fd7f2d0-001c-4fe1-9fa3-652751d64fc5",
                                                                         "532779fa-67f8-4f41-b5e7-d57d7a0d573f",
                                                                         "d0da288a-6d42-400f-9d72-da3c106bba68");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
