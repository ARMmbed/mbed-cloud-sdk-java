// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559662780570L),
                                                                         "97e63e9f-3319-41bb-84b7-d1adf03330bc",
                                                                         "60e74003-ad27-43f8-9039-6e1662b2d05c",
                                                                         "81118e87-f3b8-4092-8d15-d2ac2dc80bcc");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559662779159L),
                                                                         "44d47729-9c92-4cf6-9b13-9224b7066efe",
                                                                         "2386dece-74ef-4582-a72c-b454f12596a3",
                                                                         "dec488c2-a2b0-4042-a588-095189dbb16e");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559662779159L),
                                                                         "44d47729-9c92-4cf6-9b13-9224b7066efe",
                                                                         "2386dece-74ef-4582-a72c-b454f12596a3",
                                                                         "dec488c2-a2b0-4042-a588-095189dbb16e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559662776766L),
                                                                    "b9b9f68a-5c08-4e9c-819b-c649475634ab",
                                                                    "986ec29d-6b76-4418-891b-32c95ac8caae",
                                                                    "f0c154e5-a25a-4540-b80c-de073f8ce40a");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559662782967L),
                                                                         "80e620e3-0047-42a7-ba17-6cce11dd621b",
                                                                         "a7f1901a-f554-4b99-9734-9e8e5da6fafc",
                                                                         "7a5e54e4-f72c-496f-8686-d175bd6bc098");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559662782967L),
                                                                         "80e620e3-0047-42a7-ba17-6cce11dd621b",
                                                                         "a7f1901a-f554-4b99-9734-9e8e5da6fafc",
                                                                         "7a5e54e4-f72c-496f-8686-d175bd6bc098");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559662785394L),
                                                                         "d81d03a1-00c7-429f-9abe-f58e9bb5a59e",
                                                                         "7bfc4596-dd5f-4b4c-a42b-c67ff7de395d",
                                                                         "b963510a-3480-4bea-baa6-2a0c2d91d610");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
