// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546448711687L),
                                                                         "5a1ec28e-203a-4b36-bd11-269f560a0ef4",
                                                                         "3b6f69ce-fd58-4ab3-bedd-ac39bf513a0c",
                                                                         "854034e5-598a-4b88-8790-d44d6d7447ce");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        ServerCredentials servercredentials = new ServerCredentials(new java.util.Date(1546448716750L),
                                                                    "53dc6a8e-e34b-4a92-97c8-1b43f9ef2db0",
                                                                    "3396d8ae-f57a-4315-bc2b-f1e617cc7d91",
                                                                    "9f9433e0-d81e-4c57-a032-2bfe71228d9e");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546448718609L),
                                                                         "cfc3c6fe-451a-413f-a4b7-57cee20ee693",
                                                                         "f728e0c9-87e9-493d-87d0-6317c0e189ce",
                                                                         "8a0b076b-0c34-4da8-a509-29bfd3691ed2");
            ServerCredentials servercredentials2 = new ServerCredentials(new java.util.Date(1546448718609L),
                                                                         "cfc3c6fe-451a-413f-a4b7-57cee20ee693",
                                                                         "f728e0c9-87e9-493d-87d0-6317c0e189ce",
                                                                         "8a0b076b-0c34-4da8-a509-29bfd3691ed2");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new java.util.Date(1546448717578L),
                                                                         "de0abe1e-8281-447e-aa1e-a8b0dab65ad4",
                                                                         "1b3f9d8e-9c7c-461b-a3ed-ac3652336116",
                                                                         "d295c914-8929-4980-b4c6-4d34de750a3d");
            ServerCredentials servercredentials2 = new ServerCredentials(new java.util.Date(1546448717578L),
                                                                         "de0abe1e-8281-447e-aa1e-a8b0dab65ad4",
                                                                         "1b3f9d8e-9c7c-461b-a3ed-ac3652336116",
                                                                         "d295c914-8929-4980-b4c6-4d34de750a3d");
            ServerCredentials servercredentials3 = new ServerCredentials(new java.util.Date(1546448716452L),
                                                                         "9c8e66c7-e106-400a-890c-d523b3b1067b",
                                                                         "d932bf3e-4a88-44e2-8244-73a1fc5775f1",
                                                                         "b79371fc-17e5-4f37-a51c-daa3497d81ad");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
