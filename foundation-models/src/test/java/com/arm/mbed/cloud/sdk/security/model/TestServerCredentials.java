// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559560666168L),
                                                                         "4e9322e9-9bb0-4858-8ca5-29d9c182ef99",
                                                                         "5d512c77-1611-4ba6-b64f-24a9ebcfa0e2",
                                                                         "d368f374-1610-487f-9eed-6d409fb8f9f9");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559560668641L),
                                                                         "b44dac1b-1e06-4c67-a3c5-9b81bbf0b39e",
                                                                         "3d0e6ca7-b614-4ad5-8acc-f199218f6f5e",
                                                                         "5986313d-cde6-4a2c-a8eb-c49117bbbf1d");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559560668641L),
                                                                         "b44dac1b-1e06-4c67-a3c5-9b81bbf0b39e",
                                                                         "3d0e6ca7-b614-4ad5-8acc-f199218f6f5e",
                                                                         "5986313d-cde6-4a2c-a8eb-c49117bbbf1d");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559560672885L),
                                                                    "48e0a0ed-7b5b-4e52-8754-49ecffb71ef9",
                                                                    "13410387-f485-4121-a2c5-8061d1f137a9",
                                                                    "a397cd24-a61b-45d2-96e3-4700f61ad723");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559560666823L),
                                                                         "48f30181-b0dc-4a75-9c6f-38afc69cfdbf",
                                                                         "d69391f5-c778-439a-92d7-0ce6e40df6a6",
                                                                         "45dfd787-16e7-490c-9bd7-a1a2c3ef9271");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559560666823L),
                                                                         "48f30181-b0dc-4a75-9c6f-38afc69cfdbf",
                                                                         "d69391f5-c778-439a-92d7-0ce6e40df6a6",
                                                                         "45dfd787-16e7-490c-9bd7-a1a2c3ef9271");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559560671262L),
                                                                         "07f8a693-496b-45a5-b76f-7604e37973f3",
                                                                         "9ef57997-ec5b-4ae4-abda-fb7daeb7cdb1",
                                                                         "9b5c991d-ea1f-4870-88e4-7b569e3782e7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
