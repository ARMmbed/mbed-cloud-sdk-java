// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559754644813L),
                                                                         "8a736ec2-ae0d-4dd0-a013-d5ebe978ce90",
                                                                         "752bc275-8696-4dc9-ae3e-f568a187cf42",
                                                                         "15ce551a-5181-43b8-a942-22ef10b33fa4");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559754635511L),
                                                                         "5c1b0b2b-67c3-43a4-8ff0-6fbe704e6b76",
                                                                         "d9f69370-d2b1-4ce2-ad2c-3992ad9aa61d",
                                                                         "c0283b82-4d7a-4d50-b3af-2947df3cda96");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559754635511L),
                                                                         "5c1b0b2b-67c3-43a4-8ff0-6fbe704e6b76",
                                                                         "d9f69370-d2b1-4ce2-ad2c-3992ad9aa61d",
                                                                         "c0283b82-4d7a-4d50-b3af-2947df3cda96");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559754638476L),
                                                                    "115abf15-9f5e-47a2-887e-4707551aa934",
                                                                    "f9f89a2d-ecaf-477a-afe9-4c5a94f5b593",
                                                                    "e7a74781-d462-4c3d-93fb-10a77df90c9f");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559754635852L),
                                                                         "7d88c7eb-6180-43d4-ac3e-1ff4ca2d7c87",
                                                                         "0f5f70e1-be50-4d76-85f2-9d47c8747765",
                                                                         "f994a377-9cb0-431c-a89e-21aac3d5c367");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559754635852L),
                                                                         "7d88c7eb-6180-43d4-ac3e-1ff4ca2d7c87",
                                                                         "0f5f70e1-be50-4d76-85f2-9d47c8747765",
                                                                         "f994a377-9cb0-431c-a89e-21aac3d5c367");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559754644015L),
                                                                         "b97d39b4-d2df-4343-a0c5-f26f1ba94dd6",
                                                                         "6732f288-e0c2-47e8-9451-c3f05e54c4a6",
                                                                         "a211a470-a96b-4c19-a731-da1b8a46eede");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
