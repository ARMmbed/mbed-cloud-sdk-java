// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559313345780L),
                                                                         "ce187d07-03b3-4d02-9c1d-ba72cfc47759",
                                                                         "eb56dd26-4be0-4bf2-b21d-523d90a87daa",
                                                                         "1e6a7947-58f5-4db9-a956-58689ca5f575");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559313345580L),
                                                                         "fc80e220-e88b-40ad-9f11-ce95a8ba9c75",
                                                                         "917eac22-fac0-4fb0-a297-25d4c1d8b276",
                                                                         "ac2932dc-c149-464a-b263-207dc54c6bef");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559313345580L),
                                                                         "fc80e220-e88b-40ad-9f11-ce95a8ba9c75",
                                                                         "917eac22-fac0-4fb0-a297-25d4c1d8b276",
                                                                         "ac2932dc-c149-464a-b263-207dc54c6bef");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559313344060L),
                                                                    "642394c3-7790-4372-960a-321eb842aa2a",
                                                                    "07f2e0e6-8e05-41aa-bfaf-5d2b15eec335",
                                                                    "9b6bbaf9-d824-4f22-908b-d6f951f71299");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559313342954L),
                                                                         "8fa3b336-8ba2-4226-b8ba-0529ac0611fe",
                                                                         "5a4f0e05-1f06-4904-9e91-3df8ee3993d5",
                                                                         "e476249a-525b-4827-bd4c-de2ccbbbb9d1");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559313342954L),
                                                                         "8fa3b336-8ba2-4226-b8ba-0529ac0611fe",
                                                                         "5a4f0e05-1f06-4904-9e91-3df8ee3993d5",
                                                                         "e476249a-525b-4827-bd4c-de2ccbbbb9d1");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559313348055L),
                                                                         "7b627a7d-789f-4540-89ee-dc32f59087a2",
                                                                         "33ab7599-30d6-4e23-82c3-89e1615a4c53",
                                                                         "b2a921ec-d192-42b5-8a8a-0cd73e1df915");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
