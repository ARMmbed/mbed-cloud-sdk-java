// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225122157L),
                                                                         "900e0c77-8f25-4949-8881-b7465dcfa65d",
                                                                         "ca739d69-26c1-4dab-9b0b-9bd7d5cda97e",
                                                                         "c447150e-972c-48c7-a3c3-e960baf7d2b1");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225114851L),
                                                                         "8f1fdb32-1d66-4331-9989-c538f9220bdb",
                                                                         "e005c068-5fad-43b5-8881-9f7ada45787c",
                                                                         "b527f71f-1bf4-46af-9555-77e9528f8a26");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547225114851L),
                                                                         "8f1fdb32-1d66-4331-9989-c538f9220bdb",
                                                                         "e005c068-5fad-43b5-8881-9f7ada45787c",
                                                                         "b527f71f-1bf4-46af-9555-77e9528f8a26");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1547225123228L),
                                                                    "b52ef3be-41ea-4404-9cdc-1e8ebf6e4554",
                                                                    "b86bdd21-d200-4785-b707-e62c979d3bcf",
                                                                    "10e2c758-1762-4f7b-8666-d434b4c4ebd5");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225123032L),
                                                                         "cf6bc30e-52ba-4036-a58d-d20d6d192838",
                                                                         "5887e4e6-9759-4f66-bc88-719a9e681aa6",
                                                                         "3dd90e21-5892-4819-95f3-8cf0bc37f73b");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547225123032L),
                                                                         "cf6bc30e-52ba-4036-a58d-d20d6d192838",
                                                                         "5887e4e6-9759-4f66-bc88-719a9e681aa6",
                                                                         "3dd90e21-5892-4819-95f3-8cf0bc37f73b");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1547225124681L),
                                                                         "015867a7-4489-47e7-b98c-69e04df12ca2",
                                                                         "464546ab-cc8e-4300-9b7a-59e4a53884b4",
                                                                         "61cf5f5d-0a65-46a3-bb9a-7124bda7426e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
