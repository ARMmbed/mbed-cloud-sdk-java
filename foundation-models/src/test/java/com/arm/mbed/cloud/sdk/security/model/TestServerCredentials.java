// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559655028799L),
                                                                         "1fec0147-90e9-4396-a2b2-d33497a8ae16",
                                                                         "8a9ffc80-97e9-4397-8a85-002fdbf50c5c",
                                                                         "5d58fdd9-520e-49dd-ab2d-77349509311f");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559655029150L),
                                                                         "f29c0872-781e-488c-88fe-fac161a05005",
                                                                         "54daea5f-9050-488b-a538-a47361836d38",
                                                                         "dac0b865-aed1-418b-b534-df51dec564b3");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559655029150L),
                                                                         "f29c0872-781e-488c-88fe-fac161a05005",
                                                                         "54daea5f-9050-488b-a538-a47361836d38",
                                                                         "dac0b865-aed1-418b-b534-df51dec564b3");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559655030623L),
                                                                    "89444ff8-907c-415e-ba7a-973dd0887ed6",
                                                                    "86f2221d-43cd-48f2-a9d6-a2b35714caf1",
                                                                    "6eef27e1-1f70-4434-a456-862179f331b9");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559655036194L),
                                                                         "3cb8fd73-6a2c-403a-987b-6d79090f9011",
                                                                         "96350b87-0d1f-45ac-9cb1-a18d722b491c",
                                                                         "9c783882-74af-40f2-ba20-a74b1065a75c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559655036194L),
                                                                         "3cb8fd73-6a2c-403a-987b-6d79090f9011",
                                                                         "96350b87-0d1f-45ac-9cb1-a18d722b491c",
                                                                         "9c783882-74af-40f2-ba20-a74b1065a75c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559655031846L),
                                                                         "e31834b8-7178-4704-90c6-9011e84ac039",
                                                                         "afeba6e7-f152-4d5a-a501-a86a640331ba",
                                                                         "20e87a2e-f65f-4162-bb70-eacee0f39b94");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
