// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547159624182L),
                                                                         "b79d0974-a011-4834-a50e-658523aa65c3",
                                                                         "53b73754-4dd1-4cc7-aa80-1eb11bf54166",
                                                                         "baee8db2-6008-490c-b8ea-8c60e9491599");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547159623351L),
                                                                         "4ac43686-affa-4b62-ac48-e9d68d12265b",
                                                                         "4a847d07-be87-40ea-9795-e8d3122e06f3",
                                                                         "5649cb46-3fa3-4415-8930-fc238fcad075");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547159623351L),
                                                                         "4ac43686-affa-4b62-ac48-e9d68d12265b",
                                                                         "4a847d07-be87-40ea-9795-e8d3122e06f3",
                                                                         "5649cb46-3fa3-4415-8930-fc238fcad075");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1547159626807L),
                                                                    "c575990b-2e76-4f39-96e4-531628f8834a",
                                                                    "c5a7ef5e-6fa8-49f0-be72-18cf82f2f503",
                                                                    "496de460-7f6b-44c6-b19b-d48465dc6db2");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547159630473L),
                                                                         "6782f7de-aa24-4b62-ade7-222ee20d168b",
                                                                         "5af33e14-c8aa-4f21-a4a5-b20e84721ec6",
                                                                         "18d65a65-8241-4a77-a285-c67f1aa20767");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547159630473L),
                                                                         "6782f7de-aa24-4b62-ade7-222ee20d168b",
                                                                         "5af33e14-c8aa-4f21-a4a5-b20e84721ec6",
                                                                         "18d65a65-8241-4a77-a285-c67f1aa20767");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1547159626920L),
                                                                         "268d2a94-d77d-4175-982c-74a28ff23a51",
                                                                         "53a1ccf3-8cbd-4e85-b5bd-366db5f45160",
                                                                         "e4469e9f-981e-4fb5-aa14-4e7c48d38f22");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
