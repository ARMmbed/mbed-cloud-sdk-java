// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547164358270L),
                                                                         "ea815d57-8a1b-4291-957f-8e7b3a18ab0d",
                                                                         "c0ebc816-d2fe-4eb7-a539-b00bb60c86c4",
                                                                         "128ca4ca-3ca9-4558-a80c-1fd7ca239725");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547164363391L),
                                                                         "7f67d46f-1e12-4eec-91e2-4abddba3ac6a",
                                                                         "abd774eb-bb77-4ab6-8e97-5eb293f0fa6d",
                                                                         "06e8be79-c0e7-4afd-ab02-d81332b7e6c4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547164363391L),
                                                                         "7f67d46f-1e12-4eec-91e2-4abddba3ac6a",
                                                                         "abd774eb-bb77-4ab6-8e97-5eb293f0fa6d",
                                                                         "06e8be79-c0e7-4afd-ab02-d81332b7e6c4");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1547164365954L),
                                                                    "dab40b68-2374-4a98-9bd5-9430694ee9b3",
                                                                    "d45156a8-4bb0-4cb2-af44-fd2a19ff8fee",
                                                                    "50a56c07-325f-4be9-bab7-781a5b93220c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547164359525L),
                                                                         "b2d47d79-15cf-4a90-a8c6-051ad4b6bff2",
                                                                         "0091e94d-1178-41df-b497-b2ff2c40160b",
                                                                         "dc280c47-e311-497a-970a-6547baae061f");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547164359525L),
                                                                         "b2d47d79-15cf-4a90-a8c6-051ad4b6bff2",
                                                                         "0091e94d-1178-41df-b497-b2ff2c40160b",
                                                                         "dc280c47-e311-497a-970a-6547baae061f");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1547164359893L),
                                                                         "3782a927-f261-4b1c-bb44-31e5d97c1399",
                                                                         "8b7666ab-e002-4e0d-aa6b-efd2fb13606f",
                                                                         "90185f4c-e69b-4ce1-beb1-311ef7ff89dd");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
