// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096038540L),
                                                                         "c9c87964-2a80-4b09-8074-7e31e39109a4",
                                                                         "5afdcee9-3c6a-4120-b248-5b6c46e4d542",
                                                                         "8a00c6da-9563-4f19-9cf9-ff43ce13e995");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096039189L),
                                                                         "f1e9e09c-2221-47b9-b562-c4a0cc217a4a",
                                                                         "857c6512-b97e-4389-bd60-391f6a485861",
                                                                         "655a10ca-2ae7-445d-be8a-0d8f77f98066");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558096039189L),
                                                                         "f1e9e09c-2221-47b9-b562-c4a0cc217a4a",
                                                                         "857c6512-b97e-4389-bd60-391f6a485861",
                                                                         "655a10ca-2ae7-445d-be8a-0d8f77f98066");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558096039624L),
                                                                    "31e7243e-59fa-4779-ac9e-98426fb9341f",
                                                                    "afe21a58-9940-4ece-a21c-ec974c74c1ad",
                                                                    "f62afb23-6d56-4d4b-ba19-1fae655a01c1");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096036633L),
                                                                         "f7c53391-372f-444a-965d-b88d9073215d",
                                                                         "72481ca0-378d-4b20-b629-bc3af549373c",
                                                                         "6eb28911-d8f1-41b1-af91-477946955486");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558096036633L),
                                                                         "f7c53391-372f-444a-965d-b88d9073215d",
                                                                         "72481ca0-378d-4b20-b629-bc3af549373c",
                                                                         "6eb28911-d8f1-41b1-af91-477946955486");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558096037377L),
                                                                         "73b8f035-8c3a-471f-b4cd-73faa612af82",
                                                                         "9e428401-cf54-435f-87e4-61ab9e75ac67",
                                                                         "3b5099e3-64e3-491f-bb2e-42c28718eeaa");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
