// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833681111L),
                                                                         "ba7d31f0-6ca2-4367-a1cb-35506b3e6536",
                                                                         "8eafc672-9523-4727-83e0-4a5a5f53a1dd",
                                                                         "a919c2fc-fdc9-4687-8f0a-fe39df9d1873");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833684842L),
                                                                         "a0853600-04c0-4611-8849-a9e5cecd8da8",
                                                                         "43446f75-a32b-42d8-ac1c-3cc03fc39540",
                                                                         "f1bb9c5d-24d6-4678-a25a-0912edcf3152");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559833684842L),
                                                                         "a0853600-04c0-4611-8849-a9e5cecd8da8",
                                                                         "43446f75-a32b-42d8-ac1c-3cc03fc39540",
                                                                         "f1bb9c5d-24d6-4678-a25a-0912edcf3152");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559833683566L),
                                                                    "39793d1f-21b3-40fa-a00e-437045a55700",
                                                                    "b0eabf84-78a7-4293-9db4-6c92450c629c",
                                                                    "1c0f9aa5-5336-459f-b487-0a31f40d60b0");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833677141L),
                                                                         "68ce2a61-1e0c-414b-a994-d642b55dc553",
                                                                         "326e44ef-fdbb-497f-9b1e-0a640fd8cc58",
                                                                         "59a77a6c-d2aa-43c0-9b70-bb84e537d5f9");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559833677141L),
                                                                         "68ce2a61-1e0c-414b-a994-d642b55dc553",
                                                                         "326e44ef-fdbb-497f-9b1e-0a640fd8cc58",
                                                                         "59a77a6c-d2aa-43c0-9b70-bb84e537d5f9");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559833684173L),
                                                                         "82a7e5a2-b06c-41c2-8978-394404e94236",
                                                                         "06d70def-a4d2-4089-a84f-5bcb5a464036",
                                                                         "facdd4b8-a802-488b-80d2-9ef5385e733e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
