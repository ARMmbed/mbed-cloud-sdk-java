// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559300107036L),
                                                                         "17ba5b1a-a3cb-4fbf-bf1c-bbfc38050272",
                                                                         "9fb5a72f-ec8b-4f31-89ef-084c610ee8ac",
                                                                         "ba356980-519a-4841-a9b5-580b4ba9c321");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559300102578L),
                                                                         "bd6a012f-540d-489a-a7cc-4d623513c5bd",
                                                                         "35c29573-4173-495d-8a9c-c017f34ca74f",
                                                                         "c26ef062-7018-4ebf-ac16-20c5180517a4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559300102578L),
                                                                         "bd6a012f-540d-489a-a7cc-4d623513c5bd",
                                                                         "35c29573-4173-495d-8a9c-c017f34ca74f",
                                                                         "c26ef062-7018-4ebf-ac16-20c5180517a4");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559300099745L),
                                                                    "82171608-e5df-4b30-8c3c-51628d54c83e",
                                                                    "9e3c2c1d-ef4f-4ed7-940a-643aab635e69",
                                                                    "bbbe94c9-cb43-47a7-9857-a9fe59a1ede1");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559300107523L),
                                                                         "1b952455-f0b4-4d6f-9447-ac8186a0f70c",
                                                                         "876a582a-e28a-4ac1-ba23-a352e45493dd",
                                                                         "1545201b-07b8-4ba7-a823-915e5722ad2c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559300107523L),
                                                                         "1b952455-f0b4-4d6f-9447-ac8186a0f70c",
                                                                         "876a582a-e28a-4ac1-ba23-a352e45493dd",
                                                                         "1545201b-07b8-4ba7-a823-915e5722ad2c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559300102248L),
                                                                         "2e1644c6-f70a-4f61-aab3-701a81ddc102",
                                                                         "2785b2ba-598a-4b83-a8fc-ea0b84e3f377",
                                                                         "e8da8c3c-56ae-4a4a-a5bb-ffcf7935a199");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
