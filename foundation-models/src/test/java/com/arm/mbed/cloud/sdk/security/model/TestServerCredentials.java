// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559752148606L),
                                                                         "8e5774f9-62cc-4001-9fc3-276fd8e847b2",
                                                                         "5331bae1-e531-4d80-b6db-b98aebe29b30",
                                                                         "b692922c-8780-4811-903b-cfe84962cb6d");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559752153423L),
                                                                         "4a895e2b-c33a-4a8e-a486-04b7d14f351a",
                                                                         "6585e64d-661c-4cd6-8deb-014a8cd51ae7",
                                                                         "a50477df-9a24-440b-9547-04dcaf9524bf");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559752153423L),
                                                                         "4a895e2b-c33a-4a8e-a486-04b7d14f351a",
                                                                         "6585e64d-661c-4cd6-8deb-014a8cd51ae7",
                                                                         "a50477df-9a24-440b-9547-04dcaf9524bf");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559752149296L),
                                                                    "8d17bfbc-e6bb-4f3e-8ad8-bd72171b0421",
                                                                    "8f744a8f-ec85-4eb2-9fee-30e1456f7f0c",
                                                                    "37a0ed28-3762-44e3-adfe-c7d3474b81a4");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559752148348L),
                                                                         "a9e5eb31-e6ec-47e8-a89d-c58fa35840d3",
                                                                         "5f272fdb-2d52-439e-a79f-32a136a8a021",
                                                                         "e4552cae-d911-4318-a36a-9baa97d92e0a");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559752148348L),
                                                                         "a9e5eb31-e6ec-47e8-a89d-c58fa35840d3",
                                                                         "5f272fdb-2d52-439e-a79f-32a136a8a021",
                                                                         "e4552cae-d911-4318-a36a-9baa97d92e0a");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559752151804L),
                                                                         "164a0ca1-b18e-497c-9c08-4d4946bfbc43",
                                                                         "3a66af87-4821-453f-b5ab-f2bfeb131029",
                                                                         "e975addf-f4e5-4574-ba0d-9e7786c76ce8");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
