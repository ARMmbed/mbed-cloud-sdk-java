// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225900967L),
                                                                         "4a64fd9a-8046-4c01-b2f8-e29df96897fc",
                                                                         "00216169-b618-48a8-b9d9-d7ce589c3181",
                                                                         "ee54f1a3-8600-4c54-be54-1cc369a776e0");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225897465L),
                                                                         "b6c72cc3-dfae-470d-9717-f4fe501c2854",
                                                                         "c27fe30a-8deb-48e7-94b3-1e11d38d133a",
                                                                         "e6014532-0bfe-485a-b29d-155d6f112e40");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547225897465L),
                                                                         "b6c72cc3-dfae-470d-9717-f4fe501c2854",
                                                                         "c27fe30a-8deb-48e7-94b3-1e11d38d133a",
                                                                         "e6014532-0bfe-485a-b29d-155d6f112e40");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1547225900203L),
                                                                    "33f7ec8a-0464-4f63-9d94-b29212cff723",
                                                                    "d346f2c9-eb16-4137-af0f-0a865bd950d1",
                                                                    "4d2dd041-e6bd-45d3-874d-c05a04131f8c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547225905578L),
                                                                         "6596f802-6da0-49d7-962f-c645f350bb93",
                                                                         "6ae798f2-4254-4c72-8af9-d4f5659828b5",
                                                                         "1329b04a-2eab-4836-877d-226e785906ef");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547225905578L),
                                                                         "6596f802-6da0-49d7-962f-c645f350bb93",
                                                                         "6ae798f2-4254-4c72-8af9-d4f5659828b5",
                                                                         "1329b04a-2eab-4836-877d-226e785906ef");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1547225900985L),
                                                                         "bab1b6f7-1b43-4772-b613-610652745b74",
                                                                         "f9aaf7ac-9f11-4030-8a61-f7d9755dd40c",
                                                                         "ffc1ace3-51ff-4afe-8551-186644b9e492");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
