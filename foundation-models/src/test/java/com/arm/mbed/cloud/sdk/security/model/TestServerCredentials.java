// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547489768004L),
                                                                         "b546686d-fb37-4e34-b246-7a20a6ff1834",
                                                                         "2aedbf16-8bfa-4fea-9f18-303a3d5a6d52",
                                                                         "c39b8ac3-9d9b-4acc-898a-d321a2144d9f");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547489767668L),
                                                                         "b0b8627b-a32e-416e-9be3-7cedf4d9457d",
                                                                         "22ebadbe-c82e-4695-b34e-7bd046012f34",
                                                                         "b25f4124-003b-41f6-a1b5-8f8be48afe82");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547489767668L),
                                                                         "b0b8627b-a32e-416e-9be3-7cedf4d9457d",
                                                                         "22ebadbe-c82e-4695-b34e-7bd046012f34",
                                                                         "b25f4124-003b-41f6-a1b5-8f8be48afe82");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1547489771748L),
                                                                    "55af2a09-8e83-462f-a060-45380c37d0a1",
                                                                    "e069e4d5-362d-46ed-9a76-ccb24ce3a575",
                                                                    "3dd35ed0-afdb-4339-9fce-829b8fd98e92");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1547489765369L),
                                                                         "fae31aa0-ea47-4757-925d-319d45267c62",
                                                                         "3a0d264b-ccf7-4621-bac7-e7e5ffefb60d",
                                                                         "2b04a7c0-22c5-486c-a3ee-387b68f40627");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1547489765369L),
                                                                         "fae31aa0-ea47-4757-925d-319d45267c62",
                                                                         "3a0d264b-ccf7-4621-bac7-e7e5ffefb60d",
                                                                         "2b04a7c0-22c5-486c-a3ee-387b68f40627");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1547489765674L),
                                                                         "0cb21a0e-0ea9-4663-9a16-8ae411e4671c",
                                                                         "f93cd8eb-8531-49ed-8d16-a2445f08ac4c",
                                                                         "82aee37f-dcfe-45e5-a265-8b87c1125579");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
