// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1551867945011L),
                                                                         "fef3740a-d1b3-4279-acc7-e22cecc2ed92",
                                                                         "92caa140-8fca-48b0-b51d-8825a2f1e83c",
                                                                         "a136bec4-7c18-4f0a-8fec-90a285d57ba1");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1551867953037L),
                                                                         "f3b35f27-8c4f-473b-8ea4-ae73a7a617b8",
                                                                         "d6e6629a-916d-47e7-aeef-11223294016b",
                                                                         "62776627-7d16-487e-aff3-b1fda1ed7313");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1551867953037L),
                                                                         "f3b35f27-8c4f-473b-8ea4-ae73a7a617b8",
                                                                         "d6e6629a-916d-47e7-aeef-11223294016b",
                                                                         "62776627-7d16-487e-aff3-b1fda1ed7313");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1551867943756L),
                                                                    "3adc20f1-57ef-4aba-8a10-37d19b7fbf26",
                                                                    "a94e4555-6d5d-412c-ba9c-4549d386e7b6",
                                                                    "84f9b995-1e7c-454b-a076-92e357aefc4c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1551867943773L),
                                                                         "a5a0cd24-c55c-42eb-ba5f-e8b2da754646",
                                                                         "c46440d8-8108-4166-a3eb-3db5cc506ef8",
                                                                         "a20c8373-9146-4267-9e54-70624c24e957");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1551867943773L),
                                                                         "a5a0cd24-c55c-42eb-ba5f-e8b2da754646",
                                                                         "c46440d8-8108-4166-a3eb-3db5cc506ef8",
                                                                         "a20c8373-9146-4267-9e54-70624c24e957");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1551867944413L),
                                                                         "aa02e856-cf80-4856-bf0e-df1ccf78c1f4",
                                                                         "29c04ee4-4c12-443b-ad4a-2d9ffeeb8149",
                                                                         "65bb98f4-9568-48bc-b24f-f8787a24f2ff");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
