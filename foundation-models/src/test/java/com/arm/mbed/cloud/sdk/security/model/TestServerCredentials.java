// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559746948546L),
                                                                         "71e97ed2-62fc-43d9-8fee-bfbe0783ac94",
                                                                         "da161893-9cfb-4583-8f7c-0ac22f195d22",
                                                                         "d3d76167-2b9e-4679-9d58-ac0c9fcb053e");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559746953504L),
                                                                         "afea89e3-2f5d-435a-81c2-5b8619432356",
                                                                         "fb9d011d-dcea-4766-81fe-348108ba187d",
                                                                         "14756da0-2d16-4582-bcc1-02881ce51117");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559746953504L),
                                                                         "afea89e3-2f5d-435a-81c2-5b8619432356",
                                                                         "fb9d011d-dcea-4766-81fe-348108ba187d",
                                                                         "14756da0-2d16-4582-bcc1-02881ce51117");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559746954177L),
                                                                    "cf78dd16-4b2c-4392-9e60-a5cf394f8b59",
                                                                    "d9daeaaf-d175-4ea0-9442-2060a4b668a8",
                                                                    "83b5f9ce-f245-4a20-8bfb-0b70b09d840e");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559746950862L),
                                                                         "0e27083d-1dab-4374-a0c0-886f3646cd45",
                                                                         "31aa9d26-a376-4a8a-8326-f6e09819ef10",
                                                                         "14158ea5-7a3c-4851-b605-e3850e25f4b4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559746950862L),
                                                                         "0e27083d-1dab-4374-a0c0-886f3646cd45",
                                                                         "31aa9d26-a376-4a8a-8326-f6e09819ef10",
                                                                         "14158ea5-7a3c-4851-b605-e3850e25f4b4");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559746952730L),
                                                                         "fe077064-7ac7-4250-9283-724f21db3a90",
                                                                         "a5bcf667-1d5e-40a7-9fd8-022e52a41ea1",
                                                                         "8005b4f4-fee0-4caf-abd7-fcfa9cb6fab3");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
