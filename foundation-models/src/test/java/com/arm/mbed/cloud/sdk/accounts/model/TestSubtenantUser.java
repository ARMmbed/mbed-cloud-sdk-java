// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("294339cf-343a-43f3-844e-0324aa2a73cb",
                                                             "934558ae-2bd0-46ef-8cd7-a7d451db9bef",
                                                             new java.util.Date(1546622511671L), -41,
                                                             "d13c38b3-d126-4392-8966-ee799c22c961", true,
                                                             "3a4b6d5f-662f-4c18-8974-c8ad6caa38ad",
                                                             "84a6cb20-526b-4855-b1aa-ae064536746f", 18, null, null,
                                                             true, "83128c1f-f1bd-4f9a-94b5-0afabb576f90", 98,
                                                             "5eec7238-e208-400d-9f55-77b4305a0949",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             true, true, new java.util.Date(1546622514436L),
                                                             "8d9cbbef-de0b-484d-8272-44ee1817b9b0");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("73e15657-4523-49ad-a36e-f3ae5bc7b42e",
                                                             "d15131eb-7472-4aa3-a3f4-14e29abd4c01",
                                                             new java.util.Date(1546622509149L), -91,
                                                             "2ebcd9de-1e9c-4ca2-98f9-3aaf1044a239", true,
                                                             "052c18b7-9940-4639-b786-8049e1fd188a",
                                                             "edc06be8-5aee-4d97-b3fe-4c23726ad257", 110, null, null,
                                                             false, "89bc551e-f870-45e2-818f-0fddf940d90b", -65,
                                                             "8bb4b432-b28d-4b70-add0-22cadcc5bcc0",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             true, false, new java.util.Date(1546622512825L),
                                                             "73eaf1d0-0051-4ed9-b868-4405aff9769f");
            SubtenantUser subtenantuser2 = new SubtenantUser("73e15657-4523-49ad-a36e-f3ae5bc7b42e",
                                                             "d15131eb-7472-4aa3-a3f4-14e29abd4c01",
                                                             new java.util.Date(1546622509149L), -91,
                                                             "2ebcd9de-1e9c-4ca2-98f9-3aaf1044a239", true,
                                                             "052c18b7-9940-4639-b786-8049e1fd188a",
                                                             "edc06be8-5aee-4d97-b3fe-4c23726ad257", 110, null, null,
                                                             false, "89bc551e-f870-45e2-818f-0fddf940d90b", -65,
                                                             "8bb4b432-b28d-4b70-add0-22cadcc5bcc0",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             true, false, new java.util.Date(1546622512825L),
                                                             "73eaf1d0-0051-4ed9-b868-4405aff9769f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("d8da1e70-fe7a-48b3-8503-91e43856fb0f",
                                                        "128a7b22-e8bf-4147-940e-35feacf20edc",
                                                        new java.util.Date(1546622515769L), -87,
                                                        "3afb3b91-ea0c-4f9b-816d-5ac67c40daeb", false,
                                                        "5548e628-fcc3-4f05-a451-887009c8bfef",
                                                        "6ba84627-8ec1-47ff-8f1e-513694b49020", -62, null, null, false,
                                                        "5b248b80-7998-4a7b-81ef-9c22f5f81063", -26,
                                                        "63d38749-0938-41aa-94d5-759c37e7ab97",
                                                        com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                        false, false, new java.util.Date(1546622509972L),
                                                        "0aa48b3c-ba49-48ec-a94c-d8026b4e6799");
        assertTrue(subtenantuser.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("68cdfdd8-502d-42e4-a7e2-8195949b073e",
                                                             "6465e9e2-3d1d-4e58-a9c5-b2580db0f578",
                                                             new java.util.Date(1546622516943L), 112,
                                                             "0e4ec1ff-cced-44a0-9deb-515129168991", false,
                                                             "9405cfef-78d1-48f2-b289-05971bf05abc",
                                                             "0bdd4aad-ce04-442b-846f-17b8a8862d87", -19, null, null,
                                                             false, "2ba98885-0832-4c5b-b819-1c90652e8192", 42,
                                                             "1dacef62-73db-437f-997c-cd698f98c327",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             false, false, new java.util.Date(1546622515120L),
                                                             "4b2dbe55-7554-44df-bafd-4a7f56773489");
            SubtenantUser subtenantuser2 = new SubtenantUser("68cdfdd8-502d-42e4-a7e2-8195949b073e",
                                                             "6465e9e2-3d1d-4e58-a9c5-b2580db0f578",
                                                             new java.util.Date(1546622516943L), 112,
                                                             "0e4ec1ff-cced-44a0-9deb-515129168991", false,
                                                             "9405cfef-78d1-48f2-b289-05971bf05abc",
                                                             "0bdd4aad-ce04-442b-846f-17b8a8862d87", -19, null, null,
                                                             false, "2ba98885-0832-4c5b-b819-1c90652e8192", 42,
                                                             "1dacef62-73db-437f-997c-cd698f98c327",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             false, false, new java.util.Date(1546622515120L),
                                                             "4b2dbe55-7554-44df-bafd-4a7f56773489");
            SubtenantUser subtenantuser3 = new SubtenantUser("e42266fb-314f-4e3d-a0f3-0fa6a446df70",
                                                             "aaae983a-e949-41c2-90cf-4c879c24b840",
                                                             new java.util.Date(1546622510061L), -35,
                                                             "57692ecb-e1cb-4035-bc10-bd5a43cc0576", true,
                                                             "3fae5d8b-9a53-4d6f-8ced-4f66c33a4306",
                                                             "2fdad840-fcab-43d7-ba76-3200288f8816", -121, null, null,
                                                             false, "cb346ea6-c099-4582-8853-b5b91fe7bc47", -58,
                                                             "94d51730-e37c-4396-a5e3-a848dc5d81ff",
                                                             com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserStatus.getDefault(),
                                                             true, true, new java.util.Date(1546622512724L),
                                                             "f34bbc35-5d95-4c37-bdb0-4a35b0f6bc12");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
