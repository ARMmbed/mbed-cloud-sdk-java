// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "8b87e531-3929-4238-9843-f313e8889a28",
                                                             new Date(1559746952868L), -79, null,
                                                             "07609.ec206@648d5.fr", false,
                                                             "682ebb36-fef7-4a46-a262-c2554ed3c604",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", true, false, true, -64,
                                                             null, null, "abda309d-1c01-42a0-9c47-e0f720937570", -46,
                                                             "7b08eb23-5379-43ff-9e98-1057c7a7be34",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746953153L), ",bU=5");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "b41442ae-6a36-4c18-bb8d-a0dce4977ac7",
                                                             new Date(1559746952831L), 89, null, "c7454.13136@edd25.fr",
                                                             false, "141d3d41-a259-4052-9d87-90fcfa0d533e",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", false, true, true,
                                                             -110, null, null, "134c4834-9709-488b-a3f1-719e1c31e00a",
                                                             1, "473bfaf1-f7cd-461f-8e7c-e9db6a947b86",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746946915L), ",bU=5");
            SubtenantUser subtenantuser2 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "b41442ae-6a36-4c18-bb8d-a0dce4977ac7",
                                                             new Date(1559746952831L), 89, null, "c7454.13136@edd25.fr",
                                                             false, "141d3d41-a259-4052-9d87-90fcfa0d533e",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", false, true, true,
                                                             -110, null, null, "134c4834-9709-488b-a3f1-719e1c31e00a",
                                                             1, "473bfaf1-f7cd-461f-8e7c-e9db6a947b86",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746946915L), ",bU=5");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                        "179ddfb7-09ae-48c7-845c-e847ae216df8",
                                                        new Date(1559746948946L), 7, null, "e2315.20bdf@41274.fr",
                                                        false, "019b7208-91a4-4af6-a834-230e8b052547",
                                                        "acc8cb178a5cea59a0ac26cbc2e1911d", true, true, false, 84, null,
                                                        null, "29a67d75-a977-4d64-a586-b2983dcdfd50", -6,
                                                        "ae7c05f6-b834-490e-a5ba-19f629335d0d",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559746949270L), ",bU=5");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "980b92c1-8c4c-4839-babb-f373272ef673",
                                                               new Date(1559746953766L), 66, null, null, false,
                                                               "7eade5ca-a578-4f89-b5ef-4d54722cdf1d22775f6d-bac9-4877-b7f6-41e629448b6285537160-94d2-48a2-a4c9-d49af768ba38",
                                                               "î®·4 4ä£›4\f4O434è†—Aè†¶3æ?µâ ¿3VB+3\u0011íœˆ/æ—º)4ï¾¾)4K?î‡‚\u0014*Ná½¯>ã™¥Mæ«‰à¤»U4>P3\\\\é²„íž°44'33æ¢°\u0017í•­T]E",
                                                               true, false, false, 115, null, null,
                                                               "92ee2b06-245b-42f5-ab48-f31ab2aedc8b", -111,
                                                               "6f2028be-b0db-4bcf-a4d6-ad664533ff89dae46513-227b-41b0-8f79-aae1990f9ed5478cf2e2-536d-4aca-8e8d-04742077c24e",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559746946757L),
                                                               "3.!;39\t7\u001c)a!\u001bí–·G7K307\u001cPC\u0010<0\u000090;î…©7\få“?\u00108î¬»_BD\f?3ï’«/ç¡‡\u0006\u001a7\u0012ç»•]9;O_\u000eæ¨Ÿ\u001c\u001e2Iì½™");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "8067e841-bab1-4784-a236-1219431132ab",
                                                             new Date(1559746953645L), 63, null, "196da.a0e8c@be05d.me",
                                                             false, "8d531042-1532-4b63-97e4-d2481836ce8f",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", false, false, true,
                                                             -48, null, null, "1bbff22d-d4d1-4eab-b599-d69e3009cbd1",
                                                             56, "10d00f47-2a7f-4120-9744-366c94669119",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746952490L), ",bU=5");
            SubtenantUser subtenantuser2 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "8067e841-bab1-4784-a236-1219431132ab",
                                                             new Date(1559746953645L), 63, null, "196da.a0e8c@be05d.me",
                                                             false, "8d531042-1532-4b63-97e4-d2481836ce8f",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", false, false, true,
                                                             -48, null, null, "1bbff22d-d4d1-4eab-b599-d69e3009cbd1",
                                                             56, "10d00f47-2a7f-4120-9744-366c94669119",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746952490L), ",bU=5");
            SubtenantUser subtenantuser3 = new SubtenantUser("acc8cb178a5cea59a0ac26cbc2e1911d", null,
                                                             "3f8af103-3b30-42d7-9a2d-7c522e9069af",
                                                             new Date(1559746947802L), 11, null, "ecfe3.c79cb@88104.fr",
                                                             false, "fefccbae-3147-430b-8e49-1612df374fdd",
                                                             "acc8cb178a5cea59a0ac26cbc2e1911d", false, false, true,
                                                             -67, null, null, "891e5774-b7ab-42db-95d2-0dacd205f1f3",
                                                             -50, "80009612-5f92-4386-ab0c-c7d4b69e9c50",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559746952043L), ",bU=5");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
