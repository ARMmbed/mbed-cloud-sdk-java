// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "1632eec7-f3f3-477d-ae28-6c534e1bd93a",
                                                             new Date(1559300098901L), 113, null,
                                                             "193a9.dc4eb@8686f.me", true,
                                                             "0624b75b-d968-4a8f-9cb7-a255825085f9",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, true,
                                                             -59, null, null, "059b55ba-d3f5-4e6a-956f-3fcadca8f243",
                                                             -47, "08a22abe-dea8-4100-bb1e-fecda3903732",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300101999L), "c4K=.");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "0169fcd5-a581-4818-862d-0c07ed4cd2f9",
                                                             new Date(1559300097847L), 42, null, "8128e.10bff@42038.fr",
                                                             false, "45eb5b9b-050b-4239-a9c6-3f3753954383",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, false,
                                                             32, null, null, "dd9d3e32-da82-422a-b8bf-fa7193d2760e", 18,
                                                             "0532e346-a1ff-4906-b360-97611e2ce821",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300104014L), "c4K=.");
            SubtenantUser subtenantuser2 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "0169fcd5-a581-4818-862d-0c07ed4cd2f9",
                                                             new Date(1559300097847L), 42, null, "8128e.10bff@42038.fr",
                                                             false, "45eb5b9b-050b-4239-a9c6-3f3753954383",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, false,
                                                             32, null, null, "dd9d3e32-da82-422a-b8bf-fa7193d2760e", 18,
                                                             "0532e346-a1ff-4906-b360-97611e2ce821",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300104014L), "c4K=.");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                        "6084ca5d-5f65-45e3-a819-30dca1ce098a",
                                                        new Date(1559300103709L), 32, null, "34df9.3460a@7ef18.fr",
                                                        false, "33500a2c-090d-416e-9210-e3d10fce5f10",
                                                        "e5adc84a514e5b3d136332ece0ac7d95", false, false, false, -31,
                                                        null, null, "a72ccb33-ab5c-41a4-8b29-a2eb230f6096", -89,
                                                        "0e8ab75f-7ebc-4597-8ac5-69405dae26b5",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559300104632L), "c4K=.");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "14b79916-54e0-45cb-b35f-9d7bb6714b7c",
                                                               new Date(1559300104256L), -55, null, null, true,
                                                               "d8d95b50-939b-4e60-a008-f5b327061d699241d693-3f04-473d-baca-8341132629bf1a3abe00-e237-4d40-91f7-24901f445c17",
                                                               "çŠ”\u001e\u0013J\u0001ä»¥ã¢ˆëš”.å±³\u001e:\u0003:QPä¶²#(\u000f[é©§åœ‹Yâ?”\u0018áª¾é°µîŒ¾â†»<èš¯á?¨ç–‹\\\\\u0014OC<+ãŸ¹AT\u0001ï¦?é¡¤ï¤¸à³·??B,í?¸:ä¡¨KèŒ­Xç¢’=Kê?¯",
                                                               false, true, false, 38, null, null,
                                                               "05a49bb2-0c53-412d-a710-bec133e8cbd1", -92,
                                                               "0575b4f1-a85e-4ba9-a901-ea08e1fbe59466eb02b2-f0a3-4d85-8861-4b164b8d7ac64d853827-6a62-49c0-bce1-9721df67dcb1",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559300105182L),
                                                               "1@çº?b2/6ç˜©^â¹­\u000e##é‘‹áŠž[[á……bê¹ƒR01M>V:C0AL!5*0+ã‚©\u0015N1âŠ…\u0019â?¦î›Ÿ\u0010?;%2ZFâ?»3<?á“°R@P39ã…°9:");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "2acf900e-8277-48ed-88d3-afa36285f7a9",
                                                             new Date(1559300099058L), -12, null,
                                                             "8662d.9e8f1@0475e.fr", false,
                                                             "90449732-887f-468c-b2de-304b435471f2",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, true, 32,
                                                             null, null, "8540af2d-9b3c-498a-9511-9915656c99da", -3,
                                                             "7ab08ed7-a811-47c1-a167-eb931577d246",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300103964L), "c4K=.");
            SubtenantUser subtenantuser2 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "2acf900e-8277-48ed-88d3-afa36285f7a9",
                                                             new Date(1559300099058L), -12, null,
                                                             "8662d.9e8f1@0475e.fr", false,
                                                             "90449732-887f-468c-b2de-304b435471f2",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, true, 32,
                                                             null, null, "8540af2d-9b3c-498a-9511-9915656c99da", -3,
                                                             "7ab08ed7-a811-47c1-a167-eb931577d246",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300103964L), "c4K=.");
            SubtenantUser subtenantuser3 = new SubtenantUser("e5adc84a514e5b3d136332ece0ac7d95", null,
                                                             "5947d7f0-82e6-49e7-a8eb-b8bbb5a9b342",
                                                             new Date(1559300101238L), -75, null,
                                                             "8dc69.58379@7c9e4.fr", false,
                                                             "cc622a0a-7d12-47fc-85e4-4306c3a3c71e",
                                                             "e5adc84a514e5b3d136332ece0ac7d95", false, false, true,
                                                             124, null, null, "075fe02b-a250-44a3-aac4-a094b2d17bf2",
                                                             -107, "8fbbb973-7cc9-4328-81aa-0d62a1f9ab09",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559300097703L), "c4K=.");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
