// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("de227bdd-4a44-48bc-b127-7e640257e9eb", null,
                                                             "06f34a05-efce-4eb8-92ce-5eeb07c1f544",
                                                             new Date(1551867950332L), 50, null,
                                                             "36b1e138-1232-4473-95fc-12926fb84d3a", false,
                                                             "6aca2abf-103a-4b35-9b2f-5dd51d64df70",
                                                             "2cc40a4e-88f6-41b0-bd3b-4d45ce7b078a", -97, null, null,
                                                             true, "9d81fc11-6e1d-484a-8fd7-1f0732854757", -4,
                                                             "65a6748c-9079-4aba-810e-42e1eb24be98",
                                                             SubtenantUserStatus.getDefault(), false, null, true,
                                                             new Date(1551867945784L),
                                                             "85682101-709d-4253-ba15-a2fc0d434b39");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("97de9323-6ec8-493f-9183-95dd8dd8d944", null,
                                                             "a2f274fb-db9c-4204-9e49-596554bd5205",
                                                             new Date(1551867951866L), 95, null,
                                                             "22c6fbce-eb2c-4bae-b682-ffa26ffc300f", true,
                                                             "5da595ad-2562-40fb-9ccc-5c9030901437",
                                                             "66c26476-5e1a-4321-aedd-961700fa3bef", 94, null, null,
                                                             true, "fe3b48bf-4646-4aab-9c3e-929054bf8c67", 95,
                                                             "39dd1cc2-aebc-4dbf-b939-3a41a35627b7",
                                                             SubtenantUserStatus.getDefault(), false, null, true,
                                                             new Date(1551867949894L),
                                                             "83fab48f-1717-4ae3-8dc3-2d5c0e377161");
            SubtenantUser subtenantuser2 = new SubtenantUser("97de9323-6ec8-493f-9183-95dd8dd8d944", null,
                                                             "a2f274fb-db9c-4204-9e49-596554bd5205",
                                                             new Date(1551867951866L), 95, null,
                                                             "22c6fbce-eb2c-4bae-b682-ffa26ffc300f", true,
                                                             "5da595ad-2562-40fb-9ccc-5c9030901437",
                                                             "66c26476-5e1a-4321-aedd-961700fa3bef", 94, null, null,
                                                             true, "fe3b48bf-4646-4aab-9c3e-929054bf8c67", 95,
                                                             "39dd1cc2-aebc-4dbf-b939-3a41a35627b7",
                                                             SubtenantUserStatus.getDefault(), false, null, true,
                                                             new Date(1551867949894L),
                                                             "83fab48f-1717-4ae3-8dc3-2d5c0e377161");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("409e73ed-01cf-4740-9e6a-204d71e936cf", null,
                                                        "3925d7c3-c71c-4f7c-9b94-e027705ca575",
                                                        new Date(1551867948361L), 119, null,
                                                        "43005f68-9c79-4ad8-a754-f7614c1e36a1", true,
                                                        "66fac404-f7e9-4760-b76d-8e05de7302a8",
                                                        "278d65d9-1016-4bf5-a837-9eb137fe0a33", 93, null, null, true,
                                                        "06c1404b-b922-4c55-925c-ca57a6c219b1", 95,
                                                        "73a2b83a-35cc-4340-a144-27ed7328d4c5",
                                                        SubtenantUserStatus.getDefault(), true, null, false,
                                                        new Date(1551867947712L),
                                                        "9b409d22-52f6-43ec-a769-d71ce062bcc0");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "71ac0898-fdd5-485f-b696-01d6796dc329",
                                                               new Date(1551867944842L), 42, null, null, false,
                                                               "65fa10ea-6d07-4579-b1e6-0006fdf44e89",
                                                               "9ad88698-3134-4f03-82e1-8e47f963d52a", 44, null, null,
                                                               true, "5405ea06-7575-4f25-9fa7-ad61ef7c6222", 56,
                                                               "d027a9f9-8a52-47db-964e-c9b4c06908bc",
                                                               SubtenantUserStatus.getDefault(), true, null, true,
                                                               new Date(1551867950742L),
                                                               "e5b20dc7-faac-461b-94fb-9760c36d161f");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("c4a2620c-6d34-4969-8589-6ba34a1c966d", null,
                                                             "c5d730b1-1b5a-48be-81ed-e7136776e4e1",
                                                             new Date(1551867944563L), -77, null,
                                                             "941b93c5-1c99-46f4-8e50-780bb027a2c5", false,
                                                             "7e51bc35-aa17-4d9d-8687-e4989f8a38a3",
                                                             "711c0207-a584-4cbb-9258-e3ad6af967d2", 121, null, null,
                                                             false, "5293c428-cb15-40b8-97ff-23ebcb84cd52", -56,
                                                             "4551f010-931b-4346-a9f7-cdac22197721",
                                                             SubtenantUserStatus.getDefault(), true, null, false,
                                                             new Date(1551867948052L),
                                                             "f53b2583-72c0-4b12-9c31-818f26fe954b");
            SubtenantUser subtenantuser2 = new SubtenantUser("c4a2620c-6d34-4969-8589-6ba34a1c966d", null,
                                                             "c5d730b1-1b5a-48be-81ed-e7136776e4e1",
                                                             new Date(1551867944563L), -77, null,
                                                             "941b93c5-1c99-46f4-8e50-780bb027a2c5", false,
                                                             "7e51bc35-aa17-4d9d-8687-e4989f8a38a3",
                                                             "711c0207-a584-4cbb-9258-e3ad6af967d2", 121, null, null,
                                                             false, "5293c428-cb15-40b8-97ff-23ebcb84cd52", -56,
                                                             "4551f010-931b-4346-a9f7-cdac22197721",
                                                             SubtenantUserStatus.getDefault(), true, null, false,
                                                             new Date(1551867948052L),
                                                             "f53b2583-72c0-4b12-9c31-818f26fe954b");
            SubtenantUser subtenantuser3 = new SubtenantUser("4e29a975-9aa4-46fb-9e80-48da68fc2678", null,
                                                             "825652e4-162b-4b3a-9b0b-162106a67661",
                                                             new Date(1551867949286L), -109, null,
                                                             "84796ffb-4c64-4805-bdad-027085c56859", false,
                                                             "af9a8d11-cebf-449d-8dc9-b02b2ff22ca4",
                                                             "26d2ee82-78e6-4f4a-80e0-8531720f4267", 78, null, null,
                                                             false, "ea64abbb-5602-4fb0-9298-b276e285be77", -14,
                                                             "c6250e4b-137e-493c-b8e2-27cda87f578c",
                                                             SubtenantUserStatus.getDefault(), true, null, false,
                                                             new Date(1551867944632L),
                                                             "f357ebd7-738f-489f-bfd8-c492edcc5865");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
