// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "a3abdde8-4e32-4e02-b237-44b75c3b9318",
                                                             new Date(1559288255492L), 45, null, "3f646.a6a0d@24269.me",
                                                             true, "b5f2b139-0a0f-4645-9dcb-1fef4464c7a1",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false, false, false,
                                                             104, null, null, "8623449d-c639-4c75-8804-0f9916dfff93",
                                                             49, "48ffeb69-8ef3-45e5-9636-b68f9bea888e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288256424L), "=f_zZ");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "520a7882-5aee-4004-9bc8-996f03cde985",
                                                             new Date(1559288258180L), 78, null, "a37ae.41599@697bd.fr",
                                                             false, "976580fb-0406-49c5-ac9b-4ce422f1ec94",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false, false, true, 58,
                                                             null, null, "3720a779-61a7-4592-b9da-0c3153f982f5", -120,
                                                             "9a40b996-1661-4b1f-8928-3e50efea4c96",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288257964L), "=f_zZ");
            SubtenantUser subtenantuser2 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "520a7882-5aee-4004-9bc8-996f03cde985",
                                                             new Date(1559288258180L), 78, null, "a37ae.41599@697bd.fr",
                                                             false, "976580fb-0406-49c5-ac9b-4ce422f1ec94",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", false, false, true, 58,
                                                             null, null, "3720a779-61a7-4592-b9da-0c3153f982f5", -120,
                                                             "9a40b996-1661-4b1f-8928-3e50efea4c96",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288257964L), "=f_zZ");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                        "36ad1099-77eb-428e-b7c7-e0c1d15cd159",
                                                        new Date(1559288257086L), -43, null, "a85ed.b6419@408bf.fr",
                                                        true, "02a46252-f379-45ef-99f3-f7b7d8b48a10",
                                                        "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true, false, true, -111,
                                                        null, null, "cf08bbba-ad3f-4b98-9de1-abf520cf2323", 121,
                                                        "d707a62b-5d0f-40b1-935b-fd24dcb01494",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559288256881L), "=f_zZ");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "be85932a-9545-4444-ac9c-ca33d94813f1",
                                                               new Date(1559288259889L), 57, null, null, false,
                                                               "df77eb3e-533e-4c6e-ae04-d59d2ffe406f5519870d-fa95-4679-839f-21e9ad4376f7ec61ee02-61ce-4f26-a5f8-4bbb3eb89bda",
                                                               "\u0012&æ…†\t`ì½µîˆ¶888^8á®§M\u0003K\u00108\\\\\u000eè°–8P&8)$$8L;8ã³ªî?¥î¸š\u0011L8âšŠ\u000f\u0014ê?¨88YKKéŽ¨F\u0013^Ú¥8ë¦?!\u001008FZèŸ›ë‚œ8^E",
                                                               true, true, false, -93, null, null,
                                                               "9a873d61-eac8-47f2-94ea-d5b0b984445e", -113,
                                                               "e18b8b7f-0ec8-4a75-a996-b507dfdf97b819dc1eb9-7e4d-42bb-896d-e9f14ce233b4cd9580b7-bfcf-4552-a77d-0af593aa2f3e",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559288259195L),
                                                               "cy^î•¸^î·¨^Mk^]\\\\bjNh\u001bG\u001d`nE]\fcå´?#heã¨€^sæ§³)ê™¯á¤ŸGå??s`Õ­iç •dJVîª“jPsV[^è…“Yï‡•`Jï’˜\\\\æ´Žï–ŸV");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "792217c5-c4f9-4226-8009-d63fc0c5fdf7",
                                                             new Date(1559288253649L), 8, null, "8d261.a2eb6@ada4d.me",
                                                             false, "893b0506-bf53-40a4-a5eb-1a0a71f5b3ed",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true, true, true, -48,
                                                             null, null, "4886714a-9a36-4ee2-b79a-03a101e7c58c", -86,
                                                             "5d9ad9e6-5a23-4abf-9f8e-373db49080fd",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288261907L), "=f_zZ");
            SubtenantUser subtenantuser2 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "792217c5-c4f9-4226-8009-d63fc0c5fdf7",
                                                             new Date(1559288253649L), 8, null, "8d261.a2eb6@ada4d.me",
                                                             false, "893b0506-bf53-40a4-a5eb-1a0a71f5b3ed",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true, true, true, -48,
                                                             null, null, "4886714a-9a36-4ee2-b79a-03a101e7c58c", -86,
                                                             "5d9ad9e6-5a23-4abf-9f8e-373db49080fd",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288261907L), "=f_zZ");
            SubtenantUser subtenantuser3 = new SubtenantUser("3bfc9cdfe313bbd7bcb627c7a4f35e1e", null,
                                                             "c90a3700-7b44-43d4-b5eb-92750c9955af",
                                                             new Date(1559288254115L), -13, null,
                                                             "b8824.5fcce@21af5.me", false,
                                                             "664b4c0d-e826-4ae2-9dca-eddf051a4320",
                                                             "3bfc9cdfe313bbd7bcb627c7a4f35e1e", true, true, true, 35,
                                                             null, null, "6bf9f1f9-28da-42f6-bb5d-84ed083a27d7", -13,
                                                             "ae318efa-32cf-4d03-b24a-f620c7e3b494",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559288259460L), "=f_zZ");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
