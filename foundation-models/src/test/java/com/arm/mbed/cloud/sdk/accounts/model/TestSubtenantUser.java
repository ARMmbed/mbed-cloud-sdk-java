// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("52f136d8-77d8-4225-89e3-0c671f66542a",
                                                             "a09b9ae1-7b9c-47cc-a95c-d2a4ddb8210f",
                                                             new Date(1547573360478L), -96,
                                                             "80cfb2d5-d481-4814-8a20-5bcda4847ddd", true,
                                                             "b4cbb88b-ce18-4479-aecb-a51cce557e2c",
                                                             "7d77bb23-da2b-4775-b591-604184ce5dd6", -62, null, null,
                                                             true, "75b019d9-b0d0-4620-9458-b82b2af74755", 10,
                                                             "a4115400-8a23-43b0-a1d9-cae526e3a5c7",
                                                             SubtenantUserStatus.getDefault(), false, true,
                                                             new Date(1547573360080L),
                                                             "7fa7bbb8-4f07-4d23-934a-ea21635f74f6");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("5e04ca17-df08-462b-ab07-71ec0f3ae553",
                                                             "efdf20e4-a14f-47e5-97fd-d6dd951eb142",
                                                             new Date(1547573356762L), -61,
                                                             "854aca66-3a24-4b01-a74f-720dd5948a33", true,
                                                             "7904156d-aa69-4a25-ab35-7276a6df45d4",
                                                             "0a7768f0-d02a-4d52-8ac5-1b53ea8d6baa", 21, null, null,
                                                             true, "8e3bb626-b7d8-433a-8b50-e61c09e8484c", -4,
                                                             "e1a7fadb-9103-425e-b2e2-3174bd4b62bc",
                                                             SubtenantUserStatus.getDefault(), true, true,
                                                             new Date(1547573359211L),
                                                             "86a31dec-ddb5-49fd-8b89-64e54af8af0f");
            SubtenantUser subtenantuser2 = new SubtenantUser("5e04ca17-df08-462b-ab07-71ec0f3ae553",
                                                             "efdf20e4-a14f-47e5-97fd-d6dd951eb142",
                                                             new Date(1547573356762L), -61,
                                                             "854aca66-3a24-4b01-a74f-720dd5948a33", true,
                                                             "7904156d-aa69-4a25-ab35-7276a6df45d4",
                                                             "0a7768f0-d02a-4d52-8ac5-1b53ea8d6baa", 21, null, null,
                                                             true, "8e3bb626-b7d8-433a-8b50-e61c09e8484c", -4,
                                                             "e1a7fadb-9103-425e-b2e2-3174bd4b62bc",
                                                             SubtenantUserStatus.getDefault(), true, true,
                                                             new Date(1547573359211L),
                                                             "86a31dec-ddb5-49fd-8b89-64e54af8af0f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("70c5f45f-23f3-45d4-adee-286ad44c8a83",
                                                        "bc6c743e-618c-4f22-9e7b-f01b1632ae70",
                                                        new Date(1547573359032L), -16,
                                                        "b51ff727-d2fa-4618-8c69-7a0860cc6b11", false,
                                                        "96c7f896-2f91-466e-9d34-8375256989cd",
                                                        "5106762e-9dbd-42ab-ab73-909d7907e1b7", 22, null, null, false,
                                                        "5b6a2258-5a3f-46e0-bf4a-ff7bc4437314", -79,
                                                        "559c1e75-2e24-404d-8fac-e6e704ac6d75",
                                                        SubtenantUserStatus.getDefault(), true, true,
                                                        new Date(1547573356721L),
                                                        "37fa96f4-3546-4738-b547-819fe3612d3e");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, "2e8aee6f-a1b7-4db2-b97a-f265de6a78d1",
                                                               new Date(1547573357466L), -56, null, false,
                                                               "30882f87-5318-4ec6-ac82-3970c7fd0dad",
                                                               "b2abdea1-900a-4167-83a3-36db3e751368", 74, null, null,
                                                               true, "a0a241b8-084f-4d67-8ca8-bd18c6686acf", 25,
                                                               "ed778c49-c5f4-4a81-ae70-b961539cac0c",
                                                               SubtenantUserStatus.getDefault(), true, false,
                                                               new Date(1547573359139L),
                                                               "4f4cb4ed-3e5a-4953-b0d2-4770671e0fa7");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("63663eaa-a310-4bdc-aa74-6809bcb3ec51",
                                                             "3bda6aca-4e4f-4672-be43-4d8c077c73a2",
                                                             new Date(1547573361923L), 68,
                                                             "ccc30daa-e1a1-4dc9-aa5d-4e5b5518a287", false,
                                                             "9c72921d-933a-4d18-86ee-f3bc8295ad01",
                                                             "d471bb1f-fe8d-46ce-9b38-fcabdca95e3c", -97, null, null,
                                                             false, "6542fe51-9ffc-4fd7-ba0a-69260ef8697e", 123,
                                                             "1fa42e47-e4db-4588-823e-cdcc9e39d619",
                                                             SubtenantUserStatus.getDefault(), true, false,
                                                             new Date(1547573363361L),
                                                             "cc433156-7592-40f6-bfd7-276f14bbd8b8");
            SubtenantUser subtenantuser2 = new SubtenantUser("63663eaa-a310-4bdc-aa74-6809bcb3ec51",
                                                             "3bda6aca-4e4f-4672-be43-4d8c077c73a2",
                                                             new Date(1547573361923L), 68,
                                                             "ccc30daa-e1a1-4dc9-aa5d-4e5b5518a287", false,
                                                             "9c72921d-933a-4d18-86ee-f3bc8295ad01",
                                                             "d471bb1f-fe8d-46ce-9b38-fcabdca95e3c", -97, null, null,
                                                             false, "6542fe51-9ffc-4fd7-ba0a-69260ef8697e", 123,
                                                             "1fa42e47-e4db-4588-823e-cdcc9e39d619",
                                                             SubtenantUserStatus.getDefault(), true, false,
                                                             new Date(1547573363361L),
                                                             "cc433156-7592-40f6-bfd7-276f14bbd8b8");
            SubtenantUser subtenantuser3 = new SubtenantUser("9f702357-6e4e-4b0c-961f-b9d4e6089de0",
                                                             "e0f269cc-7747-4a1a-a93a-ba8da5cda902",
                                                             new Date(1547573356308L), -37,
                                                             "e411a345-7996-4142-8c34-6459f79e7567", false,
                                                             "9c3ecd83-e718-461f-b98b-c8b58817bf91",
                                                             "fc831332-c274-4589-8d1a-7f0b732e9375", 109, null, null,
                                                             false, "5094e98c-9dba-4f80-a87a-b4f1c0b5aa5c", 103,
                                                             "c5e7dacc-bce2-42af-a7e0-5e9d4592747d",
                                                             SubtenantUserStatus.getDefault(), true, false,
                                                             new Date(1547573361287L),
                                                             "86ab03e3-c584-481f-8f58-b13e6a4edca0");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
