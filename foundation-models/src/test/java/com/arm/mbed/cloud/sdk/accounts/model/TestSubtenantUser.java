// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "877ea937-fb48-43e9-82a7-207987f65eb9",
                                                             new Date(1559758607520L), -73, null,
                                                             "b2d03.48d78@efdac.me", false,
                                                             "7036f506-27fc-4dbf-afa2-32bd075bde4b",
                                                             "360efa29edf1702da7045dd46bf2c0ee", true, true, true, 25,
                                                             null, null, "6da3e221-a40a-4c8e-8fca-fbcb05c2b4f3", -114,
                                                             "e96df24a-53ab-4d59-bf5c-c4cdeb1454ce",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758604429L), "==_5=");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "baed7400-9a1d-4915-a75b-030f1774b1c4",
                                                             new Date(1559758613004L), 87, null, "1a390.0da33@7ce32.fr",
                                                             true, "a4d1b399-0f90-4ef0-87f2-25481af57f82",
                                                             "360efa29edf1702da7045dd46bf2c0ee", false, false, false,
                                                             -26, null, null, "7ddf29d5-600b-41f2-b32e-1c647833c8c6",
                                                             57, "c2c23163-9da0-4466-a7de-e307b6e6074c",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758608642L), "==_5=");
            SubtenantUser subtenantuser2 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "baed7400-9a1d-4915-a75b-030f1774b1c4",
                                                             new Date(1559758613004L), 87, null, "1a390.0da33@7ce32.fr",
                                                             true, "a4d1b399-0f90-4ef0-87f2-25481af57f82",
                                                             "360efa29edf1702da7045dd46bf2c0ee", false, false, false,
                                                             -26, null, null, "7ddf29d5-600b-41f2-b32e-1c647833c8c6",
                                                             57, "c2c23163-9da0-4466-a7de-e307b6e6074c",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758608642L), "==_5=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                        "b7c1bd95-11de-48cf-b6e1-4f6ec1b03611",
                                                        new Date(1559758607404L), -110, null, "9312b.6e9be@28a0f.me",
                                                        true, "50bd1169-ebfd-4142-92c1-06991acfcab9",
                                                        "360efa29edf1702da7045dd46bf2c0ee", true, false, false, -42,
                                                        null, null, "4663bae6-f116-472f-a8df-f7df8c72f860", 120,
                                                        "834c3105-b70d-4f10-b96c-5177b14681a9",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559758606610L), "==_5=");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "fe33c32e-2cd7-4d22-a95d-53962435367d",
                                                               new Date(1559758608177L), -13, null, null, false,
                                                               "06ce0ce6-08c7-41f1-a302-7e67af6dc88b1c913758-a63a-4def-b608-10e807c54a152a74431b-de71-4efa-a415-0b88d31bdc8e",
                                                               "TU8ã½…\u0019ZDDâ¬?ê²…8êˆ›è½?*8ç¾‚_\u000e\t\u0013W8Tí‘¼åµ…,\u0001. 8ê?¢8è¡¾\u0001é†€ 8î¢˜\u001bç¶’Sç‚¤ê·ˆ\bëŸ¬\u0011L8\u0010K?î¶¥8ï‚•è‰­ë§¦\u000eG*êµ­8Q8",
                                                               false, false, false, 113, null, null,
                                                               "3e8a9e05-7547-43e0-99b1-4dd560bb077a", 91,
                                                               "7c798148-3921-4332-b322-8642bd3cd048d8017978-e841-4312-9b2e-ec36f5dff5aec799cea7-307d-450c-bd8e-50f18c8f7ae2",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559758607820L),
                                                               "Y8/å²?ä•²V3;6\u00128ê¢†î§¼\u0005*\u0015$$#í’´ä¿„9RZ\u001aé·¥\u0004!\u0013î†¬76äŽ­\u000b\u00136;$$Z:<6E,ìŒ˜Qç‘„à¶ˆî·’ê©º\bà¦Ÿä¼ˆ966-E8[\u000eæ˜©è»°\u0019âµ?");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "0d684c8e-69cc-45d9-8fcb-570e40ecf76a",
                                                             new Date(1559758606673L), 38, null, "cf692.cf787@83619.fr",
                                                             false, "454cd866-84ba-4b4e-abd9-8c2fff424977",
                                                             "360efa29edf1702da7045dd46bf2c0ee", false, true, false,
                                                             109, null, null, "8eea5c32-b7f1-491f-a76b-cd9bc80bad4b",
                                                             -9, "860578bf-6531-4094-a54a-20f65a9ca3b0",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758609693L), "==_5=");
            SubtenantUser subtenantuser2 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "0d684c8e-69cc-45d9-8fcb-570e40ecf76a",
                                                             new Date(1559758606673L), 38, null, "cf692.cf787@83619.fr",
                                                             false, "454cd866-84ba-4b4e-abd9-8c2fff424977",
                                                             "360efa29edf1702da7045dd46bf2c0ee", false, true, false,
                                                             109, null, null, "8eea5c32-b7f1-491f-a76b-cd9bc80bad4b",
                                                             -9, "860578bf-6531-4094-a54a-20f65a9ca3b0",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758609693L), "==_5=");
            SubtenantUser subtenantuser3 = new SubtenantUser("360efa29edf1702da7045dd46bf2c0ee", null,
                                                             "b1e45cb3-1241-40e0-93b5-ff4cf69f5830",
                                                             new Date(1559758606854L), 19, null, "def62.91622@69932.me",
                                                             false, "214d5575-f3e8-4c03-8b8a-57cb0dc8f987",
                                                             "360efa29edf1702da7045dd46bf2c0ee", false, true, false, 80,
                                                             null, null, "f76fc098-6618-41ff-b247-7cc82f1d9ec0", 117,
                                                             "ca2c66fd-b398-4506-8701-780b75a4841e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559758609463L), "==_5=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
