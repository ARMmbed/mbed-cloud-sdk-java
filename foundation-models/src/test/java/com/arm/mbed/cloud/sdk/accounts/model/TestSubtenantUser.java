// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "897f7fb9-f70f-4567-85b0-6f2397a8d249",
                                                             new Date(1559662778606L), 122, null,
                                                             "90676.e8f04@846e3.me", false,
                                                             "1e61da6e-4dd4-4409-a389-c9285ccdda54",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", false, true, true, 91,
                                                             null, null, "2ad7d479-d6f8-445b-a6fc-c4634c968634", 43,
                                                             "d60e9d92-a89f-41e9-8c38-76825e49338a",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662781699L), "J9+6f");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "36b734dd-8ae3-46b7-bfac-b8215de5354b",
                                                             new Date(1559662783763L), 39, null, "e27c7.0b248@8f471.me",
                                                             true, "79e4e703-9710-463f-ad93-04d8ff018f9b",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", true, true, false, -47,
                                                             null, null, "36dba63c-247d-4658-ae12-a4b0105c4748", 1,
                                                             "d2acb1f8-c3a5-4f1e-9248-01b07cc86abe",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662782624L), "J9+6f");
            SubtenantUser subtenantuser2 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "36b734dd-8ae3-46b7-bfac-b8215de5354b",
                                                             new Date(1559662783763L), 39, null, "e27c7.0b248@8f471.me",
                                                             true, "79e4e703-9710-463f-ad93-04d8ff018f9b",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", true, true, false, -47,
                                                             null, null, "36dba63c-247d-4658-ae12-a4b0105c4748", 1,
                                                             "d2acb1f8-c3a5-4f1e-9248-01b07cc86abe",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662782624L), "J9+6f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                        "e36b535c-0bbd-4391-bf22-b7127827cb11",
                                                        new Date(1559662780528L), -74, null, "28792.1ab68@c4fec.me",
                                                        false, "4b2bf781-f8be-4de0-8672-dc082d65d03c",
                                                        "f33f4df6191a3d432ba4b4ea8fd5906b", true, true, false, -81,
                                                        null, null, "130b5189-5352-43f1-912a-83fefc1b05ff", 20,
                                                        "7600866d-a70b-4196-a08f-20c94b160cab",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559662777130L), "J9+6f");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "dde870f6-d4ce-4b4e-9a0d-ee4399fd451a",
                                                               new Date(1559662785903L), 54, null, null, false,
                                                               "729bc9fb-09f0-44b8-81fd-05b49a296effa7533da7-8997-486e-9fb9-b0a072dcab31e8e4189b-3999-49c3-a2f5-c95eb4be3585",
                                                               "7ã??cccUî‡±c7ä¨§\u0003îŒ¾æ­œ7c^Tæ·¨c`è–¯ä•§7cD7äž¾c\u0006\u00117ST-7K-cé§ƒ7cë¼¯ãŠ¯\t\t7cÕ¶cã²ŽâŸ¢\u00177 ;í?½cã½Œ%æ¿´B?7",
                                                               false, true, true, 73, null, null,
                                                               "a4ecb9e6-c0fa-4dfd-b206-1102f231d7ea", 117,
                                                               "64410793-6c74-4ad9-98b9-f17747b3055adcc12992-d51c-416f-8439-9de1e4398106fb1549d5-100c-4e1d-bd17-078991757b65",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559662781121L),
                                                               "\u001e?Oå§¡ç„•\u0001Hí?–8I\u0006_#ä¬?\u0012;7,7í‹…8FUì‘¤ã¨›83:7NP85\u0007@'X)<>Oæ?±7\u001bâº¿\u0007æŒž\u0016>1]ç“‚^aSè¹?\u0015\u0012d1\u0014é¯½ã€ƒ\u001c");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "38974794-e5d7-4337-b7cc-1bb12bff7b43",
                                                             new Date(1559662779834L), 105, null,
                                                             "0662a.13e18@cc719.me", false,
                                                             "7cb0b27e-b2f8-4a7d-9a98-d8df433cf694",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", true, false, true, 5,
                                                             null, null, "21b1f571-15c3-4ec6-9f9a-b808743b6dee", -12,
                                                             "da26410b-9c3d-41e9-a43d-25ba9562c8e2",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662779261L), "J9+6f");
            SubtenantUser subtenantuser2 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "38974794-e5d7-4337-b7cc-1bb12bff7b43",
                                                             new Date(1559662779834L), 105, null,
                                                             "0662a.13e18@cc719.me", false,
                                                             "7cb0b27e-b2f8-4a7d-9a98-d8df433cf694",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", true, false, true, 5,
                                                             null, null, "21b1f571-15c3-4ec6-9f9a-b808743b6dee", -12,
                                                             "da26410b-9c3d-41e9-a43d-25ba9562c8e2",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662779261L), "J9+6f");
            SubtenantUser subtenantuser3 = new SubtenantUser("f33f4df6191a3d432ba4b4ea8fd5906b", null,
                                                             "88b9386d-2422-4770-8d57-cc536700b3fe",
                                                             new Date(1559662783026L), 119, null,
                                                             "288a7.3518a@7c092.fr", false,
                                                             "0c4dcc68-70b6-4219-a494-5715f28e7533",
                                                             "f33f4df6191a3d432ba4b4ea8fd5906b", true, false, true, -91,
                                                             null, null, "4c797fb1-2c52-46e7-98e6-2285e80c40f8", -74,
                                                             "eedfd481-28c2-4f01-b740-ebffc8d30089",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559662780505L), "J9+6f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
