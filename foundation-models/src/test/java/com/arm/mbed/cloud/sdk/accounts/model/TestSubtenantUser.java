// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "3c6e20b5-ad55-4289-9936-0b08c9620f2e",
                                                             new Date(1559655028702L), -7, null, "70d2f.e0f20@447e3.fr",
                                                             false, "650f733c-fd3f-4489-a3c3-8c1cbaed5830",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", true, false, false, 21,
                                                             null, null, "09bfdcec-2c6b-4218-a527-4a72a600a062", -89,
                                                             "34832072-1c39-4b92-80fe-6eb0af617723",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655032823L), "DG,r=dw");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "daa0364b-aaf9-4ffc-898e-0e8db9487c32",
                                                             new Date(1559655034170L), -6, null, "d2386.ca74d@13811.me",
                                                             true, "f0bacece-bca4-4bbe-8134-df22457a74c4",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", true, true, false,
                                                             -118, null, null, "77b63403-225a-4727-b4ea-b0ff35da78cb",
                                                             72, "648918b8-d9a0-48a2-bbef-87e5c54a7cd8",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655033822L), "DG,r=dw");
            SubtenantUser subtenantuser2 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "daa0364b-aaf9-4ffc-898e-0e8db9487c32",
                                                             new Date(1559655034170L), -6, null, "d2386.ca74d@13811.me",
                                                             true, "f0bacece-bca4-4bbe-8134-df22457a74c4",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", true, true, false,
                                                             -118, null, null, "77b63403-225a-4727-b4ea-b0ff35da78cb",
                                                             72, "648918b8-d9a0-48a2-bbef-87e5c54a7cd8",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655033822L), "DG,r=dw");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                        "91e6ecfb-223c-4c95-845f-73211e522d74",
                                                        new Date(1559655030694L), 39, null, "313ab.5710b@bf5b9.me",
                                                        true, "b2e2a55a-9baa-458c-96ba-8b8ea850e451",
                                                        "f7f9edc2df1fd9afea87465e2109cb51", false, false, false, -24,
                                                        null, null, "6ce45161-9928-46d5-9906-ce905bd4bf08", 46,
                                                        "195bb339-2619-46d3-bf2b-3a16e3d478d1",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559655037245L), "DG,r=dw");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "ce079cd4-7be0-4876-b084-a170fe12eb35",
                                                               new Date(1559655033484L), -13, null, null, true,
                                                               "7965704e-7bde-404d-9f8f-e483fa60c45bf8ca0bf5-b664-4a90-8238-09fe73d27fdf9921e0fe-c1d3-4e36-907c-c9889ba10771",
                                                               "ä»‚+K\u001aé¦¥ëŸ‡\u00103\bá­?L33.3C\u0000\u000e\u001bQ3Uç¨£3ä¯³CS\u0016Mï‹˜\fë¼™Q'3A.ï»¸Y3ã¯²\u0001[3 ì“¶333333J3æ¸—éºƒÊ£)\u00153ì?¼ä…Žà«”3",
                                                               true, true, true, -18, null, null,
                                                               "9212d19c-436d-4418-ab75-a2f0068bf5a8", -107,
                                                               "8e821016-5af5-4d3c-9c84-7cff218825270e175784-4d0d-444e-8f61-1630fc6fb1d9bc5e93bc-60ab-4460-baaa-cebf3e5d0270",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559655034360L),
                                                               "äª¼4ã†„enæ’³ZFe+@EC1\u0000bé”€ç?¶E4\u0019+Fkå›¼suá§ªiå½ŽEuEFe4\u0014NEvTvv\u001atC5VuvFç«—Fm;0\u000b>?\u0013t\u0016sM");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "2b9d5ce7-2fbb-4597-80ef-890394bea652",
                                                             new Date(1559655033764L), 43, null, "f301f.1c95e@60ee5.fr",
                                                             true, "eab102c6-3303-45b5-8fd5-a30b36353e0b",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", false, true, true, 13,
                                                             null, null, "e7d5c4d9-8801-4157-a2c9-fbf767db059c", -113,
                                                             "ae49537d-06db-4f0a-831b-e7c46f7f5b22",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655034931L), "DG,r=dw");
            SubtenantUser subtenantuser2 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "2b9d5ce7-2fbb-4597-80ef-890394bea652",
                                                             new Date(1559655033764L), 43, null, "f301f.1c95e@60ee5.fr",
                                                             true, "eab102c6-3303-45b5-8fd5-a30b36353e0b",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", false, true, true, 13,
                                                             null, null, "e7d5c4d9-8801-4157-a2c9-fbf767db059c", -113,
                                                             "ae49537d-06db-4f0a-831b-e7c46f7f5b22",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655034931L), "DG,r=dw");
            SubtenantUser subtenantuser3 = new SubtenantUser("f7f9edc2df1fd9afea87465e2109cb51", null,
                                                             "528de9bc-5131-41de-80df-4cdd37741c5a",
                                                             new Date(1559655032144L), 41, null, "6f53f.ecdc4@16908.me",
                                                             true, "bcbd61e4-c766-4d69-ba70-8c8523476fbe",
                                                             "f7f9edc2df1fd9afea87465e2109cb51", false, true, true, -28,
                                                             null, null, "e0c18c2f-c24d-496f-8e96-c089c14bb00c", 91,
                                                             "5522d801-a033-487e-9f5d-13e27bda4b4b",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559655028424L), "DG,r=dw");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
