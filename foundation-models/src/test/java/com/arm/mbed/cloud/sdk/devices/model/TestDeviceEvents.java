// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547159624741L), null,
                                                          new Date(1547159627751L),
                                                          "83706191-c257-4f53-9bcc-21bf0195106a",
                                                          "c802b2b5-c325-471b-9fec-d3880215bdad",
                                                          "dafde0bf-8ca0-4e9e-a477-7402e1a21a4c",
                                                          "327e092c-4d5f-4d39-a8bc-9519bece5973",
                                                          "621c0a8b-eb74-40ea-a138-e4db608f2061",
                                                          "e7b53ae1-00f0-40cc-8522-110e8a7fd701", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547159622427L), null,
                                                          new Date(1547159620905L),
                                                          "16dfe98a-9e65-421b-89a7-9e7eec85b69c",
                                                          "d3a84ee4-cdec-4c3c-ae79-333b34457671",
                                                          "3b7d237b-723d-473b-b58d-3697b600506a",
                                                          "79a6c12a-2a49-4b6b-86a4-f815a3fdbc52",
                                                          "06a58bfd-6f1a-45a9-9185-eee75847ba03",
                                                          "41368968-c062-4644-92c6-2753c82358f5", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547159622427L), null,
                                                          new Date(1547159620905L),
                                                          "16dfe98a-9e65-421b-89a7-9e7eec85b69c",
                                                          "d3a84ee4-cdec-4c3c-ae79-333b34457671",
                                                          "3b7d237b-723d-473b-b58d-3697b600506a",
                                                          "79a6c12a-2a49-4b6b-86a4-f815a3fdbc52",
                                                          "06a58bfd-6f1a-45a9-9185-eee75847ba03",
                                                          "41368968-c062-4644-92c6-2753c82358f5", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547159628745L), null, new Date(1547159623272L),
                                                     "8e973e33-48d2-4d09-bb26-88beb9ff833a",
                                                     "fdb761de-3182-48c6-8a5a-ad076d97281e",
                                                     "94c43104-28c8-4531-baee-26c4d54241ab",
                                                     "0f8228fa-cf13-43e6-8aa2-1f9b167ceb7d",
                                                     "9a8536d4-1d7b-42d6-a933-fd64c7a4b1b3",
                                                     "86083d4c-e64f-4395-8add-f675987178c5", true);
        assertTrue(deviceevents.isValid());
        DeviceEvents deviceeventsInvalid = new DeviceEvents(null, new Date(1547159626191L), null,
                                                            new Date(1547159621686L),
                                                            "4c74a356-4bc0-4247-b1ba-fc413474946a",
                                                            "5bd2b1e0-c1fb-4d2a-b9cc-5092982e3196",
                                                            "ac96681b-3c4e-4a22-bdd3-afb04c480b26",
                                                            "e36dcc5b-8fc1-47dc-95bc-9d8af853a287",
                                                            "1301d599-cd53-4dc0-9ea8-8bce5f315dc8", null, true);
        assertFalse(deviceeventsInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547159623548L), null,
                                                          new Date(1547159624282L),
                                                          "f93bca48-0b88-4156-ad86-beb2db8f648d",
                                                          "98006f6c-9fa1-45cb-a57d-ee916efda2c8",
                                                          "b5f1ab1e-3c95-4269-987f-fa3cfd12176d",
                                                          "a142a1c3-d894-4b2a-bf3f-6b8c0632a9a9",
                                                          "155baf16-6761-44e7-be42-b46354060f5b",
                                                          "9bee0a8c-879f-466c-8af2-877d5a34f56a", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547159623548L), null,
                                                          new Date(1547159624282L),
                                                          "f93bca48-0b88-4156-ad86-beb2db8f648d",
                                                          "98006f6c-9fa1-45cb-a57d-ee916efda2c8",
                                                          "b5f1ab1e-3c95-4269-987f-fa3cfd12176d",
                                                          "a142a1c3-d894-4b2a-bf3f-6b8c0632a9a9",
                                                          "155baf16-6761-44e7-be42-b46354060f5b",
                                                          "9bee0a8c-879f-466c-8af2-877d5a34f56a", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547159622063L), null,
                                                          new Date(1547159623158L),
                                                          "269c0d72-9be2-4759-a872-d0d58cca8566",
                                                          "b8ad5fb2-d860-43a3-a04c-3a2b34bb8d9f",
                                                          "ebffd910-d796-4dc6-bd03-8c7d3ccf7ff2",
                                                          "9c251e2c-832b-4fd5-b952-cf7a7334217e",
                                                          "7f51c4f7-b9aa-47fe-a173-c79451a5181f",
                                                          "24bf5b40-45a9-431a-8b66-871487452a89", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
