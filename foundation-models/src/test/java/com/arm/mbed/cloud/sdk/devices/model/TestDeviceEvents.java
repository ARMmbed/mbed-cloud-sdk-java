// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1551867952871L), null,
                                                          new Date(1551867946904L),
                                                          "8d7a9865-5faf-49d4-964d-08644f1bdc94",
                                                          "6aac5978-08c6-4767-b346-f7dccc594baf",
                                                          "a33960e1-1dff-40e6-a6c6-9a9badc24c25",
                                                          "2ab1fe5f-e952-4baf-b94c-eba76519b360",
                                                          "3778c178-e637-4787-914e-bb6c8c394d1f",
                                                          "9a7115d3-d4f2-456c-8cb4-96d903c233c4", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1551867950372L), null,
                                                          new Date(1551867951948L),
                                                          "709cde30-eb4b-4553-9b73-07081241f4a2",
                                                          "bead3c96-d428-422b-b165-f618fbe50fda",
                                                          "e0d7dd50-edf3-42ab-8488-33a3a96025fb",
                                                          "859567fe-48f2-4023-83d0-3f8f4ce1dfbe",
                                                          "64390ea5-3ae8-415d-93ca-4f73d4397359",
                                                          "5484c87c-fae5-4c61-a0df-38117d31888b", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1551867950372L), null,
                                                          new Date(1551867951948L),
                                                          "709cde30-eb4b-4553-9b73-07081241f4a2",
                                                          "bead3c96-d428-422b-b165-f618fbe50fda",
                                                          "e0d7dd50-edf3-42ab-8488-33a3a96025fb",
                                                          "859567fe-48f2-4023-83d0-3f8f4ce1dfbe",
                                                          "64390ea5-3ae8-415d-93ca-4f73d4397359",
                                                          "5484c87c-fae5-4c61-a0df-38117d31888b", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1551867947881L), null, new Date(1551867945281L),
                                                     "faa4a7f9-81fa-4bcc-a0c6-a95f423640c4",
                                                     "1827b93e-9047-4607-be8c-4ea04a219af7",
                                                     "eca1346b-a897-46d4-ada2-591a141550d6",
                                                     "ded97856-eca7-43c6-8d71-fc8f5362b399",
                                                     "6d2baa77-34b4-488f-8490-1dcc62bd021d",
                                                     "d0143714-ed76-448d-a7ea-45e15a6affe0", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1551867949469L), null,
                                                          new Date(1551867951274L),
                                                          "15a2d734-aa1c-4b0e-864f-a1b6f7fb443f",
                                                          "5f6c5180-9afa-475b-8a9c-acd8bbabfd33",
                                                          "055b6d47-75eb-4094-a4fb-8fc97b4c2bac",
                                                          "7cc28704-37ad-4d7f-aacc-ee2ab475df71",
                                                          "72cfae6b-e24d-4b1b-9f76-19dc177f9755",
                                                          "17449c3a-31e3-46ea-8edb-73b9c8a8c3a6", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1551867949469L), null,
                                                          new Date(1551867951274L),
                                                          "15a2d734-aa1c-4b0e-864f-a1b6f7fb443f",
                                                          "5f6c5180-9afa-475b-8a9c-acd8bbabfd33",
                                                          "055b6d47-75eb-4094-a4fb-8fc97b4c2bac",
                                                          "7cc28704-37ad-4d7f-aacc-ee2ab475df71",
                                                          "72cfae6b-e24d-4b1b-9f76-19dc177f9755",
                                                          "17449c3a-31e3-46ea-8edb-73b9c8a8c3a6", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1551867950120L), null,
                                                          new Date(1551867944189L),
                                                          "f7074380-8e8a-474e-9ffc-dfbb8d716c7b",
                                                          "60d86c7a-a456-4992-b1c2-1e87e259b499",
                                                          "2c1ff80c-bdd5-4f87-946b-4a0d64bb2789",
                                                          "7b295eb6-fad7-4721-b15e-5e84f1a008e1",
                                                          "7a04211f-adce-4386-97b6-19575db410fa",
                                                          "17b9a200-ce41-47f8-84ad-2c012680bc7d", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
