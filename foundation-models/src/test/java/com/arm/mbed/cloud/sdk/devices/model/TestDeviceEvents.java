// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1546448718961L), null,
                                                          new java.util.Date(1546448712646L),
                                                          "6b4a7b60-1439-47fc-ac26-9460ee99e1b5",
                                                          "40f10cf1-31fb-496d-a190-bfe1fb59beb0",
                                                          "c87e2aec-9cc9-45d4-9dc6-4468076e4d60",
                                                          "9cb9e9a6-ca32-422a-92b8-c5c27f50d55d",
                                                          "57a7bf3c-5d4c-4eea-9195-84f94716fe6e",
                                                          "4f7ae3e1-af98-43ca-8192-d86269f506e4", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new java.util.Date(1546448719487L), null,
                                                     new java.util.Date(1546448713555L),
                                                     "ddf93945-8c7e-4ee6-b9b6-e4c50d7b8655",
                                                     "cbb47933-e9af-4814-842a-79a5ae6beb3e",
                                                     "40accb78-b6c4-42ed-b4f6-7886cbd79d76",
                                                     "6c084b57-9bb8-45b4-92a6-954af3cc4b20",
                                                     "850fb0f8-cc3e-4d5c-bdf0-f6f9e9423288",
                                                     "7897d049-2150-4a09-917f-f1e181d3c7d9", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1546448719859L), null,
                                                          new java.util.Date(1546448719464L),
                                                          "f5368aca-7483-4c16-a50f-e9c9cd4637ca",
                                                          "9c7b85f2-2790-4aa5-8155-f71b78666d5c",
                                                          "931243dc-6f5a-430a-9ac0-70965e464664",
                                                          "2b4f8129-cbfc-457b-ba18-28454d63737a",
                                                          "92de0e0f-27e8-4c98-9be8-7a12554fc9a6",
                                                          "558d5640-6bf9-459c-9f00-e7cd2ce98973", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new java.util.Date(1546448719859L), null,
                                                          new java.util.Date(1546448719464L),
                                                          "f5368aca-7483-4c16-a50f-e9c9cd4637ca",
                                                          "9c7b85f2-2790-4aa5-8155-f71b78666d5c",
                                                          "931243dc-6f5a-430a-9ac0-70965e464664",
                                                          "2b4f8129-cbfc-457b-ba18-28454d63737a",
                                                          "92de0e0f-27e8-4c98-9be8-7a12554fc9a6",
                                                          "558d5640-6bf9-459c-9f00-e7cd2ce98973", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1546448719395L), null,
                                                          new java.util.Date(1546448716833L),
                                                          "064d41c3-8642-4afd-82ab-057dbd014977",
                                                          "40fb66c7-b8bc-40c5-8402-a87732b2311b",
                                                          "edc87b53-f541-4209-82d6-ab2c3968e883",
                                                          "8645616a-3365-4cec-81b8-88fe5a5b7dcf",
                                                          "c8d71633-177b-462b-bcdc-b77d1463da9e",
                                                          "bb3c99cb-9b8a-4e92-816f-b17922cda5aa", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new java.util.Date(1546448719395L), null,
                                                          new java.util.Date(1546448716833L),
                                                          "064d41c3-8642-4afd-82ab-057dbd014977",
                                                          "40fb66c7-b8bc-40c5-8402-a87732b2311b",
                                                          "edc87b53-f541-4209-82d6-ab2c3968e883",
                                                          "8645616a-3365-4cec-81b8-88fe5a5b7dcf",
                                                          "c8d71633-177b-462b-bcdc-b77d1463da9e",
                                                          "bb3c99cb-9b8a-4e92-816f-b17922cda5aa", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new java.util.Date(1546448715962L), null,
                                                          new java.util.Date(1546448718748L),
                                                          "097a3f5d-8b9a-4716-ada8-d7ad882a7aef",
                                                          "21216a73-de15-4a12-a6de-af2e282bec9e",
                                                          "c1f5c513-3b63-4dd5-a071-3c4cb50d6d14",
                                                          "05c64791-76bc-4978-a511-662c9cf737f8",
                                                          "0e0f245d-327c-42ca-917d-48d2bc2056b7",
                                                          "ecda522d-f4d0-411c-a060-9b152103a405", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
