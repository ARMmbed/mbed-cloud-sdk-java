// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1547041494398L), null,
                                                          new java.util.Date(1547041495688L),
                                                          "faf8eaf8-2a23-47b3-ac8a-bbacda30b6dd",
                                                          "540e981d-72cc-4c1d-aff1-31ad311dd6cc",
                                                          "97525a60-4276-4252-85ef-4005ea38fb94",
                                                          "23d59b44-4dc3-4398-bf9b-a13f3f85bfb4",
                                                          "37646944-879f-423d-a28d-3fe2633d6c19",
                                                          "7acbbb0a-2c6e-4cdc-a13e-dfc92d6a6b9a", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1547041496497L), null,
                                                          new java.util.Date(1547041499553L),
                                                          "24f2906b-adaa-4aa6-bc9b-eeac9cb4017b",
                                                          "536a479c-7c14-43da-b852-b2c61fa886f9",
                                                          "b7b4c05e-886f-4c77-a297-73feaf55a1c9",
                                                          "c88ddefd-e041-4bb5-aaea-946cb744e112",
                                                          "c2aa56d7-3650-4a21-b148-f42ad5072900",
                                                          "a8c6b22e-e34d-4fe4-940f-51739d5779b6", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new java.util.Date(1547041496497L), null,
                                                          new java.util.Date(1547041499553L),
                                                          "24f2906b-adaa-4aa6-bc9b-eeac9cb4017b",
                                                          "536a479c-7c14-43da-b852-b2c61fa886f9",
                                                          "b7b4c05e-886f-4c77-a297-73feaf55a1c9",
                                                          "c88ddefd-e041-4bb5-aaea-946cb744e112",
                                                          "c2aa56d7-3650-4a21-b148-f42ad5072900",
                                                          "a8c6b22e-e34d-4fe4-940f-51739d5779b6", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new java.util.Date(1547041500020L), null,
                                                     new java.util.Date(1547041493062L),
                                                     "6520b869-690b-4444-a439-8ed8e5c73af5",
                                                     "94a05659-e15d-4054-b4a0-b1279bb4a1bd",
                                                     "56f215da-ccda-4e2d-b58a-64584da64e58",
                                                     "e71157fd-fdb8-4e47-855a-ed599f36a23c",
                                                     "848e260d-2fb9-408e-b6bb-cc2772284252",
                                                     "81a14cfe-1ac8-43f0-be69-5c1aaa2f306b", false);
        assertTrue(deviceevents.isValid());
        DeviceEvents deviceeventsInvalid = new DeviceEvents(null, new java.util.Date(1547041495467L), null,
                                                            new java.util.Date(1547041492664L),
                                                            "b56e32de-960f-40f6-9b12-748669b6ac35",
                                                            "7840e3bb-ae89-4a6a-b4fc-64a7c6e44f7c",
                                                            "a61fe73c-8d85-408b-a67e-667330319e75",
                                                            "959bdf2e-6491-49a2-82fe-ebec1900adfc",
                                                            "443a9509-359e-4631-abdb-6783879fb10c", null, false);
        assertFalse(deviceeventsInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new java.util.Date(1547041495926L), null,
                                                          new java.util.Date(1547041495304L),
                                                          "33ed450e-94ba-470f-a02b-f406abf08ed0",
                                                          "bf9268ee-00d8-4a13-88da-e3121dca6f40",
                                                          "b8600524-3fd7-4917-961b-5294829c6987",
                                                          "5a301b8b-f65b-4973-8129-60107f72560e",
                                                          "f54624cf-dafe-4794-9e41-18ba284e6ad8",
                                                          "5111154e-b527-4de5-b45c-6398b0ef883c", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new java.util.Date(1547041495926L), null,
                                                          new java.util.Date(1547041495304L),
                                                          "33ed450e-94ba-470f-a02b-f406abf08ed0",
                                                          "bf9268ee-00d8-4a13-88da-e3121dca6f40",
                                                          "b8600524-3fd7-4917-961b-5294829c6987",
                                                          "5a301b8b-f65b-4973-8129-60107f72560e",
                                                          "f54624cf-dafe-4794-9e41-18ba284e6ad8",
                                                          "5111154e-b527-4de5-b45c-6398b0ef883c", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new java.util.Date(1547041494675L), null,
                                                          new java.util.Date(1547041496700L),
                                                          "7015401e-55fc-46b3-8120-15e5f8b890a5",
                                                          "919c153b-516f-4546-9e6f-654619626293",
                                                          "896f6864-42bb-4489-b490-aa7bc7e66d57",
                                                          "b2949ab2-4223-46ea-b0f0-bc33e03e50c4",
                                                          "faf4bcff-d3bb-4d20-adfd-25c8b69262ca",
                                                          "8e2069a3-b396-46ad-b182-ff42d1c36865", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
