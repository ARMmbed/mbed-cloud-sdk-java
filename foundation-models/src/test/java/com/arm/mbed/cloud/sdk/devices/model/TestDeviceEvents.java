// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547164358152L), null,
                                                          new Date(1547164359088L),
                                                          "4c55bc50-a841-40eb-9340-9e4cb8af3526",
                                                          "a78439eb-daab-4f1d-bb3b-5ef98766988d",
                                                          "cc9eb1ae-f98b-485e-9b5a-d1c47f4553da",
                                                          "9fa606ae-f779-4c39-99de-b7adb82e6209",
                                                          "9932daeb-f1f5-410d-b884-355b5c5a24e0",
                                                          "8d08f683-eaf1-4797-825d-f9a91aa9e4f9", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547164361976L), null,
                                                          new Date(1547164359321L),
                                                          "f917907d-0a61-4f5e-ac24-a268a1a1b298",
                                                          "5df46822-0340-48b1-b05e-1dae3e2b5246",
                                                          "154b099e-7e9e-4c96-a1b6-f7354a222496",
                                                          "f0afab30-7556-413d-90d8-b6d389048e5c",
                                                          "6081677e-9417-4deb-b725-b52b0239947b",
                                                          "94a6ae88-fec9-42cd-b034-58a6760f2551", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547164361976L), null,
                                                          new Date(1547164359321L),
                                                          "f917907d-0a61-4f5e-ac24-a268a1a1b298",
                                                          "5df46822-0340-48b1-b05e-1dae3e2b5246",
                                                          "154b099e-7e9e-4c96-a1b6-f7354a222496",
                                                          "f0afab30-7556-413d-90d8-b6d389048e5c",
                                                          "6081677e-9417-4deb-b725-b52b0239947b",
                                                          "94a6ae88-fec9-42cd-b034-58a6760f2551", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547164358987L), null, new Date(1547164367141L),
                                                     "efffe75e-93fb-4a42-a8ce-3adc8e1c314a",
                                                     "0bc4c85d-fa67-42b8-b17c-cd1a78c58ac9",
                                                     "3d60a3c6-49cc-4bdb-ad16-e5bda10b9cda",
                                                     "df065a55-8b01-44de-880e-b38bb32a24f9",
                                                     "cbfbc554-5ca5-4f63-9525-0c69c6aec1bf",
                                                     "7a5f916c-22ab-4bd2-9965-4edb76ce41a0", true);
        assertTrue(deviceevents.isValid());
        DeviceEvents deviceeventsInvalid = new DeviceEvents(null, new Date(1547164364168L), null,
                                                            new Date(1547164362853L),
                                                            "d272430c-20bd-4e08-9fae-a185bf0715a4",
                                                            "5bf703c5-4a3d-4df2-a88c-9c54c6dc6a16",
                                                            "02d8b984-8cbd-482f-93c5-bf4fdcb5a5d9",
                                                            "748f1b6a-d860-405e-899c-0d18613796f5",
                                                            "2ef79002-1df0-4af1-b852-75e5f4537e14", null, false);
        assertFalse(deviceeventsInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547164364503L), null,
                                                          new Date(1547164358720L),
                                                          "5c3d0e81-9661-47b2-8e67-e4980cd0244f",
                                                          "4261bd3a-2c72-48f3-a730-d79dac139be7",
                                                          "f6054b1e-58c5-437f-9db0-482f43324fbe",
                                                          "eed390b3-2f8f-43e3-a926-3d6cb793d8ac",
                                                          "58d288ee-471e-4713-9412-672dfb9bc3a5",
                                                          "14fda2ed-cef4-418b-b8a7-45a0ee7ed4e9", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547164364503L), null,
                                                          new Date(1547164358720L),
                                                          "5c3d0e81-9661-47b2-8e67-e4980cd0244f",
                                                          "4261bd3a-2c72-48f3-a730-d79dac139be7",
                                                          "f6054b1e-58c5-437f-9db0-482f43324fbe",
                                                          "eed390b3-2f8f-43e3-a926-3d6cb793d8ac",
                                                          "58d288ee-471e-4713-9412-672dfb9bc3a5",
                                                          "14fda2ed-cef4-418b-b8a7-45a0ee7ed4e9", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547164364792L), null,
                                                          new Date(1547164363906L),
                                                          "29adeaa8-b320-4390-9e06-49a1559a739e",
                                                          "e7f731ed-48cf-417d-bf9f-192f7b96ae8c",
                                                          "89ea01dc-7466-49c4-83e6-c143cadd6236",
                                                          "040d080d-8dbd-40ca-ada3-4099b0cabf0b",
                                                          "ee0beda5-4101-4cd9-a592-cc861ad88071",
                                                          "a3ef67b3-4026-4c84-9886-1103aa3a1d21", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
