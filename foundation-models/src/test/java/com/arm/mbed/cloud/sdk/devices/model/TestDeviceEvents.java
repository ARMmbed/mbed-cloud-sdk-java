// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547573359370L), null,
                                                          new Date(1547573357381L),
                                                          "63469cd2-86a4-4483-a5a9-063b10dd4231",
                                                          "c11b707e-3e8c-4b32-b236-b9b2b3e60dff",
                                                          "8756e60e-3ce3-4096-9d6d-59364d94caa1",
                                                          "01b8d8a4-901e-4462-89df-031603c15e76",
                                                          "13a3833c-2f48-401d-89a8-18d457a60165",
                                                          "b7d3aece-a349-470b-9973-3803d5c1a7cb", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547573362685L), null,
                                                          new Date(1547573360035L),
                                                          "e1521034-67b5-430a-a590-6e61fdbca05a",
                                                          "13341ba5-dceb-40e3-955d-54befa2be698",
                                                          "e9c93be1-9d69-4795-962e-9c7cac89b239",
                                                          "f59ec803-7985-480c-a41b-c60ae80523e0",
                                                          "2b256cd6-5341-4526-b3ec-2253d7f0b501",
                                                          "6ef31345-f4a8-4fa8-9069-140e4015d577", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547573362685L), null,
                                                          new Date(1547573360035L),
                                                          "e1521034-67b5-430a-a590-6e61fdbca05a",
                                                          "13341ba5-dceb-40e3-955d-54befa2be698",
                                                          "e9c93be1-9d69-4795-962e-9c7cac89b239",
                                                          "f59ec803-7985-480c-a41b-c60ae80523e0",
                                                          "2b256cd6-5341-4526-b3ec-2253d7f0b501",
                                                          "6ef31345-f4a8-4fa8-9069-140e4015d577", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547573358681L), null, new Date(1547573362640L),
                                                     "3960e280-6f37-42c0-9152-8d059129ead8",
                                                     "4c54b3e8-f0ee-41e4-92ab-c2e191bd2c86",
                                                     "bca6a831-8e39-4d2a-aa37-18c1682f1585",
                                                     "bae02938-6280-400b-8ea5-504a83949423",
                                                     "f4b7ef58-5a76-41a1-aaed-776e3f2bc0a1",
                                                     "8ca4aa59-a1b0-43aa-bfbb-996056ac6bd4", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547573362398L), null,
                                                          new Date(1547573361600L),
                                                          "9d442505-8c6f-41b2-acd2-cfbe7f64f947",
                                                          "01743ea2-6247-4d05-bc8c-125525c19fe0",
                                                          "8e25b794-d141-4bd3-aaf3-4de5c92702e1",
                                                          "af1a65a2-f395-430e-8b0f-0cef12c6c838",
                                                          "bbb8cc63-6e44-4994-b976-8f1e21743365",
                                                          "54e02075-5375-4616-8a51-f4ebf99569b5", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547573362398L), null,
                                                          new Date(1547573361600L),
                                                          "9d442505-8c6f-41b2-acd2-cfbe7f64f947",
                                                          "01743ea2-6247-4d05-bc8c-125525c19fe0",
                                                          "8e25b794-d141-4bd3-aaf3-4de5c92702e1",
                                                          "af1a65a2-f395-430e-8b0f-0cef12c6c838",
                                                          "bbb8cc63-6e44-4994-b976-8f1e21743365",
                                                          "54e02075-5375-4616-8a51-f4ebf99569b5", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547573359583L), null,
                                                          new Date(1547573358006L),
                                                          "bf58a5f1-8f55-4a07-8367-e771ff335162",
                                                          "b49a0b4e-b3b5-4274-9a66-263da49f957d",
                                                          "f586f44c-5a70-4be8-8d84-932052ddab04",
                                                          "a1d5aba5-9e03-4cda-802c-57dae051b977",
                                                          "f17bf306-8483-4d01-aa24-19133706bea7",
                                                          "536db04b-1ff0-44b1-8937-5b1975a100fc", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
