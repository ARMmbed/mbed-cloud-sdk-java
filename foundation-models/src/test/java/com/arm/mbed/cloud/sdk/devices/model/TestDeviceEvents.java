// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547730058758L), null,
                                                          new Date(1547730051794L),
                                                          "358bb61a-22c2-48d1-b92e-445e5fe41e18",
                                                          "e4ed0272-5460-4718-9d5a-3133b4c9aa27",
                                                          "21b345de-8a65-4ba8-bd77-66d9a0680496",
                                                          "17bd254d-b727-4805-b299-ceeb95591686",
                                                          "b830cba2-4a70-40b2-ab0e-dc367e2b8941",
                                                          "cb1c012b-c06a-4673-871b-094c6f5d54d8", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547730051149L), null,
                                                          new Date(1547730054594L),
                                                          "96442116-36b2-484b-a862-2b4faa2bf348",
                                                          "85964bde-9eaa-4e25-ac24-94e6084c9272",
                                                          "5757722d-cdac-4601-aa66-5e7c1eaf2332",
                                                          "6becd3db-bc19-47c6-8b39-947192312c94",
                                                          "b29a50fa-7c28-4620-a9c1-f518d076c709",
                                                          "3591ab9d-62ef-4a0f-a92a-37c14948b727", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547730051149L), null,
                                                          new Date(1547730054594L),
                                                          "96442116-36b2-484b-a862-2b4faa2bf348",
                                                          "85964bde-9eaa-4e25-ac24-94e6084c9272",
                                                          "5757722d-cdac-4601-aa66-5e7c1eaf2332",
                                                          "6becd3db-bc19-47c6-8b39-947192312c94",
                                                          "b29a50fa-7c28-4620-a9c1-f518d076c709",
                                                          "3591ab9d-62ef-4a0f-a92a-37c14948b727", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547730050387L), null, new Date(1547730053372L),
                                                     "823f2113-3b5d-46e3-bfcf-ccdcde956893",
                                                     "e2f25da9-cc61-4cd7-82f7-5432ce3f0bfb",
                                                     "84b6efbe-dbb4-48d8-a1ff-b55487bc76a5",
                                                     "de793f0b-b5aa-470a-b918-7e4020ac080e",
                                                     "bcf3a42e-ed86-4b62-97c8-39500e0b17e4",
                                                     "a9d29fce-f5e1-48d6-9754-fd0722f78e5f", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547730057946L), null,
                                                          new Date(1547730056468L),
                                                          "231b72ed-9bc2-46cb-9a48-6b987e237311",
                                                          "61ded3b6-815a-4591-95b2-77a698b2a12d",
                                                          "7eef4aa7-edb7-4bf8-bb06-d20f949115a4",
                                                          "38cd6ec3-d547-475f-a610-30011a2c7755",
                                                          "3505f86b-d402-46a2-8c23-4a3aef1d96a5",
                                                          "0b139596-7730-400a-872d-498e9f3a71da", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547730057946L), null,
                                                          new Date(1547730056468L),
                                                          "231b72ed-9bc2-46cb-9a48-6b987e237311",
                                                          "61ded3b6-815a-4591-95b2-77a698b2a12d",
                                                          "7eef4aa7-edb7-4bf8-bb06-d20f949115a4",
                                                          "38cd6ec3-d547-475f-a610-30011a2c7755",
                                                          "3505f86b-d402-46a2-8c23-4a3aef1d96a5",
                                                          "0b139596-7730-400a-872d-498e9f3a71da", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547730057164L), null,
                                                          new Date(1547730057594L),
                                                          "1bbd93e4-dc23-49a7-9ea5-db70d21ff3e6",
                                                          "eadbc033-54b3-43c3-a81c-e7abf584e769",
                                                          "4ba8570b-9900-404d-933d-d598ac281cd1",
                                                          "26220f72-a429-4bab-91f1-422bcb722e41",
                                                          "97561acc-4b7c-41fe-abbc-bad2ef7a99ab",
                                                          "1e690a98-0cc3-43b8-ae37-03325900e9b8", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
