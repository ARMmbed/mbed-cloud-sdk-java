// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833686114L), null,
                                                          new Date(1559833681432L),
                                                          "e27c14c6-1f07-444f-b951-5844ded9ea87",
                                                          "004b83a5-2d6b-4f34-a12a-006491e18f50",
                                                          "5353b7b4-2675-421b-8386-d2f6f68df0a8",
                                                          "60cea875-8b73-41c8-af74-0e470af3b37e",
                                                          "806da062-e524-4cdf-849a-76786d625318",
                                                          "2bb69ebf-b7c4-4045-95b2-8e11d7d5cbf6", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833679763L), null,
                                                          new Date(1559833678787L),
                                                          "71cb3654-9fb4-4a6c-9c07-0beab7ecc93c",
                                                          "0c7cd388-ddb0-4ba4-bb32-b698e2b60777",
                                                          "d5847073-985e-43f4-8db1-c2f1c80883e2",
                                                          "9e3b9eef-7bd2-4f39-9e53-ca2c9e6ed023",
                                                          "17501dcb-8b1c-4e8b-ada9-de9844355c8f",
                                                          "8a4d255e-854a-4c2d-8f63-a10c2e4ea2da", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559833679763L), null,
                                                          new Date(1559833678787L),
                                                          "71cb3654-9fb4-4a6c-9c07-0beab7ecc93c",
                                                          "0c7cd388-ddb0-4ba4-bb32-b698e2b60777",
                                                          "d5847073-985e-43f4-8db1-c2f1c80883e2",
                                                          "9e3b9eef-7bd2-4f39-9e53-ca2c9e6ed023",
                                                          "17501dcb-8b1c-4e8b-ada9-de9844355c8f",
                                                          "8a4d255e-854a-4c2d-8f63-a10c2e4ea2da", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1559833683686L), null, new Date(1559833678910L),
                                                     "5db8bff3-38c2-4594-8fb2-3c91bb46380b",
                                                     "768a8112-3d5f-4785-b118-8dc04ce13d2c",
                                                     "0a5621ba-30af-4391-a401-87e9ad0fb0ee",
                                                     "e1e2aecd-053d-4576-ad43-d814ddc5da87",
                                                     "1c42b8f4-7a3d-401f-814f-8d70c1c6e552",
                                                     "5134939d-f5c3-4dfd-9bcf-bffe9f2c4b56", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833680382L), null,
                                                          new Date(1559833680935L),
                                                          "230ab139-e244-481f-a413-6832e7a0c5cb",
                                                          "b7c79618-3932-4d59-964e-128d869f5df6",
                                                          "c5e112f6-6373-4f2c-ba33-4dd3603da69f",
                                                          "fe9c48e9-ba3d-4bff-adcb-eeee5d4bf402",
                                                          "e5792df7-8983-44c6-84d4-0aaad46cc604",
                                                          "b7ef2ffb-d5bb-4fc2-a8f2-004245c607d5", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559833680382L), null,
                                                          new Date(1559833680935L),
                                                          "230ab139-e244-481f-a413-6832e7a0c5cb",
                                                          "b7c79618-3932-4d59-964e-128d869f5df6",
                                                          "c5e112f6-6373-4f2c-ba33-4dd3603da69f",
                                                          "fe9c48e9-ba3d-4bff-adcb-eeee5d4bf402",
                                                          "e5792df7-8983-44c6-84d4-0aaad46cc604",
                                                          "b7ef2ffb-d5bb-4fc2-a8f2-004245c607d5", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1559833682370L), null,
                                                          new Date(1559833681520L),
                                                          "f2e9ca9f-9cae-46e8-9684-699e070396df",
                                                          "bd3049ea-702e-44e8-8fa1-bcb894040222",
                                                          "ad59fa6f-d3e8-4baa-9a67-3317c0a06bf5",
                                                          "8a20f3a6-6f13-49d8-b94e-ee1b939fa98f",
                                                          "d9862461-da96-4dbc-99e7-cbffca418503",
                                                          "328e5840-3078-4138-b0ba-e822539f36c9", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
