// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547489764415L), null,
                                                          new Date(1547489765025L),
                                                          "2f969f42-8942-47b2-8669-a67a3ec17fa8",
                                                          "b2b67093-167e-44fb-be72-6c6648ff5b3a",
                                                          "cda4b4ba-b290-4842-bf55-157f9fd49b58",
                                                          "a2fe9b57-3827-40c1-994d-39c95d57356b",
                                                          "fe964c47-e0f2-4262-bf26-dee9462f0472",
                                                          "aaa74d39-4ae8-456f-bb6b-51c1d0b1886d", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547489766614L), null,
                                                          new Date(1547489770956L),
                                                          "db34c608-0830-4afc-b3bf-9c6244d2c717",
                                                          "9dea514f-93bc-4c42-bf58-87d66c453ea9",
                                                          "27dec28a-cae1-4f74-beee-a2845a860c37",
                                                          "d44e6015-0dab-4201-aab6-104241d81e8e",
                                                          "7db6632d-94a6-4c66-aa3a-c800bf70f9fc",
                                                          "8d325896-d288-4c79-a269-0ccc3c65d029", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547489766614L), null,
                                                          new Date(1547489770956L),
                                                          "db34c608-0830-4afc-b3bf-9c6244d2c717",
                                                          "9dea514f-93bc-4c42-bf58-87d66c453ea9",
                                                          "27dec28a-cae1-4f74-beee-a2845a860c37",
                                                          "d44e6015-0dab-4201-aab6-104241d81e8e",
                                                          "7db6632d-94a6-4c66-aa3a-c800bf70f9fc",
                                                          "8d325896-d288-4c79-a269-0ccc3c65d029", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547489770052L), null, new Date(1547489773451L),
                                                     "d9b210c0-6d8b-4f76-8354-18c30c72df95",
                                                     "72d40325-c9dd-4798-bf47-4db6146e730b",
                                                     "e4bcda7f-0fde-48e5-89b2-0549b4936052",
                                                     "29dfa6b4-7f78-4f05-bff2-08b3ebc33bbc",
                                                     "ae4fb07a-49c1-497c-8f6d-65b21ad64e70",
                                                     "fa23b1a8-6a3a-4bb1-ac15-7e81bbae6a80", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547489773712L), null,
                                                          new Date(1547489773466L),
                                                          "8791f8ae-e5cc-417e-98bf-020a40b1b356",
                                                          "e822629e-c419-4418-b3c7-b25e692d7eec",
                                                          "ccd5622b-2696-48d7-a6d7-ede4d39e6a94",
                                                          "f0dec66e-af5d-4045-809a-99e4406ba82a",
                                                          "6bc3fdeb-c381-47f4-8b3f-64f9a4eab3b8",
                                                          "c3723e6e-892f-462a-bb07-b575678e3a30", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547489773712L), null,
                                                          new Date(1547489773466L),
                                                          "8791f8ae-e5cc-417e-98bf-020a40b1b356",
                                                          "e822629e-c419-4418-b3c7-b25e692d7eec",
                                                          "ccd5622b-2696-48d7-a6d7-ede4d39e6a94",
                                                          "f0dec66e-af5d-4045-809a-99e4406ba82a",
                                                          "6bc3fdeb-c381-47f4-8b3f-64f9a4eab3b8",
                                                          "c3723e6e-892f-462a-bb07-b575678e3a30", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547489764442L), null,
                                                          new Date(1547489767455L),
                                                          "8c290a40-00e3-46ff-bfd6-c60c94f63b09",
                                                          "f03c9654-a528-4690-8af6-f2e4d7ca1889",
                                                          "ba37a39f-6006-4c3a-8f15-bdd710f22012",
                                                          "c9365b60-8ff4-4584-9b8f-703917014183",
                                                          "b17f51e3-6409-45af-a6d9-4d0c2504ba51",
                                                          "2b8271f1-0feb-42c5-a2cd-19cd55b5538d", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
