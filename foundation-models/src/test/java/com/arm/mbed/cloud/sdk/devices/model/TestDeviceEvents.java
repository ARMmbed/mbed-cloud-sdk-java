// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1548165448482L), null,
                                                          new Date(1548165443340L),
                                                          "031c7852-3bcd-44ac-b511-1aa4d7b94179",
                                                          "86d2da98-4fbe-467c-b6d4-6bd865da55ff",
                                                          "3fa744f0-6505-4ee0-bc45-3313cd6813cb",
                                                          "42e9ce05-c010-4c8d-8c9f-e29335209d34",
                                                          "8b037663-47d1-403f-b685-3d1dcffb11eb",
                                                          "ab2de203-29b6-4a12-ac64-47df4b1e6e39", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1548165444936L), null,
                                                          new Date(1548165446680L),
                                                          "8cdd439d-883f-4cf6-b90c-9f4096b499dd",
                                                          "981d22e2-da7b-4e61-9741-3fa0605031c2",
                                                          "797939e6-0dbe-4d20-8c00-4e4eeb33be5b",
                                                          "b8d22a34-2982-44ad-8b44-e9a02700f6d2",
                                                          "92da8c23-85a6-4290-9019-09e8f97c41dd",
                                                          "ac52acf7-35d6-4838-8bd8-c9d8c15e8663", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1548165444936L), null,
                                                          new Date(1548165446680L),
                                                          "8cdd439d-883f-4cf6-b90c-9f4096b499dd",
                                                          "981d22e2-da7b-4e61-9741-3fa0605031c2",
                                                          "797939e6-0dbe-4d20-8c00-4e4eeb33be5b",
                                                          "b8d22a34-2982-44ad-8b44-e9a02700f6d2",
                                                          "92da8c23-85a6-4290-9019-09e8f97c41dd",
                                                          "ac52acf7-35d6-4838-8bd8-c9d8c15e8663", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1548165448416L), null, new Date(1548165443062L),
                                                     "785389a2-e78a-4eae-a4ea-cbca43f2aa06",
                                                     "77a83a8a-aeb6-4868-bbc8-54dd7b0a5db3",
                                                     "2088b9d3-1109-4e1e-b770-0e3547fb63c3",
                                                     "4eb63e0e-5514-44d6-b360-db708350aee0",
                                                     "bfe0dac5-df11-4ec7-84c7-d5cb7f6e1e66",
                                                     "74dc3fca-f538-471a-b083-23ee3753b819", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1548165444708L), null,
                                                          new Date(1548165445165L),
                                                          "4dd2f275-2d29-4f57-b990-7f1eecc64eaf",
                                                          "a8e6673e-e9ff-4615-b748-834a7cc9632c",
                                                          "06ecf234-dc28-489c-84be-284f38a2a3ee",
                                                          "1fd19634-8d83-4b07-845c-c83f5f5f5f06",
                                                          "acd8b02f-1aa3-4172-90a9-3e983343de73",
                                                          "f17c0ccb-44c5-4cbf-a0de-6120aaa0c1a2", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1548165444708L), null,
                                                          new Date(1548165445165L),
                                                          "4dd2f275-2d29-4f57-b990-7f1eecc64eaf",
                                                          "a8e6673e-e9ff-4615-b748-834a7cc9632c",
                                                          "06ecf234-dc28-489c-84be-284f38a2a3ee",
                                                          "1fd19634-8d83-4b07-845c-c83f5f5f5f06",
                                                          "acd8b02f-1aa3-4172-90a9-3e983343de73",
                                                          "f17c0ccb-44c5-4cbf-a0de-6120aaa0c1a2", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1548165447064L), null,
                                                          new Date(1548165439173L),
                                                          "4e52375b-c5a3-4b48-bd3d-49ae27bbdd78",
                                                          "4846505b-fe6c-4c61-9d26-2021ee9594cb",
                                                          "2e2a9058-5b7e-4e74-b35e-691a4640a8fa",
                                                          "fcce4d19-8b5e-45e4-9da3-183d2b4df3a7",
                                                          "9c9f5c92-b13c-4a8b-8af8-07825cea2fba",
                                                          "708d7f29-8bff-402b-8d0e-1f2b7f325e1e", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
