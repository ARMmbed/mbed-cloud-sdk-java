// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547225123095L), null,
                                                          new Date(1547225118107L),
                                                          "2e36002d-4cf4-4dd6-b06b-35140ba2b4dc",
                                                          "1506890f-4ad7-42af-93fd-bcfff6a33f15",
                                                          "62b7a12f-e171-40f0-b503-054e6e47a97e",
                                                          "1c4b70bc-5f89-4fc2-8188-94c653ccdae1",
                                                          "d03faed2-1c95-4978-93ea-712cc0f8ed84",
                                                          "a184ff1b-ac68-47ba-acf9-78c197cb5b6b", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547225120907L), null,
                                                          new Date(1547225124009L),
                                                          "6358870c-84d1-47e5-b936-b302cbd8e34d",
                                                          "7a65c08e-ed24-4731-b3b7-43402fe6b9ea",
                                                          "74cc165d-acbe-4cc9-a6a2-040615a446a6",
                                                          "b23706c3-3202-4327-b795-0207652cd34e",
                                                          "2dd4bbee-8a27-483e-901a-e45d653e357e",
                                                          "1b9471a7-c16d-4d2d-8553-401e7ada5647", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547225120907L), null,
                                                          new Date(1547225124009L),
                                                          "6358870c-84d1-47e5-b936-b302cbd8e34d",
                                                          "7a65c08e-ed24-4731-b3b7-43402fe6b9ea",
                                                          "74cc165d-acbe-4cc9-a6a2-040615a446a6",
                                                          "b23706c3-3202-4327-b795-0207652cd34e",
                                                          "2dd4bbee-8a27-483e-901a-e45d653e357e",
                                                          "1b9471a7-c16d-4d2d-8553-401e7ada5647", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1547225118946L), null, new Date(1547225121970L),
                                                     "ebdbc483-e158-4c76-ad71-3734b692db10",
                                                     "9f578527-758f-41aa-b844-6c598108943d",
                                                     "675cec11-c46b-47e5-9598-65eb514c836b",
                                                     "67e2d93e-0a4e-48ec-9284-75349f9dc976",
                                                     "1b3e9ed0-2c3e-4b6e-afc9-36a46fa1a3bd",
                                                     "1aba52be-3764-4487-8974-6de9d4a81b0a", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1547225118305L), null,
                                                          new Date(1547225121938L),
                                                          "59a5b985-6fdf-47b4-af62-0f582cba4beb",
                                                          "77e0a3df-a7d2-4830-9c8a-c22cc510822f",
                                                          "e5514f71-4fe7-4582-84df-367928cb8117",
                                                          "580243db-2665-4864-bea9-a5b56e7fab11",
                                                          "743a3eb5-f5a7-42ac-b934-8d0324e7e4ca",
                                                          "9059a249-dfc9-4729-aad3-b6b457f3108e", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1547225118305L), null,
                                                          new Date(1547225121938L),
                                                          "59a5b985-6fdf-47b4-af62-0f582cba4beb",
                                                          "77e0a3df-a7d2-4830-9c8a-c22cc510822f",
                                                          "e5514f71-4fe7-4582-84df-367928cb8117",
                                                          "580243db-2665-4864-bea9-a5b56e7fab11",
                                                          "743a3eb5-f5a7-42ac-b934-8d0324e7e4ca",
                                                          "9059a249-dfc9-4729-aad3-b6b457f3108e", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1547225123619L), null,
                                                          new Date(1547225122836L),
                                                          "7221270a-1e86-4fbf-be1d-8c29a80e13bb",
                                                          "64e917e0-13c0-4116-b29f-da6b85de1e4c",
                                                          "a6e79df7-54a5-481e-94a4-41f7874c1738",
                                                          "e87b84ee-7d85-46f0-a3c5-5234d022f894",
                                                          "1af0ff27-071d-4d9c-8c65-50beae3bd01a",
                                                          "7e3d4812-8755-4340-beca-050282bc9d18", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
