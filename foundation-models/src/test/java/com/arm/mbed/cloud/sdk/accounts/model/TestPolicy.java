// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("890b2898-0a02-43db-83c7-13b57070e34a", true,
                                        "54f1f2ab-724f-4dfa-aa10-8dfd78ad962b", true,
                                        "0f273286-534b-4292-8675-2ded45922054");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("f3b2eb01-46c9-415d-a5d3-d0c61f805a1d", true,
                                        "a5a0c866-bf0b-40ba-85b4-b65aef45af0a", false,
                                        "763c54f1-151c-4a9c-9bcc-1c7d9c6f44f0");
            Policy policy2 = new Policy("f3b2eb01-46c9-415d-a5d3-d0c61f805a1d", true,
                                        "a5a0c866-bf0b-40ba-85b4-b65aef45af0a", false,
                                        "763c54f1-151c-4a9c-9bcc-1c7d9c6f44f0");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("ad63dc3e-63d1-4f0d-a92c-44c9c936a54b", false,
                                   "1ffcad30-d5d3-484e-bbfb-8ca5e7749b6c", false,
                                   "fc3dddd9-2169-4e0f-94b3-85b773396c49");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("19907aa7-3a11-4424-adc6-558761173a7a", false,
                                        "419976a9-33b8-4f4a-a806-92f53a24599e", true,
                                        "2c7385b7-8de9-49b3-931a-49c0ff1e4205");
            Policy policy2 = new Policy("19907aa7-3a11-4424-adc6-558761173a7a", false,
                                        "419976a9-33b8-4f4a-a806-92f53a24599e", true,
                                        "2c7385b7-8de9-49b3-931a-49c0ff1e4205");
            Policy policy3 = new Policy("bb8992db-b773-4a45-84e4-6c4706a5b354", false,
                                        "9fa0e16d-bd44-444c-aea8-332022827897", true,
                                        "228e6d1a-5519-4232-989d-d88e3ca80bd8");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
