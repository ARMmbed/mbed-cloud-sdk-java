// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("dffe1287-4fa3-4298-99df-7f2e1b121ef7", false,
                                        "ec25b46c-66bf-4bfc-b0c7-451f7a7a58b0", false,
                                        "faaf20e0-dc9e-44fe-b42e-32c3c8c9552a");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("b4ec15fc-5a5b-426b-aaef-8a6842820b24", false,
                                        "56cc7335-10f0-4b7e-a1f3-e4701a5f62b6", true,
                                        "434ad8cc-2859-47ef-ae5d-fba46240f0ed");
            Policy policy2 = new Policy("b4ec15fc-5a5b-426b-aaef-8a6842820b24", false,
                                        "56cc7335-10f0-4b7e-a1f3-e4701a5f62b6", true,
                                        "434ad8cc-2859-47ef-ae5d-fba46240f0ed");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("60dd0dff-5c1d-430b-bb1a-334ff796781a", false,
                                   "bb19b246-0fbc-4f47-aa66-59fe79b458b8", false,
                                   "e3321e16-be76-42b7-ad2c-b7911e3ef33d");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("0b239ae7-81e9-47ba-b415-a1167c1df02c", false,
                                        "68a50ce5-8180-4149-a585-2ee7fe781cf4", false,
                                        "725e688f-87b2-448a-85d4-5a8fe33b5b0d");
            Policy policy2 = new Policy("0b239ae7-81e9-47ba-b415-a1167c1df02c", false,
                                        "68a50ce5-8180-4149-a585-2ee7fe781cf4", false,
                                        "725e688f-87b2-448a-85d4-5a8fe33b5b0d");
            Policy policy3 = new Policy("ed5abb93-dfc7-45f5-b54f-ef6134743d0d", false,
                                        "164fd68f-684c-4257-bfcb-dfc60a327f3d", false,
                                        "8d38bc41-565e-487e-905c-fd18ec3f924b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
