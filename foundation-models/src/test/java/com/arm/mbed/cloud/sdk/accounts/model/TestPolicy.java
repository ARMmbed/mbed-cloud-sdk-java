// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("aa34bedd-d12a-4884-b615-66babe991847", false,
                                        "f841eaf1-81e3-4367-a0d4-ef8c2263f08f", true,
                                        "8488b80f-77c1-49f5-8ae1-58b62fc832dd");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("b340b451-b712-44ab-b692-31bba19c052c", false,
                                        "24f12e9a-241c-4c78-9d5f-0ca08a9ce68e", true,
                                        "ff22a197-5631-49ca-82bc-705cd038a334");
            Policy policy2 = new Policy("b340b451-b712-44ab-b692-31bba19c052c", false,
                                        "24f12e9a-241c-4c78-9d5f-0ca08a9ce68e", true,
                                        "ff22a197-5631-49ca-82bc-705cd038a334");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("dc512360-a378-4ccd-880d-e9279c2efb7a", true, "a9aebfd2-3df0-4e79-90cc-7c65a6c202a2",
                                   false, "001c33f7-92a5-43fd-bbf5-cefb183b870f");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("2ee22329-9913-45f9-bb7b-8a9ad7233e2d", true,
                                        "45678331-0652-4927-97a6-28b480e9720c", false,
                                        "b9e89d05-8fe7-4bfb-b3bb-ac65b10cfaf4");
            Policy policy2 = new Policy("2ee22329-9913-45f9-bb7b-8a9ad7233e2d", true,
                                        "45678331-0652-4927-97a6-28b480e9720c", false,
                                        "b9e89d05-8fe7-4bfb-b3bb-ac65b10cfaf4");
            Policy policy3 = new Policy("b9216abc-67bd-4123-8676-e9970b86fc86", true,
                                        "3ef70b2d-655c-45b7-ad8b-af465f29edfc", false,
                                        "9e7d4639-308f-4020-9ca4-d6a3e08179b5");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
