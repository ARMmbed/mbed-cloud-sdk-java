// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("e8ba4d10-fac9-4f70-99bc-11b269ad4131", false,
                                        "be2a46db-eb4e-4845-b837-89e24d7ceb9b", false,
                                        "4e838938-87f5-4c4a-8e98-3f0544f59fe4");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("2f45a4c0-eea4-4394-bd58-886fc82a6a70", false,
                                        "b8703534-f4a4-4470-ba1c-085f423bc798", true,
                                        "ae6ca99e-4218-4edc-9326-25641f15e38a");
            Policy policy2 = new Policy("2f45a4c0-eea4-4394-bd58-886fc82a6a70", false,
                                        "b8703534-f4a4-4470-ba1c-085f423bc798", true,
                                        "ae6ca99e-4218-4edc-9326-25641f15e38a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("08714afb-1897-4cbc-815b-61a77d229d97", false,
                                   "4c3c6462-408f-47b6-90ab-15edfc050e7c", false,
                                   "0c3c0321-104a-4db6-bcea-40a66dadfff4");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("56ee2dab-e8f1-417a-a525-069ac419bbce", false,
                                        "5dc64794-deb4-4550-a9cb-df920092e4a5", true,
                                        "7979ed69-5e6f-46f9-9b73-af51028e4ff0");
            Policy policy2 = new Policy("56ee2dab-e8f1-417a-a525-069ac419bbce", false,
                                        "5dc64794-deb4-4550-a9cb-df920092e4a5", true,
                                        "7979ed69-5e6f-46f9-9b73-af51028e4ff0");
            Policy policy3 = new Policy("3467113d-86ae-4df1-9c07-975f7f6e59d6", false,
                                        "e2081b14-42a0-4c9d-93f2-acf22d853c93", true,
                                        "ea315278-6cdb-43b3-90f6-bac1ce0179d8");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
