// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("d2ff0d29-443e-464f-9dfc-3862fe69fd7c", true,
                                        "42d95829-394f-42a7-954c-82d1a9084887", true,
                                        "8c7d35ce-73f6-4f0b-a30a-155edf93344b");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("3a1c371e-83f3-4c8d-b4a5-167234095545", true,
                                        "6f1701b0-d95e-4f4b-8098-d9530fd29ce4", false,
                                        "bbb2c0e1-beae-482f-ad54-0e8bfe8951c3");
            Policy policy2 = new Policy("3a1c371e-83f3-4c8d-b4a5-167234095545", true,
                                        "6f1701b0-d95e-4f4b-8098-d9530fd29ce4", false,
                                        "bbb2c0e1-beae-482f-ad54-0e8bfe8951c3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("b844202f-11d5-4132-bc34-c6f3364a97c1", true, "f3166873-5734-4c0e-a41c-47b734805163",
                                   false, "2a465add-1476-4356-a629-39f5e07586c0");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("43712e70-d75b-44a4-bb02-f8c4501419e0", true,
                                        "2fd05cac-0cf3-4640-ae56-c6f26ade63e1", true,
                                        "e097c0be-e847-4f5a-a902-e3be41177f80");
            Policy policy2 = new Policy("43712e70-d75b-44a4-bb02-f8c4501419e0", true,
                                        "2fd05cac-0cf3-4640-ae56-c6f26ade63e1", true,
                                        "e097c0be-e847-4f5a-a902-e3be41177f80");
            Policy policy3 = new Policy("a38385e0-8610-442e-a04a-f4ec9b97cfc0", true,
                                        "e19f6a73-6e5b-4df6-86f1-7b6cde5ab580", true,
                                        "8807646b-ecc4-4c19-ab5c-9531cdc93f4b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
