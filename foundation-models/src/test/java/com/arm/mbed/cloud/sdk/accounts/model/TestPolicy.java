// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("27759b55-18ee-43f0-83ec-5b80ebc0c11c", false,
                                        "a548e7c4-e974-4d19-ba4d-b8767dbfe118", false,
                                        "c0e17bfd-86ed-4937-87d0-0e6c908e1378");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("3e83a52c-a0ce-447d-9587-35be77db89a2", true,
                                        "619aa471-8f92-4442-a0d7-661803d39c48", false,
                                        "034e48b6-c825-4673-91e1-c810cac53da2");
            Policy policy2 = new Policy("3e83a52c-a0ce-447d-9587-35be77db89a2", true,
                                        "619aa471-8f92-4442-a0d7-661803d39c48", false,
                                        "034e48b6-c825-4673-91e1-c810cac53da2");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("a24fe5c5-1fa2-430a-bfc8-19f020af2a3c", false,
                                   "8fc00b86-17b0-4ea2-81b1-8ab807eb8009", false,
                                   "ce848a08-bc68-4ef1-9db0-0045e83f95da");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("8d104a80-699e-4b4b-a51e-19415a52d44c", true,
                                        "c858739e-c20b-4ae1-9a30-4063a3d25df7", false,
                                        "624dad48-043e-4bae-bddd-590b5bfa7175");
            Policy policy2 = new Policy("8d104a80-699e-4b4b-a51e-19415a52d44c", true,
                                        "c858739e-c20b-4ae1-9a30-4063a3d25df7", false,
                                        "624dad48-043e-4bae-bddd-590b5bfa7175");
            Policy policy3 = new Policy("0d68b8db-485b-45a4-8be2-f028bb3e939c", true,
                                        "3697e3c8-131c-42f9-a11b-fc6b445d2349", true,
                                        "de741563-24a6-4696-90b0-a3cfe2f8b121");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
