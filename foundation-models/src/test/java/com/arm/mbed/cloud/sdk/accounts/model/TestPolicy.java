// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("b66bc28a-d37e-44fc-80f8-367e007c2271", true,
                                        "6c5cb713-9e32-41a5-8b64-e2b776cf2652", false,
                                        "7dbc9a7a-9589-4470-a849-579c5ec271d3");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("317e0ade-a2ab-4fb3-ab09-0a8c12813b84", true,
                                        "65c58ec8-e2ed-4abc-93cc-b99ba116e17a", false,
                                        "467abbb1-4d0d-44d8-96c7-0dc51364a222");
            Policy policy2 = new Policy("317e0ade-a2ab-4fb3-ab09-0a8c12813b84", true,
                                        "65c58ec8-e2ed-4abc-93cc-b99ba116e17a", false,
                                        "467abbb1-4d0d-44d8-96c7-0dc51364a222");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("fc292c3a-3865-47a8-96e8-71025dfbed40", false,
                                   "91216254-437b-423b-9d67-23e55670396d", true,
                                   "cd2b91dc-7a8d-4671-9624-808f3112b443");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("6cb5c280-f7ec-4966-ad79-10e07fc2b889", false,
                                        "dfe44b51-6c19-4229-b3ac-e430372707de", false,
                                        "0f069efa-0e65-4645-92f5-07409b460398");
            Policy policy2 = new Policy("6cb5c280-f7ec-4966-ad79-10e07fc2b889", false,
                                        "dfe44b51-6c19-4229-b3ac-e430372707de", false,
                                        "0f069efa-0e65-4645-92f5-07409b460398");
            Policy policy3 = new Policy("ef0e15d5-3719-4129-9efe-2a5a8d94ef33", false,
                                        "01e25ce1-f5b2-44fd-9a35-700f81609565", false,
                                        "31d6cf73-ef5f-40aa-94fa-ab3fbb18a69b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
