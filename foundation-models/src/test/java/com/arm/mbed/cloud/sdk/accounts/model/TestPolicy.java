// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("959dd026-3bb9-4a9f-863c-6d5959c2882e", false,
                                        "b32a0698-ed9c-4b1d-9d77-b91175762628", false,
                                        "f6f1422a-47fe-4f7e-a521-cf6b0ac14509");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("b2839119-52d5-4c7d-917a-464cccb829a8", true,
                                        "689936f9-1d32-4324-ad17-2179f6a397a1", true,
                                        "9cd07dbe-53d7-4165-8a79-c412c9a6219f");
            Policy policy2 = new Policy("b2839119-52d5-4c7d-917a-464cccb829a8", true,
                                        "689936f9-1d32-4324-ad17-2179f6a397a1", true,
                                        "9cd07dbe-53d7-4165-8a79-c412c9a6219f");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("3a906b6e-468f-4104-a21c-593bf89c729a", true, "8a4abc71-1289-41b5-800d-c0a72aceebec",
                                   false, "9438650a-5897-456e-a367-3f81d449da26");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("2e049569-5083-46ff-9b1a-279a382b8412", true,
                                        "2704a9cc-31fe-4611-be39-735904df0f4a", true,
                                        "6362149b-2743-4ab7-837d-9a901a98ed24");
            Policy policy2 = new Policy("2e049569-5083-46ff-9b1a-279a382b8412", true,
                                        "2704a9cc-31fe-4611-be39-735904df0f4a", true,
                                        "6362149b-2743-4ab7-837d-9a901a98ed24");
            Policy policy3 = new Policy("1c4c49a6-6e44-4842-b523-926a208630db", true,
                                        "0fff3df9-3f8c-4e21-bb1c-159af23b6acd", true,
                                        "a7fdca20-9bac-4a87-9339-10200d3c118d");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
