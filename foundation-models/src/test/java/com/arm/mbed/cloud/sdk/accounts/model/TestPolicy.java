// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("18e0acea-fda0-480a-9115-503dc40210e0", true,
                                        "847ea3b8-48af-4472-b2a5-1a095e1933b7", true,
                                        "b3c16017-a2aa-4c59-b126-04f6e105e939");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("f6db7a2b-4d7b-4f17-8f1f-d8a0ff8262dd", false,
                                        "e52b8929-9480-4e20-9189-297a10d7dd4b", false,
                                        "af654428-db8e-4bd7-b2e9-8dbcf660d688");
            Policy policy2 = new Policy("f6db7a2b-4d7b-4f17-8f1f-d8a0ff8262dd", false,
                                        "e52b8929-9480-4e20-9189-297a10d7dd4b", false,
                                        "af654428-db8e-4bd7-b2e9-8dbcf660d688");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("4de563e8-9a94-4a10-a09d-3f01287f491a", true, "6d9ab36d-5c38-4bca-9478-a3b98c26de52",
                                   true, "8440e0d0-3152-4ad4-851a-841caf66d61b");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("7aae3e77-42e9-4f03-92f0-5fb385e79b1b", false,
                                        "858210da-9f75-4b81-9240-ecaac177e855", false,
                                        "9fdba8ab-5228-485c-8696-c2d59968f367");
            Policy policy2 = new Policy("7aae3e77-42e9-4f03-92f0-5fb385e79b1b", false,
                                        "858210da-9f75-4b81-9240-ecaac177e855", false,
                                        "9fdba8ab-5228-485c-8696-c2d59968f367");
            Policy policy3 = new Policy("4c018aee-5232-455c-9410-5b66b4d8e556", false,
                                        "b86e666c-45e9-47d3-b8e6-491314cb5b25", false,
                                        "b94b0773-b867-43f4-aaf4-cfc252e6e983");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
