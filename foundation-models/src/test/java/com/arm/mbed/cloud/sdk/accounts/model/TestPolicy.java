// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("32879db8-4142-412d-bff3-3cb62f5a4e33", true,
                                        "fd0b4e01-5209-4673-b5d2-77f1569c79d3", false,
                                        "9588d52f-ced1-4b0e-be00-83f8edce83f8");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("9ef16f63-9f59-4181-b999-cde9a3a75c99", true,
                                        "18af194f-75a5-471e-8ab7-2c16e287249c", true,
                                        "90064aae-b746-4bce-8458-93f71faba37a");
            Policy policy2 = new Policy("9ef16f63-9f59-4181-b999-cde9a3a75c99", true,
                                        "18af194f-75a5-471e-8ab7-2c16e287249c", true,
                                        "90064aae-b746-4bce-8458-93f71faba37a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("75dd7f6a-d6f1-4ae4-9fe9-fea1eb56ccf6", true, "a213742d-f091-469d-b41f-a63fd92a254b",
                                   true, "ee7a98e4-c8d0-4927-a047-9618912e8819");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("32ce690b-dc1f-4f1c-b230-7eb591f9f530", true,
                                        "bce25ae5-4691-4345-b6d3-f3823e106736", true,
                                        "efae75d5-1a36-471a-8012-d3685f29b0ef");
            Policy policy2 = new Policy("32ce690b-dc1f-4f1c-b230-7eb591f9f530", true,
                                        "bce25ae5-4691-4345-b6d3-f3823e106736", true,
                                        "efae75d5-1a36-471a-8012-d3685f29b0ef");
            Policy policy3 = new Policy("1910ef18-dc5e-4064-a46b-a20b0a8d7d4d", true,
                                        "4841452a-d66d-4d36-b5ee-324d115dd491", true,
                                        "7d0abe02-bbfb-4156-8f8b-e1965e4dee21");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
