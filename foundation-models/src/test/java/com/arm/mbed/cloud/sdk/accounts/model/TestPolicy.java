// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("adb217ca-f6f3-4dd6-9e68-d9db630888e0", true,
                                        "db0fcb4c-11c4-43ab-ab9d-1f264db7ab88", false,
                                        "6bad7c23-473d-49aa-b85c-9d2a355b85f0");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("80fe132d-feba-4a2c-b537-3d0c06a31c92", true,
                                        "4ffbc544-081d-42fe-a69f-580827d926e3", false,
                                        "03bd0ea7-cafa-49eb-bbaf-385ea87f40a3");
            Policy policy2 = new Policy("80fe132d-feba-4a2c-b537-3d0c06a31c92", true,
                                        "4ffbc544-081d-42fe-a69f-580827d926e3", false,
                                        "03bd0ea7-cafa-49eb-bbaf-385ea87f40a3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("20331e6b-aef9-45d7-a069-e1c69c646621", true, "d9ab789a-8ef1-4edd-8027-9b744cb6e238",
                                   false, "a6c20654-55bc-49a2-9f62-dea0c3502d95");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("f6ea1e87-769a-4b40-b77c-e475c2bcfff9", false,
                                        "b3d44896-281f-4694-bf02-1db97a9135ec", true,
                                        "607ee62c-a352-4d6a-89b1-9b6e3fab8df0");
            Policy policy2 = new Policy("f6ea1e87-769a-4b40-b77c-e475c2bcfff9", false,
                                        "b3d44896-281f-4694-bf02-1db97a9135ec", true,
                                        "607ee62c-a352-4d6a-89b1-9b6e3fab8df0");
            Policy policy3 = new Policy("96bf6462-84b0-4c82-a185-f9a68fd3ccda", false,
                                        "a4691438-2261-4e37-a146-58c6ca5228b4", true,
                                        "9c00da32-4678-418a-a835-f67465f4219a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
