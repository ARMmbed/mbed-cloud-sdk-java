// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("9975eb22-27cf-4a4a-b3e1-434a214f329c", true,
                                        "08c0c2eb-2a85-4b6d-81b5-5ff754f206ac", false,
                                        "4f17edc3-403c-4434-8b18-a6fcf3d127cb");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("270bb2f4-405b-4636-bc5f-d8a15f066f15", false,
                                        "3f7403d0-bd4c-43af-a485-41b492b6e2c9", true,
                                        "faee84e8-9f4f-449b-a791-b00bf9d81591");
            Policy policy2 = new Policy("270bb2f4-405b-4636-bc5f-d8a15f066f15", false,
                                        "3f7403d0-bd4c-43af-a485-41b492b6e2c9", true,
                                        "faee84e8-9f4f-449b-a791-b00bf9d81591");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("fafe2ffa-cca4-493e-86c0-94855f8de20a", false,
                                   "5d8c3608-feae-4391-8d9f-fe83e0998797", false,
                                   "af1e15cb-602e-472b-9235-77209a5eb414");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("b96f4645-d2dc-4559-937a-80712b51daed", true,
                                        "46893f22-dd68-4350-b289-7f3a476dc8ce", false,
                                        "f9d065ea-4244-4eeb-a2ad-8452d7708f2f");
            Policy policy2 = new Policy("b96f4645-d2dc-4559-937a-80712b51daed", true,
                                        "46893f22-dd68-4350-b289-7f3a476dc8ce", false,
                                        "f9d065ea-4244-4eeb-a2ad-8452d7708f2f");
            Policy policy3 = new Policy("5e78e69c-4f72-4f21-9cce-f4c66d0c5276", true,
                                        "efbca38c-f52f-4497-b00f-87319d494952", false,
                                        "343edbd2-f48c-44ea-a1bb-f52cb4bce11c");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
