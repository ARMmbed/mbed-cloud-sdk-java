// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("ec150f0b-3eb7-4a91-9da3-067c11880115", false,
                                        "a8be3258-02c7-467c-97cb-d212fc6518ef", false,
                                        "254de6a6-4e0d-4541-ae3c-b13ca6dd311b");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("8e58c4e0-e971-4a2c-a54b-7bbe2301dad1", false,
                                        "192f27c3-efd0-45af-ac13-447cfe3f96ce", false,
                                        "9893fe43-e4de-4ebf-912a-f5b91a244de2");
            Policy policy2 = new Policy("8e58c4e0-e971-4a2c-a54b-7bbe2301dad1", false,
                                        "192f27c3-efd0-45af-ac13-447cfe3f96ce", false,
                                        "9893fe43-e4de-4ebf-912a-f5b91a244de2");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("4bab8348-7d34-47ab-8d7a-bfa2ffd644af", false,
                                   "9d92ea74-b3ac-4c20-b6ff-c99f486130c4", false,
                                   "001f9d8f-6a5d-4027-bca3-88c9beff4adb");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("12898968-10c6-4135-89c3-b218b50bd25d", false,
                                        "bff2af09-e78e-429d-a1d1-fce4ce7ea952", true,
                                        "743d4289-3e14-4915-97dc-f12e22d83d44");
            Policy policy2 = new Policy("12898968-10c6-4135-89c3-b218b50bd25d", false,
                                        "bff2af09-e78e-429d-a1d1-fce4ce7ea952", true,
                                        "743d4289-3e14-4915-97dc-f12e22d83d44");
            Policy policy3 = new Policy("1ba20106-daef-481a-98d3-caa6841f0683", false,
                                        "fee95750-77a5-4ed6-8b3c-4da230d3ca4f", true,
                                        "22da345c-4e53-4081-b985-d853a60c3ee5");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
