// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("c7b6b98b-0cec-4b84-84d7-60bcea35c75d", true,
                                        "7f2de8d6-91e0-4e94-b1d8-4af6e8d00843", false,
                                        "57ed8954-815e-44af-aa18-e528fe18b6a6");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsvalid() {
        Policy policy = new Policy("ba4344df-ad7d-4901-b979-6a140f76d041", false,
                                   "1bd642b6-6b29-4208-a330-1e21726483a0", true,
                                   "99c19612-bb72-4a71-9a5b-31e42fd74da0");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashcode() {
        try {
            Policy policy1 = new Policy("a53f0cef-14d8-473a-9562-bed7024790ed", true,
                                        "d2528fb9-1727-4a33-979f-04c97a07b3de", true,
                                        "2c8d28a9-a4ab-4cd3-a96b-b000d3af0532");
            Policy policy2 = new Policy("a53f0cef-14d8-473a-9562-bed7024790ed", true,
                                        "d2528fb9-1727-4a33-979f-04c97a07b3de", true,
                                        "2c8d28a9-a4ab-4cd3-a96b-b000d3af0532");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("f1f4aa4b-aaf9-4b3e-bf3b-dad4b8d74335", true,
                                        "ec2d239e-6baa-4bbc-ab65-f485396f1bb5", true,
                                        "c6864727-b131-4f94-a892-ed915e030676");
            Policy policy2 = new Policy("f1f4aa4b-aaf9-4b3e-bf3b-dad4b8d74335", true,
                                        "ec2d239e-6baa-4bbc-ab65-f485396f1bb5", true,
                                        "c6864727-b131-4f94-a892-ed915e030676");
            Policy policy3 = new Policy("d4b910c5-f73c-433a-a3f0-d40fa5acb71b", true,
                                        "3e62c485-49a5-49c4-ac2f-9d12f9d7636e", false,
                                        "e7372826-b7fa-4c75-8146-83caa140b0ea");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
