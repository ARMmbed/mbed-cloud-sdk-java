// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("3054d711-a3b0-413c-85f2-fae11ffa9c8e", true,
                                        "f1d8761f-5eca-43f8-8735-329d12c067df", false,
                                        "ccd785b1-013e-46ae-b423-68cfae230985");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("8a4e4af6-25ff-4645-a1a1-795ffa336be6", true,
                                        "e5637826-36a1-417f-af59-568c3998764f", true,
                                        "6603fc27-14a7-4b15-89ca-83ce182a205d");
            Policy policy2 = new Policy("8a4e4af6-25ff-4645-a1a1-795ffa336be6", true,
                                        "e5637826-36a1-417f-af59-568c3998764f", true,
                                        "6603fc27-14a7-4b15-89ca-83ce182a205d");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("f1198b57-b9d9-4180-a065-133ee13441d1", false,
                                   "3777c878-050f-4be8-9784-7dd95009d07b", true,
                                   "5a2f3555-0ab4-42a2-b826-d0eeb9d5935e");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("b90bc8b4-a387-42b5-9339-90d2b1d9dba6", true,
                                        "9e7bd745-c7f6-4918-955d-ea0aecf5b217", true,
                                        "74012431-4460-4241-9cd1-859008a61fa4");
            Policy policy2 = new Policy("b90bc8b4-a387-42b5-9339-90d2b1d9dba6", true,
                                        "9e7bd745-c7f6-4918-955d-ea0aecf5b217", true,
                                        "74012431-4460-4241-9cd1-859008a61fa4");
            Policy policy3 = new Policy("7bacbf88-bcbf-4afc-acd0-ff38fdf017c7", true,
                                        "1403cf7e-86ed-4b68-bd63-028baab0496f", true,
                                        "ea591ac0-dc2a-4711-8594-cba85bd00ef8");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
