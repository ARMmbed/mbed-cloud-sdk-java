// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("d675cc98-b8b6-4081-ad31-31652a127e98", false,
                                        "f687e7f9-c42b-4c36-8d26-53e8af27bf0c", true,
                                        "754294a9-cf44-4898-a423-9f41255b67db");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("e900d74f-51fc-44ae-ba7e-60afb142ac35", false,
                                        "52a1dff3-041f-40c6-8633-232633ba6caf", true,
                                        "6dfb16cf-aecb-4b0a-a4f1-e7bb02346990");
            Policy policy2 = new Policy("e900d74f-51fc-44ae-ba7e-60afb142ac35", false,
                                        "52a1dff3-041f-40c6-8633-232633ba6caf", true,
                                        "6dfb16cf-aecb-4b0a-a4f1-e7bb02346990");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("46124aed-7cf9-43d8-a85a-6a0401523b3f", true, "f2d3dac0-5a15-4a94-aeaa-9de6a20859eb",
                                   false, "59b6a920-06dd-4e3c-808c-4b7b294267d8");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("d99d7a35-9038-467e-97b1-1351ef5ff90d", true,
                                        "8c240918-7c1c-4d1b-b9fb-ee46df2f7a80", false,
                                        "dcb47f95-e909-4caf-89a7-251ac85e8dd1");
            Policy policy2 = new Policy("d99d7a35-9038-467e-97b1-1351ef5ff90d", true,
                                        "8c240918-7c1c-4d1b-b9fb-ee46df2f7a80", false,
                                        "dcb47f95-e909-4caf-89a7-251ac85e8dd1");
            Policy policy3 = new Policy("ddbe45e3-5da1-447c-b6fe-236cf177e347", true,
                                        "47108f40-0882-45ea-b6e7-838e08ff9b25", false,
                                        "c9d75916-9895-45da-afb6-6456e7018f76");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
