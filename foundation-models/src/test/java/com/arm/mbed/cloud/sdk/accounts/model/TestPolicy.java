// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("b2a80bab-c6cf-4758-b95d-c939dfd80f0c", false,
                                        "289d6875-5b9e-47cd-9768-140f31422ba7", true,
                                        "57dc4fa5-8010-403f-94ac-0d4c000b9ac0");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("a06a0498-688f-4671-991a-fbe264fc785b", true,
                                        "8bd836e8-8527-4ac4-86be-af4fe681545a", true,
                                        "af0ff365-76e3-436c-8e21-cb93f8eed059");
            Policy policy2 = new Policy("a06a0498-688f-4671-991a-fbe264fc785b", true,
                                        "8bd836e8-8527-4ac4-86be-af4fe681545a", true,
                                        "af0ff365-76e3-436c-8e21-cb93f8eed059");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("d32aa66d-f214-4743-9b02-eacf03637452", true, "0ebabc5e-10d4-4402-a8b5-765ca4d267f8",
                                   true, "b3da75d9-2bb7-4f55-8088-ed3eed11844e");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("87a04c96-48cf-4db1-b630-5b5b71e6c012", true,
                                        "f839f7ae-653d-4f6b-a0d3-1938cb76c240", true,
                                        "0d7c48cf-e9cf-4428-a43b-10a229346c08");
            Policy policy2 = new Policy("87a04c96-48cf-4db1-b630-5b5b71e6c012", true,
                                        "f839f7ae-653d-4f6b-a0d3-1938cb76c240", true,
                                        "0d7c48cf-e9cf-4428-a43b-10a229346c08");
            Policy policy3 = new Policy("0b0d7532-7ebd-4c70-800a-a492520d166f", true,
                                        "2deef0bc-4b20-479f-9b5f-bc907d527bea", true,
                                        "30d8ba89-4f35-4c0e-a537-fc152544898b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
