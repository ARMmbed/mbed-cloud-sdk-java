// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("dcbfbf22-b01f-4fa0-addd-8b69b88b3467", false,
                                        "41eaf8f1-caae-4d97-b684-25d5cd71dcac", true,
                                        "e728a956-3e0f-464b-a951-be676b8288d3");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("3a92fe76-1bb0-40ac-8eca-3293ba38a5ea", false,
                                        "874f5541-5656-43d9-a265-f1e2a9523766", false,
                                        "40c0a981-9cfc-4d11-bfe2-0e5cbe4aab3e");
            Policy policy2 = new Policy("3a92fe76-1bb0-40ac-8eca-3293ba38a5ea", false,
                                        "874f5541-5656-43d9-a265-f1e2a9523766", false,
                                        "40c0a981-9cfc-4d11-bfe2-0e5cbe4aab3e");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("e45609ce-9ac1-4386-97df-062f84a05c85", true, "d72bc5c5-8adb-4e1e-b9e1-55754515a8aa",
                                   true, "77bc195b-3393-44be-9521-5546059ad69e");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("3ce0f548-98c0-4121-a273-0754958734f7", true,
                                        "a389e66d-da91-4aa6-a048-51ae0655076a", true,
                                        "a0c8485e-8ca8-46fa-bb47-f0e23e30832d");
            Policy policy2 = new Policy("3ce0f548-98c0-4121-a273-0754958734f7", true,
                                        "a389e66d-da91-4aa6-a048-51ae0655076a", true,
                                        "a0c8485e-8ca8-46fa-bb47-f0e23e30832d");
            Policy policy3 = new Policy("301a7137-187c-463c-ba8c-b00fa87d6d87", true,
                                        "4ae19a98-003d-47ff-be79-35699c1edf05", true,
                                        "8fbe9061-71d0-4aec-8d09-8f239b399f67");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
