// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("b273d63d-86ff-4037-9227-1a9ecad879f3", true,
                                        "ba383b4c-4eb3-4cfa-a75b-0f23633ba1e7", true,
                                        "f482afdf-c795-4eec-87f5-7318f61d1869");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("372523ad-e35d-4b85-a6e0-f88ff127ed25", false,
                                        "eb0d6377-973d-4aaa-89f3-83d223b06755", false,
                                        "7de735a6-610c-439f-a388-3e50843ee6a6");
            Policy policy2 = new Policy("372523ad-e35d-4b85-a6e0-f88ff127ed25", false,
                                        "eb0d6377-973d-4aaa-89f3-83d223b06755", false,
                                        "7de735a6-610c-439f-a388-3e50843ee6a6");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("0d99e4cc-cecf-414a-a792-955ec2a4a703", true, "7bfa5087-073b-4119-9807-79cc34bb6f7d",
                                   false, "fb45ad5e-1f5c-43d2-aeea-b0030944fcc7");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("613f7a4d-8a23-4ee5-b834-86248e112d80", true,
                                        "035de08c-3b70-4b01-888b-ec4a7d7de416", true,
                                        "1fffca09-20a2-417e-93f0-adfab528e4c7");
            Policy policy2 = new Policy("613f7a4d-8a23-4ee5-b834-86248e112d80", true,
                                        "035de08c-3b70-4b01-888b-ec4a7d7de416", true,
                                        "1fffca09-20a2-417e-93f0-adfab528e4c7");
            Policy policy3 = new Policy("dba09567-0ebe-4e5c-9529-8945c74bdd43", true,
                                        "ae878d28-a327-443f-a818-e3f6b303a963", true,
                                        "0200f909-8852-4017-801c-3da0cca5bea9");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
