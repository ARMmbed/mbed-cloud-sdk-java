// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("ff88bba4-e80b-4248-bbc0-36e47b29a66e", false,
                                        "fcbe5958-726c-4f2d-93ed-5d38fc731724", true,
                                        "feed487e-ba0a-4906-a12d-643af04a88aa");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("53085755-87d8-4454-a3c6-44f6e49e36aa", false,
                                        "074a4563-1d9d-4b8d-8388-8b3c5a604f90", false,
                                        "67e4abb2-902b-4869-ab66-6d955e9ab17b");
            Policy policy2 = new Policy("53085755-87d8-4454-a3c6-44f6e49e36aa", false,
                                        "074a4563-1d9d-4b8d-8388-8b3c5a604f90", false,
                                        "67e4abb2-902b-4869-ab66-6d955e9ab17b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("0e462d0d-9c40-465a-b8e6-c16430a7666b", false,
                                   "7507679c-bbe3-469f-89d6-2108565b2281", true,
                                   "c0e3f546-7c64-4801-97b4-464c783c6b60");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("149025e4-c88d-4bf4-af37-67c9735135b0", false,
                                        "b7ed9871-53ee-46ee-9dfc-e4542ee0a17a", false,
                                        "31af40eb-b100-44f1-bf8c-adcc385fc42f");
            Policy policy2 = new Policy("149025e4-c88d-4bf4-af37-67c9735135b0", false,
                                        "b7ed9871-53ee-46ee-9dfc-e4542ee0a17a", false,
                                        "31af40eb-b100-44f1-bf8c-adcc385fc42f");
            Policy policy3 = new Policy("f294ea5d-b86e-4f86-9a41-b206a3d647a6", false,
                                        "64ab1dbe-5560-415e-ad3f-e3f58291b68f", false,
                                        "2d95f8c6-6ce2-4f03-975b-abe30e3686b3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
