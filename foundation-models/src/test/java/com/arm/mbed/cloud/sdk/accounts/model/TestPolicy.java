// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("f0cd785a-da2c-47bc-bb32-0ec3961e2bbb", true,
                                        "7da74927-b029-4789-bcde-847d090165f5", false,
                                        "4fe87e66-24f2-402b-b8e2-b59314d0dc51");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("1e3facf5-b5e7-4c96-9ea8-0b32ab0f5f6a", true,
                                        "dfa263a1-10b6-4421-9ec7-f794ea11bdba", false,
                                        "a7c8df40-63b6-4aa3-a94c-5f29d3e149b7");
            Policy policy2 = new Policy("1e3facf5-b5e7-4c96-9ea8-0b32ab0f5f6a", true,
                                        "dfa263a1-10b6-4421-9ec7-f794ea11bdba", false,
                                        "a7c8df40-63b6-4aa3-a94c-5f29d3e149b7");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("a6c4d315-f416-4ddc-8d00-5b2f57ab60dc", true, "0a1683ac-a5f0-4591-ad24-e3120f3cef0a",
                                   false, "d1c9bfa2-0eea-425c-b435-7565fcdfef2f");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("82cff38c-8ff0-4b5a-8b7f-c439f6a685d4", false,
                                        "48fd3097-370e-481e-8e9e-bbe645a5e05c", true,
                                        "11119a05-620e-410f-930b-4c4f343ee94f");
            Policy policy2 = new Policy("82cff38c-8ff0-4b5a-8b7f-c439f6a685d4", false,
                                        "48fd3097-370e-481e-8e9e-bbe645a5e05c", true,
                                        "11119a05-620e-410f-930b-4c4f343ee94f");
            Policy policy3 = new Policy("c8ecb0f4-a3c3-4b03-9cf7-aef1170a4ec2", false,
                                        "2e5d23c2-629e-40cf-a045-c6630e200fb3", true,
                                        "128bbbe0-4e94-47ef-8477-61067dec14d3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
