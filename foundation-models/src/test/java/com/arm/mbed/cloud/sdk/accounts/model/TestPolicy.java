// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("8d168dc2-c6ec-414e-aa1b-6d6a2e5b89f2", false,
                                        "3f5fffaa-a2f0-49e9-817a-e1e684e4b770", false,
                                        "93a77e02-5bef-416a-a340-326ef2ed748c");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("047ac5a7-f36c-4e67-b8e1-b95eb6a763b9", false,
                                        "525f93b1-ee21-4fcc-939e-c48dc653a761", false,
                                        "c5b252fb-d4bc-4ed1-adc0-9ee203fdc768");
            Policy policy2 = new Policy("047ac5a7-f36c-4e67-b8e1-b95eb6a763b9", false,
                                        "525f93b1-ee21-4fcc-939e-c48dc653a761", false,
                                        "c5b252fb-d4bc-4ed1-adc0-9ee203fdc768");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @Test
    public void testIsValid() {
        Policy policy = new Policy("c993276a-c563-40f4-adb5-d4444d91d763", true, "234b2145-bd8d-4cec-bdcd-16a3d38936f7",
                                   true, "bb20fc72-4998-4388-8a45-4ce061be9c67");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("d534925b-3c48-4ee0-8f0b-605cb6c78811", true,
                                        "ec4ba2a1-2fcf-4527-8475-b6d78c56aad1", true,
                                        "f1194598-7630-448a-80ff-8a0153d4d0cc");
            Policy policy2 = new Policy("d534925b-3c48-4ee0-8f0b-605cb6c78811", true,
                                        "ec4ba2a1-2fcf-4527-8475-b6d78c56aad1", true,
                                        "f1194598-7630-448a-80ff-8a0153d4d0cc");
            Policy policy3 = new Policy("86c50820-d944-4b08-a276-7a33ab62c1c0", true,
                                        "bb0592b8-4032-4e88-998f-78e32f8e2adc", true,
                                        "2bbd5aff-ab59-428c-a073-4d749f0a2d12");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
