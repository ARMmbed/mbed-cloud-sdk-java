// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("6cc6b5d7-5422-44f3-8ee8-dfd56bda589f", false,
                                        "0f4c1aa3-66dc-48cb-8565-40faf57205e5", true,
                                        "3e428622-37f4-4141-b2eb-50d1d3c629f7");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("4f35a607-a57f-435d-8971-1e3cc1475850", true,
                                        "9bcf7ed6-1583-4e87-9f71-28051d9e8943", true,
                                        "56712705-d525-4e6e-b1d4-82946e10721c");
            Policy policy2 = new Policy("4f35a607-a57f-435d-8971-1e3cc1475850", true,
                                        "9bcf7ed6-1583-4e87-9f71-28051d9e8943", true,
                                        "56712705-d525-4e6e-b1d4-82946e10721c");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("033621c7-2771-4eb9-a0f5-5dcfe66414a6", true, "4717d0d4-1321-4d04-b529-4e8687c268ce",
                                   true, "2638cc46-171e-427d-9cb8-e6d4b8560ae4");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("530693fe-2039-4385-8fc2-633f40d820a9", false,
                                        "95faad6d-0033-4ff2-8339-19c2d9bd489c", true,
                                        "50323528-ffde-4466-b370-4bf4563af750");
            Policy policy2 = new Policy("530693fe-2039-4385-8fc2-633f40d820a9", false,
                                        "95faad6d-0033-4ff2-8339-19c2d9bd489c", true,
                                        "50323528-ffde-4466-b370-4bf4563af750");
            Policy policy3 = new Policy("56a832e0-b1ad-4334-9907-533a02610a9f", false,
                                        "a2bd7757-4fd3-4277-b1ff-ecb6513ad6fe", true,
                                        "85c8e9df-27ce-4bf4-b8eb-33c945f64ae2");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
