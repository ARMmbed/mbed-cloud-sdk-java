// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [LoginHistory]
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.Objects;

/**
 * Model for a login history.
 */
@Preamble(description = "Model for a login history.")
public abstract class AbstractLoginHistory implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = -194316261912192L;

    /**
     * UTC time RFC3339 for this login attempt.
     */
    protected Date date;

    /**
     * IP address of the client.
     */
    protected String ipAddress;

    /**
     * Flag indicating whether login attempt was successful or not.
     */
    protected boolean success;

    /**
     * User Agent header from the login request.
     */
    protected String userAgent;

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #AbstractLoginHistory()} instead.
     * 
     * @param date
     *            UTC time RFC3339 for this login attempt.
     * @param ipAddress
     *            IP address of the client.
     * @param success
     *            Flag indicating whether login attempt was successful or not.
     * @param userAgent
     *            User Agent header from the login request.
     */
    @Internal
    public AbstractLoginHistory(Date date, String ipAddress, boolean success, String userAgent) {
        super();
        setDate(date);
        setIpAddress(ipAddress);
        setSuccess(success);
        setUserAgent(userAgent);
    }

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #AbstractLoginHistory()} instead.
     * 
     * @param abstractLoginHistory
     *            an abstract login history.
     */
    @Internal
    public AbstractLoginHistory(AbstractLoginHistory abstractLoginHistory) {
        this(abstractLoginHistory == null ? new java.util.Date() : abstractLoginHistory.date,
             abstractLoginHistory == null ? (String) null : abstractLoginHistory.ipAddress,
             abstractLoginHistory == null ? false : abstractLoginHistory.success,
             abstractLoginHistory == null ? (String) null : abstractLoginHistory.userAgent);
    }

    /**
     * Constructor.
     */
    public AbstractLoginHistory() {
        this(new java.util.Date(), (String) null, false, (String) null);
    }

    /**
     * Gets utc time rfc3339 for this login attempt.
     * 
     * @return date
     */
    public Date getDate() {
        return date;
    }

    /**
     * Sets utc time rfc3339 for this login attempt.
     * 
     * @param date
     *            UTC time RFC3339 for this login attempt.
     */
    public void setDate(Date date) {
        this.date = date;
    }

    /**
     * Gets ip address of the client.
     * 
     * @return ipAddress
     */
    public String getIpAddress() {
        return ipAddress;
    }

    /**
     * Sets ip address of the client.
     * 
     * @param ipAddress
     *            IP address of the client.
     */
    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    /**
     * Gets flag indicating whether login attempt was successful or not.
     * 
     * @return success
     */
    public boolean isSuccess() {
        return success;
    }

    /**
     * Sets flag indicating whether login attempt was successful or not.
     * 
     * @param success
     *            Flag indicating whether login attempt was successful or not.
     */
    public void setSuccess(boolean success) {
        this.success = success;
    }

    /**
     * Gets user agent header from the login request.
     * 
     * @return userAgent
     */
    public String getUserAgent() {
        return userAgent;
    }

    /**
     * Sets user agent header from the login request.
     * 
     * @param userAgent
     *            User Agent header from the login request.
     */
    public void setUserAgent(String userAgent) {
        this.userAgent = userAgent;
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((date == null) ? 0 : date.hashCode());
        result = prime * result + ((ipAddress == null) ? 0 : ipAddress.hashCode());
        result = prime * result + Objects.hashCode(success);
        result = prime * result + ((userAgent == null) ? 0 : userAgent.hashCode());
        return result;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!getClass().isAssignableFrom(obj.getClass())) {
            return false;
        }
        final LoginHistory other = (LoginHistory) obj;
        if (date == null) {
            if (other.date != null) {
                return false;
            }
        } else if (!date.equals(other.date)) {
            return false;
        }
        if (ipAddress == null) {
            if (other.ipAddress != null) {
                return false;
            }
        } else if (!ipAddress.equals(other.ipAddress)) {
            return false;
        }
        if (success != other.success) {
            return false;
        }
        if (userAgent == null) {
            if (other.userAgent != null) {
                return false;
            }
        } else if (!userAgent.equals(other.userAgent)) {
            return false;
        }
        return true;
    }

    /**
     * Returns a string representation of the object.
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "AbstractLoginHistory [date=" + date + ", ipAddress=" + ipAddress + ", success=" + success
               + ", userAgent=" + userAgent + "]";
    }

    /**
     * Checks whether the model is valid or not.
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Object clone() {
        try {
            return super.clone();
        } catch (CloneNotSupportedException exception) {
            return null;
        }
    }
}
