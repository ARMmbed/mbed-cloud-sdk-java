// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Model for an account.
 */
@Preamble(description = "Model for an account.")
public class Account implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 6950361011331521L;

    /**
     * Postal address line 1.
     */
    private String addressLine1;

    /**
     * Postal address line 2.
     */
    private String addressLine2;

    /**
     * The email address of the account admin, not longer than 254 characters.
     */
    private String adminEmail;

    /**
     * The full name of the admin user to be created.
     */
    private String adminFullName;

    /**
     * The ID of the admin user created.
     */
    private String adminId;

    /**
     * The admin API key created for the account.
     */
    private String adminKey;

    /**
     * The username of the admin user to be created, containing alphanumerical letters and -,._@+= characters. It must
     * be at least 4 but not more than 30 character long.
     */
    private String adminName;

    /**
     * The password when creating a new user. It will be generated when not present in the request.
     */
    private String adminPassword;

    /**
     * An array of aliases.
     */
    private List<String> aliases;

    /**
     * The city part of the postal address.
     */
    private String city;

    /**
     * The name of the company.
     */
    private String company;

    /**
     * The name of the contact person for this account.
     */
    private String contact;

    /**
     * Contract number of the customer.
     */
    private String contractNumber;

    /**
     * The country part of the postal address.
     */
    private String country;

    /**
     * Creation UTC time RFC3339.
     */
    private Date createdAt;

    /**
     * The timestamp of the API key creation in the storage, in milliseconds.
     */
    private long creationTime;

    /**
     * Account's custom properties as key-value pairs.
     */
    private Map<String, String> customFields;

    /**
     * Customer number of the customer.
     */
    private String customerNumber;

    /**
     * The display name for the account.
     */
    private String displayName;

    /**
     * The company email address for this account.
     */
    private String email;

    /**
     * Account end market.
     */
    private String endMarket;

    /**
     * Indicates how many days (1-180) before account expiration a notification email should be sent.
     */
    private String expirationWarningThreshold;

    /**
     * A list of group IDs this API key belongs to.
     */
    private List<String> groups;

    /**
     * Account ID.
     */
    private String id;

    /**
     * The reference token expiration time in minutes for this account.
     */
    private String idleTimeout;

    /**
     * The API key.
     */
    private String key;

    /**
     * The timestamp of the latest API key usage, in milliseconds.
     */
    private long lastLoginTime;

    /**
     * List of limits as key-value pairs if requested.
     */
    private Map<String, String> limits;

    /**
     * The enforcement status of the multi-factor authentication, either 'enforced' or 'optional'.
     */
    private AccountMfaStatus mfaStatus;

    /**
     * The display name for the API key.
     */
    private String name;

    /**
     * A list of notification email addresses.
     */
    private List<String> notificationEmails;

    /**
     * The owner of this API key, who is the creator by default.
     */
    private String owner;

    /**
     * The ID of the parent account, if it has any.
     */
    private String parentId;

    /**
     * value.
     */
    private PasswordPolicy passwordPolicy;

    /**
     * The phone number of a representative of the company.
     */
    private String phoneNumber;

    /**
     * List of policies if requested.
     */
    private List<Policy> policies;

    /**
     * The postal code part of the postal address.
     */
    private String postalCode;

    /**
     * A reason note for updating the status of the account.
     */
    private String reason;

    /**
     * A reference note for updating the status of the account.
     */
    private String referenceNote;

    /**
     * Email address of the sales contact.
     */
    private String salesContact;

    /**
     * The state part of the postal address.
     */
    private String state;

    /**
     * The status of the account.
     */
    private AccountStatus status;

    /**
     * List of sub accounts. Not available for developer users.
     */
    private List subAccounts;

    /**
     * Account template ID.
     */
    private String templateId;

    /**
     * The tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. Other values are
     * reserved for the future.
     */
    private String tier;

    /**
     * Last update UTC time RFC3339.
     */
    private Date updatedAt;

    /**
     * Time when upgraded to commercial account in UTC format RFC3339.
     */
    private Date upgradedAt;

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #Account()} instead.
     * 
     * @param addressLine1
     *            Postal address line 1.
     * @param addressLine2
     *            Postal address line 2.
     * @param adminEmail
     *            The email address of the account admin, not longer than 254 characters.
     * @param adminFullName
     *            The full name of the admin user to be created.
     * @param adminId
     *            The ID of the admin user created.
     * @param adminKey
     *            The admin API key created for the account.
     * @param adminName
     *            The username of the admin user to be created, containing alphanumerical letters and -,._@+=
     *            characters. It must be at least 4 but not more than 30 character long.
     * @param adminPassword
     *            The password when creating a new user. It will be generated when not present in the request.
     * @param aliases
     *            An array of aliases.
     * @param city
     *            The city part of the postal address.
     * @param company
     *            The name of the company.
     * @param contact
     *            The name of the contact person for this account.
     * @param contractNumber
     *            Contract number of the customer.
     * @param country
     *            The country part of the postal address.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param creationTime
     *            The timestamp of the API key creation in the storage, in milliseconds.
     * @param customFields
     *            Account's custom properties as key-value pairs.
     * @param customerNumber
     *            Customer number of the customer.
     * @param displayName
     *            The display name for the account.
     * @param email
     *            The company email address for this account.
     * @param endMarket
     *            Account end market.
     * @param expirationWarningThreshold
     *            Indicates how many days (1-180) before account expiration a notification email should be sent.
     * @param groups
     *            A list of group IDs this API key belongs to.
     * @param id
     *            Account ID.
     * @param idleTimeout
     *            The reference token expiration time in minutes for this account.
     * @param key
     *            The API key.
     * @param lastLoginTime
     *            The timestamp of the latest API key usage, in milliseconds.
     * @param limits
     *            List of limits as key-value pairs if requested.
     * @param mfaStatus
     *            The enforcement status of the multi-factor authentication, either 'enforced' or 'optional'.
     * @param name
     *            The display name for the API key.
     * @param notificationEmails
     *            A list of notification email addresses.
     * @param owner
     *            The owner of this API key, who is the creator by default.
     * @param parentId
     *            The ID of the parent account, if it has any.
     * @param passwordPolicy
     *            value.
     * @param phoneNumber
     *            The phone number of a representative of the company.
     * @param policies
     *            List of policies if requested.
     * @param postalCode
     *            The postal code part of the postal address.
     * @param reason
     *            A reason note for updating the status of the account.
     * @param referenceNote
     *            A reference note for updating the status of the account.
     * @param salesContact
     *            Email address of the sales contact.
     * @param state
     *            The state part of the postal address.
     * @param status
     *            The status of the account.
     * @param subAccounts
     *            List of sub accounts. Not available for developer users.
     * @param templateId
     *            Account template ID.
     * @param tier
     *            The tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. Other
     *            values are reserved for the future.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     * @param upgradedAt
     *            Time when upgraded to commercial account in UTC format RFC3339.
     */
    @Internal
    public Account(String addressLine1, String addressLine2, String adminEmail, String adminFullName, String adminId,
                   String adminKey, String adminName, String adminPassword, List<String> aliases, String city,
                   String company, String contact, String contractNumber, String country, Date createdAt,
                   long creationTime, Map<String, String> customFields, String customerNumber, String displayName,
                   String email, String endMarket, String expirationWarningThreshold, List<String> groups, String id,
                   String idleTimeout, String key, long lastLoginTime, Map<String, String> limits,
                   AccountMfaStatus mfaStatus, String name, List<String> notificationEmails, String owner,
                   String parentId, PasswordPolicy passwordPolicy, String phoneNumber, List<Policy> policies,
                   String postalCode, String reason, String referenceNote, String salesContact, String state,
                   AccountStatus status, List subAccounts, String templateId, String tier, Date updatedAt,
                   Date upgradedAt) {
        super();
        setAddressLine1(addressLine1);
        setAddressLine2(addressLine2);
        setAdminEmail(adminEmail);
        setAdminFullName(adminFullName);
        setAdminId(adminId);
        setAdminKey(adminKey);
        setAdminName(adminName);
        setAdminPassword(adminPassword);
        setAliases(aliases);
        setCity(city);
        setCompany(company);
        setContact(contact);
        setContractNumber(contractNumber);
        setCountry(country);
        setCreatedAt(createdAt);
        setCreationTime(creationTime);
        setCustomFields(customFields);
        setCustomerNumber(customerNumber);
        setDisplayName(displayName);
        setEmail(email);
        setEndMarket(endMarket);
        setExpirationWarningThreshold(expirationWarningThreshold);
        setGroups(groups);
        setId(id);
        setIdleTimeout(idleTimeout);
        setKey(key);
        setLastLoginTime(lastLoginTime);
        setLimits(limits);
        setMfaStatus(mfaStatus);
        setName(name);
        setNotificationEmails(notificationEmails);
        setOwner(owner);
        setParentId(parentId);
        setPasswordPolicy(passwordPolicy);
        setPhoneNumber(phoneNumber);
        setPolicies(policies);
        setPostalCode(postalCode);
        setReason(reason);
        setReferenceNote(referenceNote);
        setSalesContact(salesContact);
        setState(state);
        setStatus(status);
        setSubAccounts(subAccounts);
        setTemplateId(templateId);
        setTier(tier);
        setUpdatedAt(updatedAt);
        setUpgradedAt(upgradedAt);
    }

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #Account()} instead.
     * 
     * @param account
     *            an account.
     */
    @Internal
    public Account(Account account) {
        this(account == null ? (String) null : account.addressLine1,
             account == null ? (String) null : account.addressLine2,
             account == null ? (String) null : account.adminEmail,
             account == null ? (String) null : account.adminFullName, account == null ? (String) null : account.adminId,
             account == null ? (String) null : account.adminKey, account == null ? (String) null : account.adminName,
             account == null ? (String) null : account.adminPassword, account == null ? null : account.aliases,
             account == null ? (String) null : account.city, account == null ? (String) null : account.company,
             account == null ? (String) null : account.contact,
             account == null ? (String) null : account.contractNumber,
             account == null ? (String) null : account.country,
             account == null ? new java.util.Date() : account.createdAt, account == null ? 0L : account.creationTime,
             account == null ? null : account.customFields, account == null ? (String) null : account.customerNumber,
             account == null ? (String) null : account.displayName, account == null ? (String) null : account.email,
             account == null ? (String) null : account.endMarket,
             account == null ? (String) null : account.expirationWarningThreshold,
             account == null ? null : account.groups, account == null ? (String) null : account.id,
             account == null ? (String) null : account.idleTimeout, account == null ? (String) null : account.key,
             account == null ? 0L : account.lastLoginTime, account == null ? null : account.limits,
             account == null ? AccountMfaStatus.getDefault() : account.mfaStatus,
             account == null ? (String) null : account.name, account == null ? null : account.notificationEmails,
             account == null ? (String) null : account.owner, account == null ? (String) null : account.parentId,
             account == null ? (PasswordPolicy) null : account.passwordPolicy,
             account == null ? (String) null : account.phoneNumber, account == null ? null : account.policies,
             account == null ? (String) null : account.postalCode, account == null ? (String) null : account.reason,
             account == null ? (String) null : account.referenceNote,
             account == null ? (String) null : account.salesContact, account == null ? (String) null : account.state,
             account == null ? AccountStatus.getDefault() : account.status,
             account == null ? null : account.subAccounts, account == null ? (String) null : account.templateId,
             account == null ? (String) null : account.tier, account == null ? new java.util.Date() : account.updatedAt,
             account == null ? new java.util.Date() : account.upgradedAt);
    }

    /**
     * Constructor.
     */
    public Account() {
        this((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null,
             (String) null, null, (String) null, (String) null, (String) null, (String) null, (String) null,
             new java.util.Date(), 0L, null, (String) null, (String) null, (String) null, (String) null, (String) null,
             null, (String) null, (String) null, (String) null, 0L, null, AccountMfaStatus.getDefault(), (String) null,
             null, (String) null, (String) null, (PasswordPolicy) null, (String) null, null, (String) null,
             (String) null, (String) null, (String) null, (String) null, AccountStatus.getDefault(), null,
             (String) null, (String) null, new java.util.Date(), new java.util.Date());
    }

    /**
     * Constructor.
     * 
     * @param id
     *            Account ID.
     */
    public Account(String id) {
        this();
        setId(id);
    }

    /**
     * Gets postal address line 1.
     * 
     * @return addressLine1
     */
    public String getAddressLine1() {
        return addressLine1;
    }

    /**
     * Sets postal address line 1.
     * 
     * @param addressLine1
     *            Postal address line 1.
     */
    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
    }

    /**
     * Gets postal address line 2.
     * 
     * @return addressLine2
     */
    public String getAddressLine2() {
        return addressLine2;
    }

    /**
     * Sets postal address line 2.
     * 
     * @param addressLine2
     *            Postal address line 2.
     */
    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
    }

    /**
     * Gets the email address of the account admin, not longer than 254 characters.
     * 
     * @return adminEmail
     */
    public String getAdminEmail() {
        return adminEmail;
    }

    /**
     * Sets the email address of the account admin, not longer than 254 characters.
     * 
     * @param adminEmail
     *            The email address of the account admin, not longer than 254 characters.
     */
    public void setAdminEmail(String adminEmail) {
        this.adminEmail = adminEmail;
    }

    /**
     * Gets the full name of the admin user to be created.
     * 
     * @return adminFullName
     */
    public String getAdminFullName() {
        return adminFullName;
    }

    /**
     * Sets the full name of the admin user to be created.
     * 
     * @param adminFullName
     *            The full name of the admin user to be created.
     */
    public void setAdminFullName(String adminFullName) {
        this.adminFullName = adminFullName;
    }

    /**
     * Gets the id of the admin user created.
     * 
     * @return adminId
     */
    public String getAdminId() {
        return adminId;
    }

    /**
     * Sets the id of the admin user created.
     * 
     * @param adminId
     *            The ID of the admin user created.
     */
    public void setAdminId(String adminId) {
        this.adminId = adminId;
    }

    /**
     * Gets the admin api key created for the account.
     * 
     * @return adminKey
     */
    public String getAdminKey() {
        return adminKey;
    }

    /**
     * Sets the admin api key created for the account.
     * 
     * @param adminKey
     *            The admin API key created for the account.
     */
    public void setAdminKey(String adminKey) {
        this.adminKey = adminKey;
    }

    /**
     * Gets the username of the admin user to be created, containing alphanumerical letters and -,._@+= characters. it
     * must be at least 4 but not more than 30 character long.
     * 
     * @return adminName
     */
    public String getAdminName() {
        return adminName;
    }

    /**
     * Sets the username of the admin user to be created, containing alphanumerical letters and -,._@+= characters. it
     * must be at least 4 but not more than 30 character long.
     * 
     * @param adminName
     *            The username of the admin user to be created, containing alphanumerical letters and -,._@+=
     *            characters. It must be at least 4 but not more than 30 character long.
     */
    public void setAdminName(String adminName) {
        this.adminName = adminName;
    }

    /**
     * Gets the password when creating a new user. it will be generated when not present in the request.
     * 
     * @return adminPassword
     */
    public String getAdminPassword() {
        return adminPassword;
    }

    /**
     * Sets the password when creating a new user. it will be generated when not present in the request.
     * 
     * @param adminPassword
     *            The password when creating a new user. It will be generated when not present in the request.
     */
    public void setAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
    }

    /**
     * Gets an array of aliases.
     * 
     * @return aliases
     */
    public List<String> getAliases() {
        return aliases;
    }

    /**
     * Sets an array of aliases.
     * 
     * @param aliases
     *            An array of aliases.
     */
    public void setAliases(List<String> aliases) {
        this.aliases = aliases;
    }

    /**
     * Gets the city part of the postal address.
     * 
     * @return city
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the city part of the postal address.
     * 
     * @param city
     *            The city part of the postal address.
     */
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Gets the name of the company.
     * 
     * @return company
     */
    public String getCompany() {
        return company;
    }

    /**
     * Sets the name of the company.
     * 
     * @param company
     *            The name of the company.
     */
    public void setCompany(String company) {
        this.company = company;
    }

    /**
     * Gets the name of the contact person for this account.
     * 
     * @return contact
     */
    public String getContact() {
        return contact;
    }

    /**
     * Sets the name of the contact person for this account.
     * 
     * @param contact
     *            The name of the contact person for this account.
     */
    public void setContact(String contact) {
        this.contact = contact;
    }

    /**
     * Gets contract number of the customer.
     * 
     * @return contractNumber
     */
    public String getContractNumber() {
        return contractNumber;
    }

    /**
     * Sets contract number of the customer.
     * 
     * @param contractNumber
     *            Contract number of the customer.
     */
    public void setContractNumber(String contractNumber) {
        this.contractNumber = contractNumber;
    }

    /**
     * Gets the country part of the postal address.
     * 
     * @return country
     */
    public String getCountry() {
        return country;
    }

    /**
     * Sets the country part of the postal address.
     * 
     * @param country
     *            The country part of the postal address.
     */
    public void setCountry(String country) {
        this.country = country;
    }

    /**
     * Gets creation utc time rfc3339.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets creation utc time rfc3339.
     * 
     * @param createdAt
     *            Creation UTC time RFC3339.
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the timestamp of the api key creation in the storage, in milliseconds.
     * 
     * @return creationTime
     */
    public long getCreationTime() {
        return creationTime;
    }

    /**
     * Sets the timestamp of the api key creation in the storage, in milliseconds.
     * 
     * @param creationTime
     *            The timestamp of the API key creation in the storage, in milliseconds.
     */
    public void setCreationTime(long creationTime) {
        this.creationTime = creationTime;
    }

    /**
     * Gets account's custom properties as key-value pairs.
     * 
     * @return customFields
     */
    public Map<String, String> getCustomFields() {
        return customFields;
    }

    /**
     * Sets account's custom properties as key-value pairs.
     * 
     * @param customFields
     *            Account's custom properties as key-value pairs.
     */
    public void setCustomFields(Map<String, String> customFields) {
        this.customFields = customFields;
    }

    /**
     * Gets customer number of the customer.
     * 
     * @return customerNumber
     */
    public String getCustomerNumber() {
        return customerNumber;
    }

    /**
     * Sets customer number of the customer.
     * 
     * @param customerNumber
     *            Customer number of the customer.
     */
    public void setCustomerNumber(String customerNumber) {
        this.customerNumber = customerNumber;
    }

    /**
     * Gets the display name for the account.
     * 
     * @return displayName
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the display name for the account.
     * 
     * @param displayName
     *            The display name for the account.
     */
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /**
     * Gets the company email address for this account.
     * 
     * @return email
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the company email address for this account.
     * 
     * @param email
     *            The company email address for this account.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets account end market.
     * 
     * @return endMarket
     */
    public String getEndMarket() {
        return endMarket;
    }

    /**
     * Sets account end market.
     * 
     * @param endMarket
     *            Account end market.
     */
    public void setEndMarket(String endMarket) {
        this.endMarket = endMarket;
    }

    /**
     * Gets indicates how many days (1-180) before account expiration a notification email should be sent.
     * 
     * @return expirationWarningThreshold
     */
    public String getExpirationWarningThreshold() {
        return expirationWarningThreshold;
    }

    /**
     * Sets indicates how many days (1-180) before account expiration a notification email should be sent.
     * 
     * @param expirationWarningThreshold
     *            Indicates how many days (1-180) before account expiration a notification email should be sent.
     */
    public void setExpirationWarningThreshold(String expirationWarningThreshold) {
        this.expirationWarningThreshold = expirationWarningThreshold;
    }

    /**
     * Gets a list of group ids this api key belongs to.
     * 
     * @return groups
     */
    public List<String> getGroups() {
        return groups;
    }

    /**
     * Sets a list of group ids this api key belongs to.
     * 
     * @param groups
     *            A list of group IDs this API key belongs to.
     */
    public void setGroups(List<String> groups) {
        this.groups = groups;
    }

    /**
     * Gets account id.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets account id.
     * 
     * @param id
     *            Account ID.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets account id.
     * <p>
     * Similar to {@link #setId(String)}
     * 
     * @param accountId
     *            Account ID.
     */
    @Internal
    public void setAccountId(String accountId) {
        setId(accountId);
    }

    /**
     * Gets the reference token expiration time in minutes for this account.
     * 
     * @return idleTimeout
     */
    public String getIdleTimeout() {
        return idleTimeout;
    }

    /**
     * Sets the reference token expiration time in minutes for this account.
     * 
     * @param idleTimeout
     *            The reference token expiration time in minutes for this account.
     */
    public void setIdleTimeout(String idleTimeout) {
        this.idleTimeout = idleTimeout;
    }

    /**
     * Gets the api key.
     * 
     * @return key
     */
    public String getKey() {
        return key;
    }

    /**
     * Sets the api key.
     * 
     * @param key
     *            The API key.
     */
    public void setKey(String key) {
        this.key = key;
    }

    /**
     * Gets the timestamp of the latest api key usage, in milliseconds.
     * 
     * @return lastLoginTime
     */
    public long getLastLoginTime() {
        return lastLoginTime;
    }

    /**
     * Sets the timestamp of the latest api key usage, in milliseconds.
     * 
     * @param lastLoginTime
     *            The timestamp of the latest API key usage, in milliseconds.
     */
    public void setLastLoginTime(long lastLoginTime) {
        this.lastLoginTime = lastLoginTime;
    }

    /**
     * Gets list of limits as key-value pairs if requested.
     * 
     * @return limits
     */
    public Map<String, String> getLimits() {
        return limits;
    }

    /**
     * Sets list of limits as key-value pairs if requested.
     * 
     * @param limits
     *            List of limits as key-value pairs if requested.
     */
    public void setLimits(Map<String, String> limits) {
        this.limits = limits;
    }

    /**
     * Gets the enforcement status of the multi-factor authentication, either 'enforced' or 'optional'.
     * 
     * @return mfaStatus
     */
    public AccountMfaStatus getMfaStatus() {
        return mfaStatus;
    }

    /**
     * Sets the enforcement status of the multi-factor authentication, either 'enforced' or 'optional'.
     * 
     * @param mfaStatus
     *            The enforcement status of the multi-factor authentication, either 'enforced' or 'optional'.
     */
    public void setMfaStatus(AccountMfaStatus mfaStatus) {
        this.mfaStatus = mfaStatus;
    }

    /**
     * Gets the display name for the api key.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the display name for the api key.
     * 
     * @param name
     *            The display name for the API key.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets a list of notification email addresses.
     * 
     * @return notificationEmails
     */
    public List<String> getNotificationEmails() {
        return notificationEmails;
    }

    /**
     * Sets a list of notification email addresses.
     * 
     * @param notificationEmails
     *            A list of notification email addresses.
     */
    public void setNotificationEmails(List<String> notificationEmails) {
        this.notificationEmails = notificationEmails;
    }

    /**
     * Gets the owner of this api key, who is the creator by default.
     * 
     * @return owner
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the owner of this api key, who is the creator by default.
     * 
     * @param owner
     *            The owner of this API key, who is the creator by default.
     */
    public void setOwner(String owner) {
        this.owner = owner;
    }

    /**
     * Gets the id of the parent account, if it has any.
     * 
     * @return parentId
     */
    public String getParentId() {
        return parentId;
    }

    /**
     * Sets the id of the parent account, if it has any.
     * 
     * @param parentId
     *            The ID of the parent account, if it has any.
     */
    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    /**
     * Gets value.
     * 
     * @return passwordPolicy
     */
    public PasswordPolicy getPasswordPolicy() {
        return passwordPolicy;
    }

    /**
     * Sets value.
     * 
     * @param passwordPolicy
     *            value.
     */
    public void setPasswordPolicy(PasswordPolicy passwordPolicy) {
        this.passwordPolicy = passwordPolicy;
    }

    /**
     * Gets the phone number of a representative of the company.
     * 
     * @return phoneNumber
     */
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Sets the phone number of a representative of the company.
     * 
     * @param phoneNumber
     *            The phone number of a representative of the company.
     */
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    /**
     * Gets list of policies if requested.
     * 
     * @return policies
     */
    public List<Policy> getPolicies() {
        return policies;
    }

    /**
     * Sets list of policies if requested.
     * 
     * @param policies
     *            List of policies if requested.
     */
    public void setPolicies(List<Policy> policies) {
        this.policies = policies;
    }

    /**
     * Gets the postal code part of the postal address.
     * 
     * @return postalCode
     */
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the postal code part of the postal address.
     * 
     * @param postalCode
     *            The postal code part of the postal address.
     */
    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    /**
     * Gets a reason note for updating the status of the account.
     * 
     * @return reason
     */
    public String getReason() {
        return reason;
    }

    /**
     * Sets a reason note for updating the status of the account.
     * 
     * @param reason
     *            A reason note for updating the status of the account.
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Gets a reference note for updating the status of the account.
     * 
     * @return referenceNote
     */
    public String getReferenceNote() {
        return referenceNote;
    }

    /**
     * Sets a reference note for updating the status of the account.
     * 
     * @param referenceNote
     *            A reference note for updating the status of the account.
     */
    public void setReferenceNote(String referenceNote) {
        this.referenceNote = referenceNote;
    }

    /**
     * Gets email address of the sales contact.
     * 
     * @return salesContact
     */
    public String getSalesContact() {
        return salesContact;
    }

    /**
     * Sets email address of the sales contact.
     * 
     * @param salesContact
     *            Email address of the sales contact.
     */
    public void setSalesContact(String salesContact) {
        this.salesContact = salesContact;
    }

    /**
     * Gets the state part of the postal address.
     * 
     * @return state
     */
    public String getState() {
        return state;
    }

    /**
     * Sets the state part of the postal address.
     * 
     * @param state
     *            The state part of the postal address.
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Gets the status of the account.
     * 
     * @return status
     */
    public AccountStatus getStatus() {
        return status;
    }

    /**
     * Sets the status of the account.
     * 
     * @param status
     *            The status of the account.
     */
    public void setStatus(AccountStatus status) {
        this.status = status;
    }

    /**
     * Gets list of sub accounts. not available for developer users.
     * 
     * @return subAccounts
     */
    public List getSubAccounts() {
        return subAccounts;
    }

    /**
     * Sets list of sub accounts. not available for developer users.
     * 
     * @param subAccounts
     *            List of sub accounts. Not available for developer users.
     */
    public void setSubAccounts(List subAccounts) {
        this.subAccounts = subAccounts;
    }

    /**
     * Gets account template id.
     * 
     * @return templateId
     */
    public String getTemplateId() {
        return templateId;
    }

    /**
     * Sets account template id.
     * 
     * @param templateId
     *            Account template ID.
     */
    public void setTemplateId(String templateId) {
        this.templateId = templateId;
    }

    /**
     * Gets the tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. other values are
     * reserved for the future.
     * 
     * @return tier
     */
    public String getTier() {
        return tier;
    }

    /**
     * Sets the tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. other values are
     * reserved for the future.
     * 
     * @param tier
     *            The tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. Other
     *            values are reserved for the future.
     */
    public void setTier(String tier) {
        this.tier = tier;
    }

    /**
     * Gets last update utc time rfc3339.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets last update utc time rfc3339.
     * 
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Gets time when upgraded to commercial account in utc format rfc3339.
     * 
     * @return upgradedAt
     */
    public Date getUpgradedAt() {
        return upgradedAt;
    }

    /**
     * Sets time when upgraded to commercial account in utc format rfc3339.
     * 
     * @param upgradedAt
     *            Time when upgraded to commercial account in UTC format RFC3339.
     */
    public void setUpgradedAt(Date upgradedAt) {
        this.upgradedAt = upgradedAt;
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((addressLine1 == null) ? 0 : addressLine1.hashCode());
        result = prime * result + ((addressLine2 == null) ? 0 : addressLine2.hashCode());
        result = prime * result + ((adminEmail == null) ? 0 : adminEmail.hashCode());
        result = prime * result + ((adminFullName == null) ? 0 : adminFullName.hashCode());
        result = prime * result + ((adminId == null) ? 0 : adminId.hashCode());
        result = prime * result + ((adminKey == null) ? 0 : adminKey.hashCode());
        result = prime * result + ((adminName == null) ? 0 : adminName.hashCode());
        result = prime * result + ((adminPassword == null) ? 0 : adminPassword.hashCode());
        result = prime * result + ((aliases == null) ? 0 : aliases.hashCode());
        result = prime * result + ((city == null) ? 0 : city.hashCode());
        result = prime * result + ((company == null) ? 0 : company.hashCode());
        result = prime * result + ((contact == null) ? 0 : contact.hashCode());
        result = prime * result + ((contractNumber == null) ? 0 : contractNumber.hashCode());
        result = prime * result + ((country == null) ? 0 : country.hashCode());
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + Objects.hashCode(creationTime);
        result = prime * result + ((customFields == null) ? 0 : customFields.hashCode());
        result = prime * result + ((customerNumber == null) ? 0 : customerNumber.hashCode());
        result = prime * result + ((displayName == null) ? 0 : displayName.hashCode());
        result = prime * result + ((email == null) ? 0 : email.hashCode());
        result = prime * result + ((endMarket == null) ? 0 : endMarket.hashCode());
        result = prime * result + ((expirationWarningThreshold == null) ? 0 : expirationWarningThreshold.hashCode());
        result = prime * result + ((groups == null) ? 0 : groups.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((idleTimeout == null) ? 0 : idleTimeout.hashCode());
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + Objects.hashCode(lastLoginTime);
        result = prime * result + ((limits == null) ? 0 : limits.hashCode());
        result = prime * result + ((mfaStatus == null) ? 0 : mfaStatus.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((notificationEmails == null) ? 0 : notificationEmails.hashCode());
        result = prime * result + ((owner == null) ? 0 : owner.hashCode());
        result = prime * result + ((parentId == null) ? 0 : parentId.hashCode());
        result = prime * result + ((passwordPolicy == null) ? 0 : passwordPolicy.hashCode());
        result = prime * result + ((phoneNumber == null) ? 0 : phoneNumber.hashCode());
        result = prime * result + ((policies == null) ? 0 : policies.hashCode());
        result = prime * result + ((postalCode == null) ? 0 : postalCode.hashCode());
        result = prime * result + ((reason == null) ? 0 : reason.hashCode());
        result = prime * result + ((referenceNote == null) ? 0 : referenceNote.hashCode());
        result = prime * result + ((salesContact == null) ? 0 : salesContact.hashCode());
        result = prime * result + ((state == null) ? 0 : state.hashCode());
        result = prime * result + ((status == null) ? 0 : status.hashCode());
        result = prime * result + ((subAccounts == null) ? 0 : subAccounts.hashCode());
        result = prime * result + ((templateId == null) ? 0 : templateId.hashCode());
        result = prime * result + ((tier == null) ? 0 : tier.hashCode());
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        result = prime * result + ((upgradedAt == null) ? 0 : upgradedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    public boolean canEqual(Object other) {
        return other instanceof Account;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Account)) {
            return false;
        }
        final Account other = (Account) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (addressLine1 == null) {
            if (other.addressLine1 != null) {
                return false;
            }
        } else if (!addressLine1.equals(other.addressLine1)) {
            return false;
        }
        if (addressLine2 == null) {
            if (other.addressLine2 != null) {
                return false;
            }
        } else if (!addressLine2.equals(other.addressLine2)) {
            return false;
        }
        if (adminEmail == null) {
            if (other.adminEmail != null) {
                return false;
            }
        } else if (!adminEmail.equals(other.adminEmail)) {
            return false;
        }
        if (adminFullName == null) {
            if (other.adminFullName != null) {
                return false;
            }
        } else if (!adminFullName.equals(other.adminFullName)) {
            return false;
        }
        if (adminId == null) {
            if (other.adminId != null) {
                return false;
            }
        } else if (!adminId.equals(other.adminId)) {
            return false;
        }
        if (adminKey == null) {
            if (other.adminKey != null) {
                return false;
            }
        } else if (!adminKey.equals(other.adminKey)) {
            return false;
        }
        if (adminName == null) {
            if (other.adminName != null) {
                return false;
            }
        } else if (!adminName.equals(other.adminName)) {
            return false;
        }
        if (adminPassword == null) {
            if (other.adminPassword != null) {
                return false;
            }
        } else if (!adminPassword.equals(other.adminPassword)) {
            return false;
        }
        if (aliases == null) {
            if (other.aliases != null) {
                return false;
            }
        } else if (!aliases.equals(other.aliases)) {
            return false;
        }
        if (city == null) {
            if (other.city != null) {
                return false;
            }
        } else if (!city.equals(other.city)) {
            return false;
        }
        if (company == null) {
            if (other.company != null) {
                return false;
            }
        } else if (!company.equals(other.company)) {
            return false;
        }
        if (contact == null) {
            if (other.contact != null) {
                return false;
            }
        } else if (!contact.equals(other.contact)) {
            return false;
        }
        if (contractNumber == null) {
            if (other.contractNumber != null) {
                return false;
            }
        } else if (!contractNumber.equals(other.contractNumber)) {
            return false;
        }
        if (country == null) {
            if (other.country != null) {
                return false;
            }
        } else if (!country.equals(other.country)) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (creationTime != other.creationTime) {
            return false;
        }
        if (customFields == null) {
            if (other.customFields != null) {
                return false;
            }
        } else if (!customFields.equals(other.customFields)) {
            return false;
        }
        if (customerNumber == null) {
            if (other.customerNumber != null) {
                return false;
            }
        } else if (!customerNumber.equals(other.customerNumber)) {
            return false;
        }
        if (displayName == null) {
            if (other.displayName != null) {
                return false;
            }
        } else if (!displayName.equals(other.displayName)) {
            return false;
        }
        if (email == null) {
            if (other.email != null) {
                return false;
            }
        } else if (!email.equals(other.email)) {
            return false;
        }
        if (endMarket == null) {
            if (other.endMarket != null) {
                return false;
            }
        } else if (!endMarket.equals(other.endMarket)) {
            return false;
        }
        if (expirationWarningThreshold == null) {
            if (other.expirationWarningThreshold != null) {
                return false;
            }
        } else if (!expirationWarningThreshold.equals(other.expirationWarningThreshold)) {
            return false;
        }
        if (groups == null) {
            if (other.groups != null) {
                return false;
            }
        } else if (!groups.equals(other.groups)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (idleTimeout == null) {
            if (other.idleTimeout != null) {
                return false;
            }
        } else if (!idleTimeout.equals(other.idleTimeout)) {
            return false;
        }
        if (key == null) {
            if (other.key != null) {
                return false;
            }
        } else if (!key.equals(other.key)) {
            return false;
        }
        if (lastLoginTime != other.lastLoginTime) {
            return false;
        }
        if (limits == null) {
            if (other.limits != null) {
                return false;
            }
        } else if (!limits.equals(other.limits)) {
            return false;
        }
        if (mfaStatus != other.mfaStatus) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (notificationEmails == null) {
            if (other.notificationEmails != null) {
                return false;
            }
        } else if (!notificationEmails.equals(other.notificationEmails)) {
            return false;
        }
        if (owner == null) {
            if (other.owner != null) {
                return false;
            }
        } else if (!owner.equals(other.owner)) {
            return false;
        }
        if (parentId == null) {
            if (other.parentId != null) {
                return false;
            }
        } else if (!parentId.equals(other.parentId)) {
            return false;
        }
        if (passwordPolicy == null) {
            if (other.passwordPolicy != null) {
                return false;
            }
        } else if (!passwordPolicy.equals(other.passwordPolicy)) {
            return false;
        }
        if (phoneNumber == null) {
            if (other.phoneNumber != null) {
                return false;
            }
        } else if (!phoneNumber.equals(other.phoneNumber)) {
            return false;
        }
        if (policies == null) {
            if (other.policies != null) {
                return false;
            }
        } else if (!policies.equals(other.policies)) {
            return false;
        }
        if (postalCode == null) {
            if (other.postalCode != null) {
                return false;
            }
        } else if (!postalCode.equals(other.postalCode)) {
            return false;
        }
        if (reason == null) {
            if (other.reason != null) {
                return false;
            }
        } else if (!reason.equals(other.reason)) {
            return false;
        }
        if (referenceNote == null) {
            if (other.referenceNote != null) {
                return false;
            }
        } else if (!referenceNote.equals(other.referenceNote)) {
            return false;
        }
        if (salesContact == null) {
            if (other.salesContact != null) {
                return false;
            }
        } else if (!salesContact.equals(other.salesContact)) {
            return false;
        }
        if (state == null) {
            if (other.state != null) {
                return false;
            }
        } else if (!state.equals(other.state)) {
            return false;
        }
        if (status != other.status) {
            return false;
        }
        if (subAccounts == null) {
            if (other.subAccounts != null) {
                return false;
            }
        } else if (!subAccounts.equals(other.subAccounts)) {
            return false;
        }
        if (templateId == null) {
            if (other.templateId != null) {
                return false;
            }
        } else if (!templateId.equals(other.templateId)) {
            return false;
        }
        if (tier == null) {
            if (other.tier != null) {
                return false;
            }
        } else if (!tier.equals(other.tier)) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        if (upgradedAt == null) {
            if (other.upgradedAt != null) {
                return false;
            }
        } else if (!upgradedAt.equals(other.upgradedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Returns a string representation of the object.
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "Account [addressLine1=" + addressLine1 + ", addressLine2=" + addressLine2 + ", adminEmail=" + adminEmail
               + ", adminFullName=" + adminFullName + ", adminId=" + adminId + ", adminKey=" + adminKey + ", adminName="
               + adminName + ", adminPassword=" + adminPassword + ", aliases=" + aliases + ", city=" + city
               + ", company=" + company + ", contact=" + contact + ", contractNumber=" + contractNumber + ", country="
               + country + ", createdAt=" + createdAt + ", creationTime=" + creationTime + ", customFields="
               + customFields + ", customerNumber=" + customerNumber + ", displayName=" + displayName + ", email="
               + email + ", endMarket=" + endMarket + ", expirationWarningThreshold=" + expirationWarningThreshold
               + ", groups=" + groups + ", id=" + id + ", idleTimeout=" + idleTimeout + ", key=" + key
               + ", lastLoginTime=" + lastLoginTime + ", limits=" + limits + ", mfaStatus=" + mfaStatus + ", name="
               + name + ", notificationEmails=" + notificationEmails + ", owner=" + owner + ", parentId=" + parentId
               + ", passwordPolicy=" + passwordPolicy + ", phoneNumber=" + phoneNumber + ", policies=" + policies
               + ", postalCode=" + postalCode + ", reason=" + reason + ", referenceNote=" + referenceNote
               + ", salesContact=" + salesContact + ", state=" + state + ", status=" + status + ", subAccounts="
               + subAccounts + ", templateId=" + templateId + ", tier=" + tier + ", updatedAt=" + updatedAt
               + ", upgradedAt=" + upgradedAt + "]";
    }

    /**
     * Checks whether the model is valid or not.
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Account clone() {
        return new Account(this);
    }
}
