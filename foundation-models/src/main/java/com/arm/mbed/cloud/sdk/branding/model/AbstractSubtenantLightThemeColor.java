// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [SubtenantLightThemeColor]
package com.arm.mbed.cloud.sdk.branding.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;

/**
 * Model for a subtenant light theme color.
 */
@Preamble(description = "Model for a subtenant light theme color.")
public abstract class AbstractSubtenantLightThemeColor implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1297241323121920L;

    /**
     * The color given as name (purple) or as a hex code.
     */
    protected String color;

    /**
     * Color name.
     */
    protected SubtenantLightThemeColorReference reference;

    /**
     * Last update time in UTC.
     */
    protected final Date updatedAt;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #AbstractSubtenantLightThemeColor()} instead.
     * 
     * @param color
     *            The color given as name (purple) or as a hex code.
     * @param reference
     *            Color name.
     * @param updatedAt
     *            Last update time in UTC.
     */
    @Internal
    public AbstractSubtenantLightThemeColor(String color, SubtenantLightThemeColorReference reference, Date updatedAt) {
        super();
        this.updatedAt = updatedAt;
        setColor(color);
        setReference(reference);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #AbstractSubtenantLightThemeColor()} instead.
     * 
     * @param abstractSubtenantLightThemeColor
     *            an abstract subtenant light theme color.
     */
    @Internal
    public AbstractSubtenantLightThemeColor(AbstractSubtenantLightThemeColor abstractSubtenantLightThemeColor) {
        this(abstractSubtenantLightThemeColor == null ? (String) null : abstractSubtenantLightThemeColor.color,
             abstractSubtenantLightThemeColor == null ? SubtenantLightThemeColorReference.getDefault()
                                                      : abstractSubtenantLightThemeColor.reference,
             abstractSubtenantLightThemeColor == null ? new Date() : abstractSubtenantLightThemeColor.updatedAt);
    }

    /**
     * Constructor.
     */
    public AbstractSubtenantLightThemeColor() {
        this((String) null, SubtenantLightThemeColorReference.getDefault(), new Date());
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #AbstractSubtenantLightThemeColor()} instead.
     * 
     * @param updatedAt
     *            Last update time in UTC.
     */
    @Internal
    public AbstractSubtenantLightThemeColor(Date updatedAt) {
        this((String) null, SubtenantLightThemeColorReference.getDefault(), updatedAt);
    }

    /**
     * Gets the color given as name (purple) or as a hex code.
     * 
     * @return color
     */
    public String getColor() {
        return color;
    }

    /**
     * Sets the color given as name (purple) or as a hex code.
     * 
     * @param color
     *            The color given as name (purple) or as a hex code.
     */
    public void setColor(String color) {
        this.color = color;
    }

    /**
     * Gets color name.
     * 
     * @return reference
     */
    public SubtenantLightThemeColorReference getReference() {
        return reference;
    }

    /**
     * Sets color name.
     * 
     * @param reference
     *            Color name.
     */
    public void setReference(SubtenantLightThemeColorReference reference) {
        this.reference = reference;
    }

    /**
     * Sets color name.
     * 
     * <p>
     * Similar to {@link #setReference(com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference)}
     * 
     * @param reference
     *            Color name.
     */
    @Internal
    public void setReference(String reference) {
        this.reference = SubtenantLightThemeColorReference.getValue(reference);
    }

    /**
     * Gets last update time in utc.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "AbstractSubtenantLightThemeColor [color=" + color + ", reference=" + reference + ", updatedAt="
               + updatedAt + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((color == null) ? 0 : color.hashCode());
        result = prime * result + ((reference == null) ? 0 : reference.hashCode());
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof AbstractSubtenantLightThemeColor;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof SubtenantLightThemeColor)) {
            return false;
        }
        final SubtenantLightThemeColor other = (SubtenantLightThemeColor) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (color == null) {
            if (other.color != null) {
                return false;
            }
        } else if (!color.equals(other.color)) {
            return false;
        }
        if (reference != other.reference) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public abstract Object clone();
}
