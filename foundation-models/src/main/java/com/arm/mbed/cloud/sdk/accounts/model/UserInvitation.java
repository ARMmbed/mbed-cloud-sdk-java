// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.List;

/**
 * Model for a user invitation.
 */
@Preamble(description = "Model for a user invitation.")
public class UserInvitation implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1155551388211951L;

    /**
     * The UUID of the account the user is invited to.
     */
    private String accountId;

    /**
     * Creation UTC time RFC3339.
     */
    private Date createdAt;

    /**
     * Email address of the invited user.
     */
    private String email;

    /**
     * Invitation expiration as UTC time RFC3339.
     */
    private Date expiration;

    /**
     * A list of IDs of the groups the user is invited to.
     */
    private List<String> groups;

    /**
     * The UUID of the invitation.
     */
    private String id;

    /**
     * Last update UTC time RFC3339.
     */
    private Date updatedAt;

    /**
     * The UUID of the invited user.
     */
    private String userId;

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #UserInvitation()} instead.
     * 
     * @param accountId
     *            The UUID of the account the user is invited to.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param email
     *            Email address of the invited user.
     * @param expiration
     *            Invitation expiration as UTC time RFC3339.
     * @param groups
     *            A list of IDs of the groups the user is invited to.
     * @param id
     *            The UUID of the invitation.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     * @param userId
     *            The UUID of the invited user.
     */
    @Internal
    public UserInvitation(String accountId, Date createdAt, String email, Date expiration, List<String> groups,
                          String id, Date updatedAt, String userId) {
        super();
        setAccountId(accountId);
        setCreatedAt(createdAt);
        setEmail(email);
        setExpiration(expiration);
        setGroups(groups);
        setId(id);
        setUpdatedAt(updatedAt);
        setUserId(userId);
    }

    /**
     * Internal constructor.
     * <p>
     * Note: Should not be used. Use {@link #UserInvitation()} instead.
     * 
     * @param userInvitation
     *            a user invitation.
     */
    @Internal
    public UserInvitation(UserInvitation userInvitation) {
        this(userInvitation == null ? (String) null : userInvitation.accountId,
             userInvitation == null ? new java.util.Date() : userInvitation.createdAt,
             userInvitation == null ? (String) null : userInvitation.email,
             userInvitation == null ? new java.util.Date() : userInvitation.expiration,
             userInvitation == null ? null : userInvitation.groups,
             userInvitation == null ? (String) null : userInvitation.id,
             userInvitation == null ? new java.util.Date() : userInvitation.updatedAt,
             userInvitation == null ? (String) null : userInvitation.userId);
    }

    /**
     * Constructor.
     */
    public UserInvitation() {
        this((String) null, new java.util.Date(), (String) null, new java.util.Date(), null, (String) null,
             new java.util.Date(), (String) null);
    }

    /**
     * Constructor.
     * 
     * @param id
     *            The UUID of the invitation.
     */
    public UserInvitation(String id) {
        this();
        setId(id);
    }

    /**
     * Gets the uuid of the account the user is invited to.
     * 
     * @return accountId
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the uuid of the account the user is invited to.
     * 
     * @param accountId
     *            The UUID of the account the user is invited to.
     */
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    /**
     * Gets creation utc time rfc3339.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets creation utc time rfc3339.
     * 
     * @param createdAt
     *            Creation UTC time RFC3339.
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets email address of the invited user.
     * 
     * @return email
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets email address of the invited user.
     * 
     * @param email
     *            Email address of the invited user.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets invitation expiration as utc time rfc3339.
     * 
     * @return expiration
     */
    public Date getExpiration() {
        return expiration;
    }

    /**
     * Sets invitation expiration as utc time rfc3339.
     * 
     * @param expiration
     *            Invitation expiration as UTC time RFC3339.
     */
    public void setExpiration(Date expiration) {
        this.expiration = expiration;
    }

    /**
     * Gets a list of ids of the groups the user is invited to.
     * 
     * @return groups
     */
    public List<String> getGroups() {
        return groups;
    }

    /**
     * Sets a list of ids of the groups the user is invited to.
     * 
     * @param groups
     *            A list of IDs of the groups the user is invited to.
     */
    public void setGroups(List<String> groups) {
        this.groups = groups;
    }

    /**
     * Gets the uuid of the invitation.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets the uuid of the invitation.
     * 
     * @param id
     *            The UUID of the invitation.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets the uuid of the invitation.
     * <p>
     * Similar to {@link #setId(String)}
     * 
     * @param userInvitationId
     *            The UUID of the invitation.
     */
    @Internal
    public void setUserInvitationId(String userInvitationId) {
        setId(userInvitationId);
    }

    /**
     * Gets last update utc time rfc3339.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets last update utc time rfc3339.
     * 
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Gets the uuid of the invited user.
     * 
     * @return userId
     */
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the uuid of the invited user.
     * 
     * @param userId
     *            The UUID of the invited user.
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((accountId == null) ? 0 : accountId.hashCode());
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + ((email == null) ? 0 : email.hashCode());
        result = prime * result + ((expiration == null) ? 0 : expiration.hashCode());
        result = prime * result + ((groups == null) ? 0 : groups.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        result = prime * result + ((userId == null) ? 0 : userId.hashCode());
        return result;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!getClass().isAssignableFrom(obj.getClass())) {
            return false;
        }
        final UserInvitation other = (UserInvitation) obj;
        if (accountId == null) {
            if (other.accountId != null) {
                return false;
            }
        } else if (!accountId.equals(other.accountId)) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (email == null) {
            if (other.email != null) {
                return false;
            }
        } else if (!email.equals(other.email)) {
            return false;
        }
        if (expiration == null) {
            if (other.expiration != null) {
                return false;
            }
        } else if (!expiration.equals(other.expiration)) {
            return false;
        }
        if (groups == null) {
            if (other.groups != null) {
                return false;
            }
        } else if (!groups.equals(other.groups)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        if (userId == null) {
            if (other.userId != null) {
                return false;
            }
        } else if (!userId.equals(other.userId)) {
            return false;
        }
        return true;
    }

    /**
     * Returns a string representation of the object.
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "UserInvitation [accountId=" + accountId + ", createdAt=" + createdAt + ", email=" + email
               + ", expiration=" + expiration + ", groups=" + groups + ", id=" + id + ", updatedAt=" + updatedAt
               + ", userId=" + userId + "]";
    }

    /**
     * Checks whether the model is valid or not.
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public UserInvitation clone() {
        return new UserInvitation(this);
    }
}
