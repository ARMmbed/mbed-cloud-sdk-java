// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.annotations.Required;
import com.arm.mbed.cloud.sdk.common.SdkEnum;

/**
 * Subtenant identity provider algorithm.
 */
@Preamble(description = "Subtenant identity provider algorithm.")
public enum SubtenantIdentityProviderAlgorithm implements SdkEnum {
    EC224("EC224"),

    EC256("EC256"),

    EC384("EC384"),

    EC521("EC521"),

    ECDSA224("ECDSA224"),

    ECDSA256("ECDSA256"),

    ECDSA384("ECDSA384"),

    ECDSA521("ECDSA521"),

    RSA2048("RSA2048"),

    RSA3072("RSA3072"),

    UNKNOWN_ENUM(SDK_UNKNOWN_ENUM_VALUE);

    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1506703214192122L;

    /**
     * string representation.
     */
    @Internal
    @Required
    @DefaultValue("EC224")
    private final String string;

    /**
     * Internal constructor.
     * 
     * @param string
     *            string representation.
     */
    @Internal
    SubtenantIdentityProviderAlgorithm(@DefaultValue("EC224") String string) {
        this.string = string;
    }

    /**
     * Gets string representation.
     * 
     * @return string
     */
    @Override
    @Internal
    public String getString() {
        return string;
    }

    /**
     * toString.
     * 
     * <p>
     * 
     * @see java.lang.Enum#toString()
     * @return the string representation of this value
     */
    @Override
    public String toString() {
        return getString();
    }

    /**
     * States whether it is the default value.
     * 
     * <p>
     * 
     * @see SdkEnum#isDefault()
     * @return true if this is the default value; false otherwise
     */
    @Override
    public boolean isDefault() {
        return this == getDefault();
    }

    /**
     * States whether the value is unknown and an error happened during parsing.
     * 
     * <p>
     * 
     * @see SdkEnum#isUnknownValue()
     * @return true if this is an unknown value; false otherwise
     */
    @Override
    public boolean isUnknownValue() {
        return this == getUnknownEnum();
    }

    /**
     * Gets default subtenant identity provider algorithm.
     * 
     * @return default subtenant identity provider algorithm
     */
    public static SubtenantIdentityProviderAlgorithm getDefault() {
        return EC224;
    }

    /**
     * Gets unknown subtenant identity provider algorithm value.
     * 
     * @return unknown subtenant identity provider algorithm
     */
    public static SubtenantIdentityProviderAlgorithm getUnknownEnum() {
        return UNKNOWN_ENUM;
    }

    /**
     * Gets subtenant identity provider algorithm from its string representation.
     * 
     * @param value
     *            string.
     * @return corresponding subtenant identity provider algorithm or default subtenant identity provider algorithm if
     *         not recognised.
     */
    public static SubtenantIdentityProviderAlgorithm getValue(String value) {
        if (value == null) {
            return getDefault();
        }
        final String trimmedValue = value.trim();
        for (final SubtenantIdentityProviderAlgorithm option : values()) {
            if (option.getString().equalsIgnoreCase(trimmedValue)) {
                return option;
            }
        }
        return getDefault();
    }

    /**
     * Merges two states.
     * 
     * <p>
     * 
     * @see SdkEnum#merge(SdkEnum, SdkEnum)
     * @param <T>
     *            type of an sdk enum
     * @param obj1
     *            a subtenant identity provider algorithm.
     * @param obj2
     *            a subtenant identity provider algorithm.
     * @return the merged enumerator
     */
    @Override
    public <T extends SdkEnum> T merge(T obj1, T obj2) {
        if (obj1 == null) {
            return obj2;
        }
        if (obj2 == null) {
            return obj1;
        }
        if (obj1.isDefault()) {
            return obj2;
        }
        if (obj2.isDefault()) {
            return obj1;
        }
        return obj2;
    }
}
