// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.PerformsNoOperation;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.Base64;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.List;

/**
 * Model for a saml2 request.
 */
@Preamble(description = "Model for a saml2 request.")
public class Saml2Request implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1950870594191131L;

    /**
     * Contains an entity descriptor document for the identity provider. Can be used as an alternative method to provide
     * the identity provider's attributes.
     */
    private final Base64 entityDescriptor;

    /**
     * Entity ID of the identity provider.
     */
    private final String idpEntityId;

    /**
     * List of public X509 certificates of the identity provider. Certificates must be in PEM format.
     */
    private final List<String> idpX509Certs;

    /**
     * URL of the identity provider's SLO endpoint.
     */
    private final String sloEndpoint;

    /**
     * Entity ID of the service provider. We recommend that you leave it empty and let the system generate it.
     */
    private final String spEntityId;

    /**
     * URL of the identity provider's SSO endpoint.
     */
    private final String ssoEndpoint;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #Saml2Request()} instead.
     * 
     * @param entityDescriptor
     *            Contains an entity descriptor document for the identity provider. Can be used as an alternative method
     *            to provide the identity provider's attributes.
     * @param idpEntityId
     *            Entity ID of the identity provider.
     * @param idpX509Certs
     *            List of public X509 certificates of the identity provider. Certificates must be in PEM format.
     * @param sloEndpoint
     *            URL of the identity provider's SLO endpoint.
     * @param spEntityId
     *            Entity ID of the service provider. We recommend that you leave it empty and let the system generate
     *            it.
     * @param ssoEndpoint
     *            URL of the identity provider's SSO endpoint.
     */
    @Internal
    public Saml2Request(Base64 entityDescriptor, String idpEntityId, List<String> idpX509Certs, String sloEndpoint,
                        String spEntityId, String ssoEndpoint) {
        super();
        this.entityDescriptor = entityDescriptor;
        this.idpEntityId = idpEntityId;
        this.idpX509Certs = idpX509Certs;
        this.sloEndpoint = sloEndpoint;
        this.spEntityId = spEntityId;
        this.ssoEndpoint = ssoEndpoint;
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #Saml2Request()} instead.
     * 
     * @param saml2Request
     *            a saml2 request.
     */
    @Internal
    public Saml2Request(Saml2Request saml2Request) {
        this(saml2Request == null ? (Base64) null : saml2Request.entityDescriptor,
             saml2Request == null ? (String) null : saml2Request.idpEntityId,
             saml2Request == null ? (List<String>) null : saml2Request.idpX509Certs,
             saml2Request == null ? (String) null : saml2Request.sloEndpoint,
             saml2Request == null ? (String) null : saml2Request.spEntityId,
             saml2Request == null ? (String) null : saml2Request.ssoEndpoint);
    }

    /**
     * Constructor.
     */
    public Saml2Request() {
        this((Base64) null, (String) null, (List<String>) null, (String) null, (String) null, (String) null);
    }

    /**
     * Sets id.
     * 
     * @param id
     *            id.
     */
    @Override
    @Internal
    @PerformsNoOperation
    public void setId(String id) {
        // Nothing to do
    }

    /**
     * Gets id.
     * 
     * <p>
     * Warning: Saml2Request model does not have any ID field. This always returns {@code null}.
     * 
     * @return id
     */
    @Override
    @Internal
    public String getId() {
        return null;
    }

    /**
     * Gets contains an entity descriptor document for the identity provider. can be used as an alternative method to
     * provide the identity provider's attributes.
     * 
     * @return entityDescriptor
     */
    public Base64 getEntityDescriptor() {
        return entityDescriptor;
    }

    /**
     * Gets entity id of the identity provider.
     * 
     * @return idpEntityId
     */
    public String getIdpEntityId() {
        return idpEntityId;
    }

    /**
     * Gets list of public x509 certificates of the identity provider. certificates must be in pem format.
     * 
     * @return idpX509Certs
     */
    public List<String> getIdpX509Certs() {
        return idpX509Certs;
    }

    /**
     * Gets url of the identity provider's slo endpoint.
     * 
     * @return sloEndpoint
     */
    public String getSloEndpoint() {
        return sloEndpoint;
    }

    /**
     * Gets entity id of the service provider. we recommend that you leave it empty and let the system generate it.
     * 
     * @return spEntityId
     */
    public String getSpEntityId() {
        return spEntityId;
    }

    /**
     * Gets url of the identity provider's sso endpoint.
     * 
     * @return ssoEndpoint
     */
    public String getSsoEndpoint() {
        return ssoEndpoint;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "Saml2Request [entityDescriptor=" + entityDescriptor + ", idpEntityId=" + idpEntityId + ", idpX509Certs="
               + idpX509Certs + ", sloEndpoint=" + sloEndpoint + ", spEntityId=" + spEntityId + ", ssoEndpoint="
               + ssoEndpoint + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((entityDescriptor == null) ? 0 : entityDescriptor.hashCode());
        result = prime * result + ((idpEntityId == null) ? 0 : idpEntityId.hashCode());
        result = prime * result + ((idpX509Certs == null) ? 0 : idpX509Certs.hashCode());
        result = prime * result + ((sloEndpoint == null) ? 0 : sloEndpoint.hashCode());
        result = prime * result + ((spEntityId == null) ? 0 : spEntityId.hashCode());
        result = prime * result + ((ssoEndpoint == null) ? 0 : ssoEndpoint.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof Saml2Request;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Saml2Request)) {
            return false;
        }
        final Saml2Request other = (Saml2Request) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (entityDescriptor == null) {
            if (other.entityDescriptor != null) {
                return false;
            }
        } else if (!entityDescriptor.equals(other.entityDescriptor)) {
            return false;
        }
        if (idpEntityId == null) {
            if (other.idpEntityId != null) {
                return false;
            }
        } else if (!idpEntityId.equals(other.idpEntityId)) {
            return false;
        }
        if (idpX509Certs == null) {
            if (other.idpX509Certs != null) {
                return false;
            }
        } else if (!idpX509Certs.equals(other.idpX509Certs)) {
            return false;
        }
        if (sloEndpoint == null) {
            if (other.sloEndpoint != null) {
                return false;
            }
        } else if (!sloEndpoint.equals(other.sloEndpoint)) {
            return false;
        }
        if (spEntityId == null) {
            if (other.spEntityId != null) {
                return false;
            }
        } else if (!spEntityId.equals(other.spEntityId)) {
            return false;
        }
        if (ssoEndpoint == null) {
            if (other.ssoEndpoint != null) {
                return false;
            }
        } else if (!ssoEndpoint.equals(other.ssoEndpoint)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Saml2Request clone() {
        return new Saml2Request(this);
    }
}
