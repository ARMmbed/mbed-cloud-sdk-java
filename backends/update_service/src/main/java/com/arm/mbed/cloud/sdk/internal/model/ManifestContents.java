/*
 * Update Service API
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.arm.mbed.cloud.sdk.internal.model;

import java.util.Objects;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsConditions;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsDigestAlgorithm;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsDirectives;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsPayloadInfo;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsPayloadInfoPayloadReference;
import com.arm.mbed.cloud.sdk.internal.model.ManifestContentsText;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * ManifestContents
 */

public class ManifestContents implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("nonce")
  private String nonce = null;

  @SerializedName("payloadInfo")
  private ManifestContentsPayloadInfo payloadInfo = null;

  @SerializedName("manifestVersion")
  private String manifestVersion = null;

  @SerializedName("digestAlgorithm")
  private ManifestContentsDigestAlgorithm digestAlgorithm = null;

  @SerializedName("text")
  private List<ManifestContentsText> text = new ArrayList<ManifestContentsText>();

  @SerializedName("directives")
  private List<ManifestContentsDirectives> directives = new ArrayList<ManifestContentsDirectives>();

  @SerializedName("timestamp")
  private Integer timestamp = null;

  @SerializedName("dependenices")
  private List<ManifestContentsPayloadInfoPayloadReference> dependenices = new ArrayList<ManifestContentsPayloadInfoPayloadReference>();

  @SerializedName("conditions")
  private List<ManifestContentsConditions> conditions = new ArrayList<ManifestContentsConditions>();

  @SerializedName("aliases")
  private List<ManifestContentsPayloadInfoPayloadReference> aliases = new ArrayList<ManifestContentsPayloadInfoPayloadReference>();

  public ManifestContents nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * A 128-bit random field
   * @return nonce
  **/
  @ApiModelProperty(example = "null", value = "A 128-bit random field")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public ManifestContents payloadInfo(ManifestContentsPayloadInfo payloadInfo) {
    this.payloadInfo = payloadInfo;
    return this;
  }

   /**
   * Get payloadInfo
   * @return payloadInfo
  **/
  @ApiModelProperty(example = "null", value = "")
  public ManifestContentsPayloadInfo getPayloadInfo() {
    return payloadInfo;
  }

  public void setPayloadInfo(ManifestContentsPayloadInfo payloadInfo) {
    this.payloadInfo = payloadInfo;
  }

  public ManifestContents manifestVersion(String manifestVersion) {
    this.manifestVersion = manifestVersion;
    return this;
  }

   /**
   * The version of the manifest format being used.
   * @return manifestVersion
  **/
  @ApiModelProperty(example = "null", value = "The version of the manifest format being used.")
  public String getManifestVersion() {
    return manifestVersion;
  }

  public void setManifestVersion(String manifestVersion) {
    this.manifestVersion = manifestVersion;
  }

  public ManifestContents digestAlgorithm(ManifestContentsDigestAlgorithm digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

   /**
   * Get digestAlgorithm
   * @return digestAlgorithm
  **/
  @ApiModelProperty(example = "null", value = "")
  public ManifestContentsDigestAlgorithm getDigestAlgorithm() {
    return digestAlgorithm;
  }

  public void setDigestAlgorithm(ManifestContentsDigestAlgorithm digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }

  public ManifestContents text(List<ManifestContentsText> text) {
    this.text = text;
    return this;
  }

  public ManifestContents addTextItem(ManifestContentsText textItem) {
    this.text.add(textItem);
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ManifestContentsText> getText() {
    return text;
  }

  public void setText(List<ManifestContentsText> text) {
    this.text = text;
  }

  public ManifestContents directives(List<ManifestContentsDirectives> directives) {
    this.directives = directives;
    return this;
  }

  public ManifestContents addDirectivesItem(ManifestContentsDirectives directivesItem) {
    this.directives.add(directivesItem);
    return this;
  }

   /**
   * Get directives
   * @return directives
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ManifestContentsDirectives> getDirectives() {
    return directives;
  }

  public void setDirectives(List<ManifestContentsDirectives> directives) {
    this.directives = directives;
  }

  public ManifestContents timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The time the manifest was created. The timestamp is stored as Unix time.
   * @return timestamp
  **/
  @ApiModelProperty(example = "null", value = "The time the manifest was created. The timestamp is stored as Unix time.")
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }

  public ManifestContents dependenices(List<ManifestContentsPayloadInfoPayloadReference> dependenices) {
    this.dependenices = dependenices;
    return this;
  }

  public ManifestContents addDependenicesItem(ManifestContentsPayloadInfoPayloadReference dependenicesItem) {
    this.dependenices.add(dependenicesItem);
    return this;
  }

   /**
   * Get dependenices
   * @return dependenices
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ManifestContentsPayloadInfoPayloadReference> getDependenices() {
    return dependenices;
  }

  public void setDependenices(List<ManifestContentsPayloadInfoPayloadReference> dependenices) {
    this.dependenices = dependenices;
  }

  public ManifestContents conditions(List<ManifestContentsConditions> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ManifestContents addConditionsItem(ManifestContentsConditions conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ManifestContentsConditions> getConditions() {
    return conditions;
  }

  public void setConditions(List<ManifestContentsConditions> conditions) {
    this.conditions = conditions;
  }

  public ManifestContents aliases(List<ManifestContentsPayloadInfoPayloadReference> aliases) {
    this.aliases = aliases;
    return this;
  }

  public ManifestContents addAliasesItem(ManifestContentsPayloadInfoPayloadReference aliasesItem) {
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ManifestContentsPayloadInfoPayloadReference> getAliases() {
    return aliases;
  }

  public void setAliases(List<ManifestContentsPayloadInfoPayloadReference> aliases) {
    this.aliases = aliases;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManifestContents manifestContents = (ManifestContents) o;
    return Objects.equals(this.nonce, manifestContents.nonce) &&
        Objects.equals(this.payloadInfo, manifestContents.payloadInfo) &&
        Objects.equals(this.manifestVersion, manifestContents.manifestVersion) &&
        Objects.equals(this.digestAlgorithm, manifestContents.digestAlgorithm) &&
        Objects.equals(this.text, manifestContents.text) &&
        Objects.equals(this.directives, manifestContents.directives) &&
        Objects.equals(this.timestamp, manifestContents.timestamp) &&
        Objects.equals(this.dependenices, manifestContents.dependenices) &&
        Objects.equals(this.conditions, manifestContents.conditions) &&
        Objects.equals(this.aliases, manifestContents.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonce, payloadInfo, manifestVersion, digestAlgorithm, text, directives, timestamp, dependenices, conditions, aliases);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManifestContents {\n");
    
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    payloadInfo: ").append(toIndentedString(payloadInfo)).append("\n");
    sb.append("    manifestVersion: ").append(toIndentedString(manifestVersion)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    directives: ").append(toIndentedString(directives)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    dependenices: ").append(toIndentedString(dependenices)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

