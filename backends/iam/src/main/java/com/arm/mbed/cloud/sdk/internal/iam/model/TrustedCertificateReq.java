/*
 * Account Management API
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.arm.mbed.cloud.sdk.internal.iam.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;

/**
 * This object represents a trusted certificate in requests.
 */
@ApiModel(description = "This object represents a trusted certificate in requests.")

public class TrustedCertificateReq implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Status of the certificate.
   */
  public enum StatusEnum {
    @SerializedName("ACTIVE")
    ACTIVE("ACTIVE"),
    
    @SerializedName("INACTIVE")
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Service name where the certificate must be used.
   */
  public enum ServiceEnum {
    @SerializedName("lwm2m")
    LWM2M("lwm2m"),
    
    @SerializedName("bootstrap")
    BOOTSTRAP("bootstrap");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("service")
  private ServiceEnum service = null;

  @SerializedName("signature")
  private String signature = null;

  @SerializedName("description")
  private String description = null;

  public TrustedCertificateReq status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the certificate.
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "Status of the certificate.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public TrustedCertificateReq certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * X509.v3 trusted certificate in PEM format.
   * @return certificate
  **/
  @ApiModelProperty(example = "null", required = true, value = "X509.v3 trusted certificate in PEM format.")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public TrustedCertificateReq name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Certificate name, not longer than 100 characters.
   * @return name
  **/
  @ApiModelProperty(example = "null", required = true, value = "Certificate name, not longer than 100 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TrustedCertificateReq service(ServiceEnum service) {
    this.service = service;
    return this;
  }

   /**
   * Service name where the certificate must be used.
   * @return service
  **/
  @ApiModelProperty(example = "null", required = true, value = "Service name where the certificate must be used.")
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }

  public TrustedCertificateReq signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256.
   * @return signature
  **/
  @ApiModelProperty(example = "null", required = true, value = "Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256.")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public TrustedCertificateReq description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Human readable description of this certificate, not longer than 500 characters.
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "Human readable description of this certificate, not longer than 500 characters.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrustedCertificateReq trustedCertificateReq = (TrustedCertificateReq) o;
    return Objects.equals(this.status, trustedCertificateReq.status) &&
        Objects.equals(this.certificate, trustedCertificateReq.certificate) &&
        Objects.equals(this.name, trustedCertificateReq.name) &&
        Objects.equals(this.service, trustedCertificateReq.service) &&
        Objects.equals(this.signature, trustedCertificateReq.signature) &&
        Objects.equals(this.description, trustedCertificateReq.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, certificate, name, service, signature, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrustedCertificateReq {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

