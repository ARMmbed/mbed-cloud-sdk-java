/*
 * Connect Statistics API
 * mbed Cloud Connect Statistics API provides statistics about other cloud services through defined counters.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.arm.mbed.cloud.sdk.internal.statistics.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;
import java.io.Serializable;

/**
 * Metric
 */

public class Metric implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("device_server_rest_api_error")
  private Long deviceServerRestApiError = null;

  @SerializedName("registration_updates")
  private Long registrationUpdates = null;

  @SerializedName("full_registrations")
  private Long fullRegistrations = null;

  @SerializedName("bootstraps_failed")
  private Long bootstrapsFailed = null;

  @SerializedName("transactions")
  private Long transactions = null;

  @SerializedName("timestamp")
  private DateTime timestamp = null;

  @SerializedName("device_server_rest_api_success")
  private Long deviceServerRestApiSuccess = null;

  @SerializedName("bootstraps_pending")
  private Long bootstrapsPending = null;

  @SerializedName("expired_registrations")
  private Long expiredRegistrations = null;

  @SerializedName("handshakes_successful")
  private Long handshakesSuccessful = null;

  @SerializedName("bootstraps_successful")
  private Long bootstrapsSuccessful = null;

  @SerializedName("deleted_registrations")
  private Long deletedRegistrations = null;

  @SerializedName("id")
  private String id = null;

  public Metric deviceServerRestApiError(Long deviceServerRestApiError) {
    this.deviceServerRestApiError = deviceServerRestApiError;
    return this;
  }

   /**
   * The number of failed [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.
   * @return deviceServerRestApiError
  **/
  @ApiModelProperty(example = "null", value = "The number of failed [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.")
  public Long getDeviceServerRestApiError() {
    return deviceServerRestApiError;
  }

  public void setDeviceServerRestApiError(Long deviceServerRestApiError) {
    this.deviceServerRestApiError = deviceServerRestApiError;
  }

  public Metric registrationUpdates(Long registrationUpdates) {
    this.registrationUpdates = registrationUpdates;
    return this;
  }

   /**
   * The number of registration updates linked to the account. Registration update is the process of updating the registration status with the Mbed Cloud Connect to update or extend the lifetime of the device.
   * @return registrationUpdates
  **/
  @ApiModelProperty(example = "null", value = "The number of registration updates linked to the account. Registration update is the process of updating the registration status with the Mbed Cloud Connect to update or extend the lifetime of the device.")
  public Long getRegistrationUpdates() {
    return registrationUpdates;
  }

  public void setRegistrationUpdates(Long registrationUpdates) {
    this.registrationUpdates = registrationUpdates;
  }

  public Metric fullRegistrations(Long fullRegistrations) {
    this.fullRegistrations = fullRegistrations;
    return this;
  }

   /**
   * The number of full registrations linked to the account. Full registration is the process of registering a device with the Mbed Cloud Connect by providing its lifetime and capabilities such as the resource structure.The registered status of the device does not guarantee that the device is active and accessible from Mebd Cloud Connect at any point of time.
   * @return fullRegistrations
  **/
  @ApiModelProperty(example = "null", value = "The number of full registrations linked to the account. Full registration is the process of registering a device with the Mbed Cloud Connect by providing its lifetime and capabilities such as the resource structure.The registered status of the device does not guarantee that the device is active and accessible from Mebd Cloud Connect at any point of time.")
  public Long getFullRegistrations() {
    return fullRegistrations;
  }

  public void setFullRegistrations(Long fullRegistrations) {
    this.fullRegistrations = fullRegistrations;
  }

  public Metric bootstrapsFailed(Long bootstrapsFailed) {
    this.bootstrapsFailed = bootstrapsFailed;
    return this;
  }

   /**
   * The number of failed bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.
   * @return bootstrapsFailed
  **/
  @ApiModelProperty(example = "null", value = "The number of failed bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.")
  public Long getBootstrapsFailed() {
    return bootstrapsFailed;
  }

  public void setBootstrapsFailed(Long bootstrapsFailed) {
    this.bootstrapsFailed = bootstrapsFailed;
  }

  public Metric transactions(Long transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * The number of transaction events from or to devices linked to the account. A transaction is a 512-byte block of data processed by mbed Cloud. It can be either sent by the device (device --> mbed cloud) or received by the device (mbed cloud --> device). A transaction does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains the packet payload (full CoAP packet including CoAP headers).
   * @return transactions
  **/
  @ApiModelProperty(example = "null", value = "The number of transaction events from or to devices linked to the account. A transaction is a 512-byte block of data processed by mbed Cloud. It can be either sent by the device (device --> mbed cloud) or received by the device (mbed cloud --> device). A transaction does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains the packet payload (full CoAP packet including CoAP headers).")
  public Long getTransactions() {
    return transactions;
  }

  public void setTransactions(Long transactions) {
    this.transactions = transactions;
  }

  public Metric timestamp(DateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * UTC time in RFC3339 format. The timestamp is the starting point of the interval for which the data is aggregated. Each interval includes data for the time greater than or equal to the timestamp and less than the next interval's starting point.
   * @return timestamp
  **/
  @ApiModelProperty(example = "null", value = "UTC time in RFC3339 format. The timestamp is the starting point of the interval for which the data is aggregated. Each interval includes data for the time greater than or equal to the timestamp and less than the next interval's starting point.")
  public DateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(DateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Metric deviceServerRestApiSuccess(Long deviceServerRestApiSuccess) {
    this.deviceServerRestApiSuccess = deviceServerRestApiSuccess;
    return this;
  }

   /**
   * The number of successful [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.
   * @return deviceServerRestApiSuccess
  **/
  @ApiModelProperty(example = "null", value = "The number of successful [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.")
  public Long getDeviceServerRestApiSuccess() {
    return deviceServerRestApiSuccess;
  }

  public void setDeviceServerRestApiSuccess(Long deviceServerRestApiSuccess) {
    this.deviceServerRestApiSuccess = deviceServerRestApiSuccess;
  }

  public Metric bootstrapsPending(Long bootstrapsPending) {
    this.bootstrapsPending = bootstrapsPending;
    return this;
  }

   /**
   * The number of pending bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.
   * @return bootstrapsPending
  **/
  @ApiModelProperty(example = "null", value = "The number of pending bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.")
  public Long getBootstrapsPending() {
    return bootstrapsPending;
  }

  public void setBootstrapsPending(Long bootstrapsPending) {
    this.bootstrapsPending = bootstrapsPending;
  }

  public Metric expiredRegistrations(Long expiredRegistrations) {
    this.expiredRegistrations = expiredRegistrations;
    return this;
  }

   /**
   * The number of expired registrations linked to the account. Mbed Cloud Connect removes the device registrations when the devices cannot update their registration before the expiry of the lifetime. Mbed Cloud Connect no longer handles requests for a device whose registration has expired already.
   * @return expiredRegistrations
  **/
  @ApiModelProperty(example = "null", value = "The number of expired registrations linked to the account. Mbed Cloud Connect removes the device registrations when the devices cannot update their registration before the expiry of the lifetime. Mbed Cloud Connect no longer handles requests for a device whose registration has expired already.")
  public Long getExpiredRegistrations() {
    return expiredRegistrations;
  }

  public void setExpiredRegistrations(Long expiredRegistrations) {
    this.expiredRegistrations = expiredRegistrations;
  }

  public Metric handshakesSuccessful(Long handshakesSuccessful) {
    this.handshakesSuccessful = handshakesSuccessful;
    return this;
  }

   /**
   * The number of successful TLS handshakes the account has performed. The SSL or TLS handshake enables the SSL or TLS client and server to establish the secret keys with which they communicate. A successful TLS handshake is required for establishing a connection with Mbed Cloud Connect for any operaton such as registration, registration update and deregistration.
   * @return handshakesSuccessful
  **/
  @ApiModelProperty(example = "null", value = "The number of successful TLS handshakes the account has performed. The SSL or TLS handshake enables the SSL or TLS client and server to establish the secret keys with which they communicate. A successful TLS handshake is required for establishing a connection with Mbed Cloud Connect for any operaton such as registration, registration update and deregistration.")
  public Long getHandshakesSuccessful() {
    return handshakesSuccessful;
  }

  public void setHandshakesSuccessful(Long handshakesSuccessful) {
    this.handshakesSuccessful = handshakesSuccessful;
  }

  public Metric bootstrapsSuccessful(Long bootstrapsSuccessful) {
    this.bootstrapsSuccessful = bootstrapsSuccessful;
    return this;
  }

   /**
   * The number of successful bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.
   * @return bootstrapsSuccessful
  **/
  @ApiModelProperty(example = "null", value = "The number of successful bootstraps the account has performed. Bootstrap is the process of provisioning a Lightweight Machine to Machine Client to a state where it can initiate a management session to a new Lightweight Machine to Machine Server.")
  public Long getBootstrapsSuccessful() {
    return bootstrapsSuccessful;
  }

  public void setBootstrapsSuccessful(Long bootstrapsSuccessful) {
    this.bootstrapsSuccessful = bootstrapsSuccessful;
  }

  public Metric deletedRegistrations(Long deletedRegistrations) {
    this.deletedRegistrations = deletedRegistrations;
    return this;
  }

   /**
   * The number of deleted registrations (deregistrations) linked to the account. Deregistration is the process of removing the device registration from the Mbed Cloud Connect registry. The deregistration is usually initiated by the device. Mbed Cloud Connect no longer handles requests for a deregistered device.
   * @return deletedRegistrations
  **/
  @ApiModelProperty(example = "null", value = "The number of deleted registrations (deregistrations) linked to the account. Deregistration is the process of removing the device registration from the Mbed Cloud Connect registry. The deregistration is usually initiated by the device. Mbed Cloud Connect no longer handles requests for a deregistered device.")
  public Long getDeletedRegistrations() {
    return deletedRegistrations;
  }

  public void setDeletedRegistrations(Long deletedRegistrations) {
    this.deletedRegistrations = deletedRegistrations;
  }

  public Metric id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique metric ID.
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "A unique metric ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.deviceServerRestApiError, metric.deviceServerRestApiError) &&
        Objects.equals(this.registrationUpdates, metric.registrationUpdates) &&
        Objects.equals(this.fullRegistrations, metric.fullRegistrations) &&
        Objects.equals(this.bootstrapsFailed, metric.bootstrapsFailed) &&
        Objects.equals(this.transactions, metric.transactions) &&
        Objects.equals(this.timestamp, metric.timestamp) &&
        Objects.equals(this.deviceServerRestApiSuccess, metric.deviceServerRestApiSuccess) &&
        Objects.equals(this.bootstrapsPending, metric.bootstrapsPending) &&
        Objects.equals(this.expiredRegistrations, metric.expiredRegistrations) &&
        Objects.equals(this.handshakesSuccessful, metric.handshakesSuccessful) &&
        Objects.equals(this.bootstrapsSuccessful, metric.bootstrapsSuccessful) &&
        Objects.equals(this.deletedRegistrations, metric.deletedRegistrations) &&
        Objects.equals(this.id, metric.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceServerRestApiError, registrationUpdates, fullRegistrations, bootstrapsFailed, transactions, timestamp, deviceServerRestApiSuccess, bootstrapsPending, expiredRegistrations, handshakesSuccessful, bootstrapsSuccessful, deletedRegistrations, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    
    sb.append("    deviceServerRestApiError: ").append(toIndentedString(deviceServerRestApiError)).append("\n");
    sb.append("    registrationUpdates: ").append(toIndentedString(registrationUpdates)).append("\n");
    sb.append("    fullRegistrations: ").append(toIndentedString(fullRegistrations)).append("\n");
    sb.append("    bootstrapsFailed: ").append(toIndentedString(bootstrapsFailed)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    deviceServerRestApiSuccess: ").append(toIndentedString(deviceServerRestApiSuccess)).append("\n");
    sb.append("    bootstrapsPending: ").append(toIndentedString(bootstrapsPending)).append("\n");
    sb.append("    expiredRegistrations: ").append(toIndentedString(expiredRegistrations)).append("\n");
    sb.append("    handshakesSuccessful: ").append(toIndentedString(handshakesSuccessful)).append("\n");
    sb.append("    bootstrapsSuccessful: ").append(toIndentedString(bootstrapsSuccessful)).append("\n");
    sb.append("    deletedRegistrations: ").append(toIndentedString(deletedRegistrations)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

