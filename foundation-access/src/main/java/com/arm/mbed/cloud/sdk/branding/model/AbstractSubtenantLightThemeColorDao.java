// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [SubtenantLightThemeColorDao]
package com.arm.mbed.cloud.sdk.branding.model;

import com.arm.mbed.cloud.sdk.Branding;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.DeleteDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;
import com.arm.mbed.cloud.sdk.common.dao.UpdateDao;

/**
 * Data Access Object (DAO) for subtenant light theme colors.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for subtenant light theme colors.")
public abstract class AbstractSubtenantLightThemeColorDao extends AbstractModelDao<SubtenantLightThemeColor>
                                                          implements UpdateDao<SubtenantLightThemeColor>,
                                                          DeleteDao<SubtenantLightThemeColor>,
                                                          ReadDao<SubtenantLightThemeColor> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantLightThemeColorDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantLightThemeColorDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantLightThemeColorDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantLightThemeColorDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Deletes a subtenant light theme color.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorDao#delete(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String accountId) throws MbedCloudException {
        delete(accountId, getModel());
    }

    /**
     * Deletes a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#deleteSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void delete(@NonNull String accountId,
                       @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        ((Branding) getModuleOrThrow()).deleteSubtenantLightThemeColor(accountId, subtenantLightThemeColor);
    }

    /**
     * Deletes a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#deleteSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference)}
     * 
     * @param accountId
     *            Account ID.
     * @param reference
     *            The name of the branding color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void delete(@NonNull String accountId,
                       @NonNull SubtenantLightThemeColorReference reference) throws MbedCloudException {
        ((Branding) getModuleOrThrow()).deleteSubtenantLightThemeColor(accountId, reference);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected SubtenantLightThemeColor instantiateModel() {
        return new SubtenantLightThemeColor();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Branding(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Branding(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Branding(context);
    }

    /**
     * Gets a subtenant light theme color.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorDao#read(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantLightThemeColor read(@NonNull String accountId) throws MbedCloudException {
        return read(accountId, getModel());
    }

    /**
     * Gets a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#readSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor
           read(@NonNull String accountId,
                @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        return setAndGetModel(((Branding) getModuleOrThrow()).readSubtenantLightThemeColor(accountId,
                                                                                           subtenantLightThemeColor));
    }

    /**
     * Gets a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#readSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference)}
     * 
     * @param accountId
     *            Account ID.
     * @param reference
     *            Color name.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor
           read(@NonNull String accountId,
                @NonNull SubtenantLightThemeColorReference reference) throws MbedCloudException {
        return setAndGetModel(((Branding) getModuleOrThrow()).readSubtenantLightThemeColor(accountId, reference));
    }

    /**
     * Modifies a subtenant light theme color.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorDao#update(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor update(@NonNull String accountId) throws MbedCloudException {
        return update(accountId, getModel());
    }

    /**
     * Modifies a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#updateSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor
           update(@NonNull String accountId,
                  @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        return setAndGetModel(((Branding) getModuleOrThrow()).updateSubtenantLightThemeColor(accountId,
                                                                                             subtenantLightThemeColor));
    }

    /**
     * Modifies a subtenant light theme color.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorDao#update(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @param reference
     *            Color name.
     * @return an updated subtenant light theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor
           update(@NonNull String accountId,
                  @NonNull SubtenantLightThemeColorReference reference) throws MbedCloudException {
        return update(accountId, reference, getModel());
    }

    /**
     * Modifies a subtenant light theme color.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Branding#updateSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            Account ID.
     * @param reference
     *            Color name.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return an updated subtenant light theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantLightThemeColor
           update(@NonNull String accountId, @NonNull SubtenantLightThemeColorReference reference,
                  @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        return setAndGetModel(((Branding) getModuleOrThrow()).updateSubtenantLightThemeColor(accountId, reference,
                                                                                             subtenantLightThemeColor));
    }
}
