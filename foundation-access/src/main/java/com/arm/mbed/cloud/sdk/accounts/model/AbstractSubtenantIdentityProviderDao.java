// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [SubtenantIdentityProviderDao]
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for subtenant identity providers.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for subtenant identity providers.")
public abstract class AbstractSubtenantIdentityProviderDao extends AbstractModelDao<SubtenantIdentityProvider>
                                                           implements CrudDao<SubtenantIdentityProvider> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantIdentityProviderDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantIdentityProviderDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantIdentityProviderDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantIdentityProviderDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#create(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantIdentityProvider create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantIdentityProvider
           create(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantIdentityProvider(subtenantIdentityProvider));
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#create(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @return an added subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider create(@NonNull String accountId) throws MbedCloudException {
        return create(accountId, getModel());
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantIdentityProvider(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return an added subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           create(@NonNull String accountId,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantIdentityProvider(accountId,
                                                                                              subtenantIdentityProvider));
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#create(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider create(@Nullable boolean discovery,
                                            @Nullable OidcRequest oidcAttributes) throws MbedCloudException {
        return create(discovery, oidcAttributes, getModel());
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#create(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @return an added subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider create(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes,
                                            @NonNull String accountId) throws MbedCloudException {
        return create(discovery, oidcAttributes, accountId, getModel());
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return an added subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           create(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes, @NonNull String accountId,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantIdentityProvider(discovery, oidcAttributes,
                                                                                              accountId,
                                                                                              subtenantIdentityProvider));
    }

    /**
     * Adds a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           create(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantIdentityProvider(discovery, oidcAttributes,
                                                                                              subtenantIdentityProvider));
    }

    /**
     * Deletes a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#delete(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantIdentityProvider(subtenantIdentityProvider);
    }

    /**
     * Deletes a subtenant identity provider.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantIdentityProvider(String, String)}
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the identity provider to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void delete(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantIdentityProvider(accountId, id);
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#deleteServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider deleteServiceProviderCertificate() throws MbedCloudException {
        return deleteServiceProviderCertificate(getModel());
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           deleteServiceProviderCertificate(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).deleteServiceProviderCertificate(subtenantIdentityProvider));
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteServiceProviderCertificate(String, String)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider deleteServiceProviderCertificate(@NonNull String accountId,
                                                                      @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).deleteServiceProviderCertificate(accountId, id));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider generateServiceProviderCertificate() throws MbedCloudException {
        return generateServiceProviderCertificate(getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(subtenantIdentityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#generateServiceProviderCertificate(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider generateServiceProviderCertificate(@NonNull String accountId,
                                                                        @NonNull String id) throws MbedCloudException {
        return generateServiceProviderCertificate(accountId, id, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@NonNull String accountId, @NonNull String id,
                                              @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(accountId, id,
                                                                                                 subtenantIdentityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderAlgorithm, int, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@Nullable SubtenantIdentityProviderAlgorithm algorithm,
                                              @Nullable int validity) throws MbedCloudException {
        return generateServiceProviderCertificate(algorithm, validity, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderAlgorithm, int, String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@Nullable SubtenantIdentityProviderAlgorithm algorithm,
                                              @Nullable int validity, @NonNull String accountId,
                                              @NonNull String id) throws MbedCloudException {
        return generateServiceProviderCertificate(algorithm, validity, accountId, id, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderAlgorithm, int, String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@Nullable SubtenantIdentityProviderAlgorithm algorithm,
                                              @Nullable int validity, @NonNull String accountId, @NonNull String id,
                                              @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(algorithm, validity,
                                                                                                 accountId, id,
                                                                                                 subtenantIdentityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderAlgorithm, int, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           generateServiceProviderCertificate(@Nullable SubtenantIdentityProviderAlgorithm algorithm,
                                              @Nullable int validity,
                                              @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(algorithm, validity,
                                                                                                 subtenantIdentityProvider));
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected SubtenantIdentityProvider instantiateModel() {
        return new SubtenantIdentityProvider();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#read(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantIdentityProvider read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           read(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readSubtenantIdentityProvider(subtenantIdentityProvider));
    }

    /**
     * Gets a subtenant identity provider.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantIdentityProvider(String, String)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider read(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readSubtenantIdentityProvider(accountId, id));
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#refreshTokens(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider refreshTokens() throws MbedCloudException {
        return refreshTokens(getModel());
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#refreshTokens(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           refreshTokens(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).refreshTokens(subtenantIdentityProvider));
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#refreshTokens(String, String)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider refreshTokens(@NonNull String accountId,
                                                   @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).refreshTokens(accountId, id));
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#update(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantIdentityProvider update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantIdentityProvider
           update(@NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantIdentityProvider(subtenantIdentityProvider));
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#update(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return an updated subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider update(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        return update(accountId, id, getModel());
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantIdentityProvider(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return an updated subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           update(@NonNull String accountId, @NonNull String id,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantIdentityProvider(accountId, id,
                                                                                              subtenantIdentityProvider));
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#update(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider update(@Nullable boolean discovery,
                                            @Nullable OidcRequest oidcAttributes) throws MbedCloudException {
        return update(discovery, oidcAttributes, getModel());
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderDao#update(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @return an updated subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider update(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes,
                                            @NonNull String accountId, @NonNull String id) throws MbedCloudException {
        return update(discovery, oidcAttributes, accountId, id, getModel());
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param id
     *            Entity ID.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return an updated subtenant identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           update(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes, @NonNull String accountId,
                  @NonNull String id,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantIdentityProvider(discovery, oidcAttributes,
                                                                                              accountId, id,
                                                                                              subtenantIdentityProvider));
    }

    /**
     * Modifies a subtenant identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.OidcRequest, com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantIdentityProvider
           update(@Nullable boolean discovery, @Nullable OidcRequest oidcAttributes,
                  @NonNull SubtenantIdentityProvider subtenantIdentityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantIdentityProvider(discovery, oidcAttributes,
                                                                                              subtenantIdentityProvider));
    }
}
