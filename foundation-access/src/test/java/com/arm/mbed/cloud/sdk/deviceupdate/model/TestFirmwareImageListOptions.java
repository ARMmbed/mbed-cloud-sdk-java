// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-121),
                                                                                              Long.valueOf(27),
                                                                                              Order.getDefault(),
                                                                                              "c0443dac-557b-4da8-b5ee-fddd7160be13",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1559313351364L),
                                                                                                        new Date(1559313345379L),
                                                                                                        new Date(1559313346850L),
                                                                                                        new Date(1559313346115L),
                                                                                                        new Date(1559313343591L),
                                                                                                        new Date(1559313347686L),
                                                                                                        new Date(1559313346337L),
                                                                                                        new Date(1559313341989L),
                                                                                                        new Date(1559313348031L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1559313349060L),
                                                                                                           new Date(1559313346626L),
                                                                                                           new Date(1559313342231L),
                                                                                                           new Date(1559313346976L),
                                                                                                           new Date(1559313350126L),
                                                                                                           new Date(1559313350777L),
                                                                                                           new Date(1559313350687L),
                                                                                                           new Date(1559313348278L),
                                                                                                           new Date(1559313342814L)))
                                                                            .lessThanUpdatedAt(new Date(1559313349265L))
                                                                            .greaterThanUpdatedAt(new Date(1559313342835L))
                                                                            .equalToName("3e69754b-dcaa-4b0c-9fbb-5ef89846ec37")
                                                                            .notEqualToName("6f72a1a3-4fba-4589-87c6-cceef6439225")
                                                                            .inNames(Arrays.asList("03020474-3590-4d99-830e-043b86da632b",
                                                                                                   "5c8643ce-d12e-4f06-9dab-7381f17167e4",
                                                                                                   "ce538942-bdd0-4b7c-a1ee-b98ef322597d",
                                                                                                   "03eae45e-fc63-4ea4-a932-4b95925ff776",
                                                                                                   "81d246e1-e8a9-435d-be7c-0a9fac38ce2f",
                                                                                                   "a584be51-2fa2-4fcd-b07f-bd9b53a42261",
                                                                                                   "f1411173-2d8c-4342-9112-94c9ed60cd49",
                                                                                                   "8ee9a4db-5c88-4b81-9ca9-d1bb231a1d9a"))
                                                                            .notInNames(Arrays.asList("ef8478de-bb56-4244-af42-185a03a5ce77"))
                                                                            .equalToDescription("0d1d8421-39eb-4c7d-8b27-b92ccc29beea")
                                                                            .notEqualToDescription("7406f0ce-fa5f-49f5-bc8d-6c8819f104ab")
                                                                            .inDescriptions(Arrays.asList("9b5e88e3-4102-4979-822c-6518f6672f76",
                                                                                                          "95fa1bb9-5972-4d6a-944b-855aba9ad92e",
                                                                                                          "15cb25b3-6fe3-49c5-936d-22f7839d8bf7"))
                                                                            .notInDescriptions(Arrays.asList("cc48ebde-17a3-473f-bc79-1e55aa33ac45",
                                                                                                             "93999355-b6a7-4fa6-8ece-5769d2438a3c",
                                                                                                             "aebdb3cc-71fb-495f-ab95-7495559f3c84",
                                                                                                             "29147823-3d5d-4512-bd25-7252134a354c",
                                                                                                             "8f711521-d6da-4129-bde4-680507a6c36a"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1559313348069L),
                                                                                                        new Date(1559313342584L),
                                                                                                        new Date(1559313348447L),
                                                                                                        new Date(1559313350952L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1559313347939L),
                                                                                                           new Date(1559313350250L)))
                                                                            .lessThanCreatedAt(new Date(1559313344853L))
                                                                            .greaterThanCreatedAt(new Date(1559313342643L))
                                                                            .equalToDatafileUrl("19204e1d-a799-4b7a-90c5-535acfc043fb")
                                                                            .notEqualToDatafileUrl("592ecf8e-f868-419b-8800-9d9333aa99b0")
                                                                            .inDatafileUrls(Arrays.asList("68c498bf-94d2-44a1-b17c-117114dcc52b",
                                                                                                          "e642baae-7445-4dda-8aa1-17d77ca95fea",
                                                                                                          "56e71f48-36d9-4af7-8deb-9eb2fb132b59"))
                                                                            .notInDatafileUrls(Arrays.asList("af74bf26-50d1-4194-a65a-eda2ea82c004"))
                                                                            .equalToDatafileSize(Long.valueOf(-104))
                                                                            .notEqualToDatafileSize(Long.valueOf(-56))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(70),
                                                                                                           Long.valueOf(88),
                                                                                                           Long.valueOf(110),
                                                                                                           Long.valueOf(58),
                                                                                                           Long.valueOf(-126),
                                                                                                           Long.valueOf(-85),
                                                                                                           Long.valueOf(-73),
                                                                                                           Long.valueOf(119),
                                                                                                           Long.valueOf(-122)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(-95),
                                                                                                              Long.valueOf(83),
                                                                                                              Long.valueOf(-51)))
                                                                            .equalToDatafileChecksum("d52630be-f411-47e4-9e89-0574b03c51c8")
                                                                            .notEqualToDatafileChecksum("18402261-1809-4d8b-8f20-de1a66702d9b")
                                                                            .inDatafileChecksums(Arrays.asList("b7383552-e868-415b-bcd1-7454fc852ffa",
                                                                                                               "5f64ccb7-17df-4079-a617-6c8995aeba2d",
                                                                                                               "fe1d383e-bdb1-459f-b253-70a943470ec8"))
                                                                            .notInDatafileChecksums(Arrays.asList("9d5dbbc3-9e93-4afc-8837-981302d65a69",
                                                                                                                  "7170ed88-85b0-4c15-90db-f4f241a22e6b",
                                                                                                                  "def32fba-dbc0-4777-a858-3d1e62767d5d",
                                                                                                                  "5120aedb-3f75-4ff9-b694-efd3f779638f",
                                                                                                                  "45ae7e24-36e4-4e29-ac8e-82fb68e57b16",
                                                                                                                  "f5036d28-efea-461e-8eff-cdc6b8708c23",
                                                                                                                  "635bd092-67a1-4156-a486-f2716e3de8fa",
                                                                                                                  "38e2f311-82d1-44dc-933f-2a266faf6f5b",
                                                                                                                  "3632cf20-3ecc-4565-8425-e56e19598329"))
                                                                            .equalToId("16480357-2ffd-42be-9743-92e1a73b6d6e")
                                                                            .notEqualToId("36e63e89-a858-4388-ac95-676d8093947d")
                                                                            .inIds(Arrays.asList("85cccbaf-d13a-48e1-9777-e258017820a1",
                                                                                                 "50d18c81-f436-467a-bcc8-f6fa74e4fa50",
                                                                                                 "4adf5307-ec1e-4af1-9730-8841f74739d9",
                                                                                                 "889e8e49-b801-48ed-9fca-69d524b2a3ef"))
                                                                            .notInIds(Arrays.asList("80610236-d1f8-4e76-acbb-23382961f4f1",
                                                                                                    "fa1877bf-3e57-4009-b7b9-c21036b9e4e6",
                                                                                                    "bd79dc64-5b83-4d7b-a028-31bca7f6f01f"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559313351364L), new Date(1559313345379L), new Date(1559313346850L),
                                       new Date(1559313346115L), new Date(1559313343591L), new Date(1559313347686L),
                                       new Date(1559313346337L), new Date(1559313341989L), new Date(1559313348031L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559313349060L), new Date(1559313346626L), new Date(1559313342231L),
                                       new Date(1559313346976L), new Date(1559313350126L), new Date(1559313350777L),
                                       new Date(1559313350687L), new Date(1559313348278L), new Date(1559313342814L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559313349265L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559313342835L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("3e69754b-dcaa-4b0c-9fbb-5ef89846ec37",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("6f72a1a3-4fba-4589-87c6-cceef6439225",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("03020474-3590-4d99-830e-043b86da632b", "5c8643ce-d12e-4f06-9dab-7381f17167e4",
                                       "ce538942-bdd0-4b7c-a1ee-b98ef322597d", "03eae45e-fc63-4ea4-a932-4b95925ff776",
                                       "81d246e1-e8a9-435d-be7c-0a9fac38ce2f", "a584be51-2fa2-4fcd-b07f-bd9b53a42261",
                                       "f1411173-2d8c-4342-9112-94c9ed60cd49", "8ee9a4db-5c88-4b81-9ca9-d1bb231a1d9a"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("ef8478de-bb56-4244-af42-185a03a5ce77"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("0d1d8421-39eb-4c7d-8b27-b92ccc29beea",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("7406f0ce-fa5f-49f5-bc8d-6c8819f104ab",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("9b5e88e3-4102-4979-822c-6518f6672f76", "95fa1bb9-5972-4d6a-944b-855aba9ad92e",
                                       "15cb25b3-6fe3-49c5-936d-22f7839d8bf7"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("cc48ebde-17a3-473f-bc79-1e55aa33ac45", "93999355-b6a7-4fa6-8ece-5769d2438a3c",
                                       "aebdb3cc-71fb-495f-ab95-7495559f3c84", "29147823-3d5d-4512-bd25-7252134a354c",
                                       "8f711521-d6da-4129-bde4-680507a6c36a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559313348069L), new Date(1559313342584L), new Date(1559313348447L),
                                       new Date(1559313350952L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559313347939L), new Date(1559313350250L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559313344853L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559313342643L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("19204e1d-a799-4b7a-90c5-535acfc043fb",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("592ecf8e-f868-419b-8800-9d9333aa99b0",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("68c498bf-94d2-44a1-b17c-117114dcc52b", "e642baae-7445-4dda-8aa1-17d77ca95fea",
                                       "56e71f48-36d9-4af7-8deb-9eb2fb132b59"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("af74bf26-50d1-4194-a65a-eda2ea82c004"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-104),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-56),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(70), Long.valueOf(88), Long.valueOf(110), Long.valueOf(58),
                                       Long.valueOf(-126), Long.valueOf(-85), Long.valueOf(-73), Long.valueOf(119),
                                       Long.valueOf(-122)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-95), Long.valueOf(83), Long.valueOf(-51)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("d52630be-f411-47e4-9e89-0574b03c51c8",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("18402261-1809-4d8b-8f20-de1a66702d9b",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("b7383552-e868-415b-bcd1-7454fc852ffa", "5f64ccb7-17df-4079-a617-6c8995aeba2d",
                                       "fe1d383e-bdb1-459f-b253-70a943470ec8"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("9d5dbbc3-9e93-4afc-8837-981302d65a69", "7170ed88-85b0-4c15-90db-f4f241a22e6b",
                                       "def32fba-dbc0-4777-a858-3d1e62767d5d", "5120aedb-3f75-4ff9-b694-efd3f779638f",
                                       "45ae7e24-36e4-4e29-ac8e-82fb68e57b16", "f5036d28-efea-461e-8eff-cdc6b8708c23",
                                       "635bd092-67a1-4156-a486-f2716e3de8fa", "38e2f311-82d1-44dc-933f-2a266faf6f5b",
                                       "3632cf20-3ecc-4565-8425-e56e19598329"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("16480357-2ffd-42be-9743-92e1a73b6d6e",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("36e63e89-a858-4388-ac95-676d8093947d",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("85cccbaf-d13a-48e1-9777-e258017820a1", "50d18c81-f436-467a-bcc8-f6fa74e4fa50",
                                       "4adf5307-ec1e-4af1-9730-8841f74739d9", "889e8e49-b801-48ed-9fca-69d524b2a3ef"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("80610236-d1f8-4e76-acbb-23382961f4f1", "fa1877bf-3e57-4009-b7b9-c21036b9e4e6",
                                       "bd79dc64-5b83-4d7b-a028-31bca7f6f01f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-37),
                                                                                              Long.valueOf(115),
                                                                                              Order.getDefault(),
                                                                                              "fde62a71-fd0d-4f43-a07f-df2757b4f84d",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-37),
                                                                                              Long.valueOf(115),
                                                                                              Order.getDefault(),
                                                                                              "fde62a71-fd0d-4f43-a07f-df2757b4f84d",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-46),
                                                                                              Long.valueOf(-59),
                                                                                              Order.getDefault(),
                                                                                              "0e133d22-f99d-4a73-bfc4-9e08e80ffee8",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-46),
                                                                                              Long.valueOf(-59),
                                                                                              Order.getDefault(),
                                                                                              "0e133d22-f99d-4a73-bfc4-9e08e80ffee8",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(-14),
                                                                                              Long.valueOf(30),
                                                                                              Order.getDefault(),
                                                                                              "701e6407-13ab-4d16-b28c-d1c42ccbf6ab",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
