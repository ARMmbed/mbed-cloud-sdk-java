// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-46),
                                                                                              Long.valueOf(62),
                                                                                              Order.getDefault(),
                                                                                              "4a04d5ed-10ff-4d98-bcd3-6d8b4dd4342e",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1559745299736L),
                                                                                                        new Date(1559745301962L),
                                                                                                        new Date(1559745298528L),
                                                                                                        new Date(1559745302356L),
                                                                                                        new Date(1559745299820L),
                                                                                                        new Date(1559745296363L),
                                                                                                        new Date(1559745299448L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1559745302685L),
                                                                                                           new Date(1559745303658L),
                                                                                                           new Date(1559745300939L),
                                                                                                           new Date(1559745299962L),
                                                                                                           new Date(1559745300238L)))
                                                                            .lessThanUpdatedAt(new Date(1559745304018L))
                                                                            .greaterThanUpdatedAt(new Date(1559745297809L))
                                                                            .equalToName("a72d1b0e-7412-4691-a81f-21ff7d0c9e02")
                                                                            .notEqualToName("f631d3c5-ef7a-412b-9950-eadc0d67b56d")
                                                                            .inNames(Arrays.asList("9cf25d50-9d5b-45ec-9530-e967f6dc498d",
                                                                                                   "cba54c4c-b63e-411e-9b68-426540f1abf9",
                                                                                                   "f9e5bcb3-ea48-404f-af56-5ed9949811c0",
                                                                                                   "d903a8e8-e160-438a-b2ec-2e4144d65cbf",
                                                                                                   "071373fe-c883-4f26-9a50-c603a0a409af",
                                                                                                   "9352bd26-6cc6-46e6-be34-95dd00d083e0"))
                                                                            .notInNames(Arrays.asList("1fa71066-3e11-4664-b635-5a41c61f5c6f",
                                                                                                      "66ff587c-0acc-4b31-878e-d75b9ba770ca"))
                                                                            .equalToDescription("50cf9c67-302c-4eb6-ae93-e2097d9b2f5a")
                                                                            .notEqualToDescription("603230d6-51e3-4098-a9bf-601ce31b10de")
                                                                            .inDescriptions(Arrays.asList("34a77803-3ca8-4155-80c2-9159c56aba1e"))
                                                                            .notInDescriptions(Arrays.asList("fb71bc55-177e-4727-bced-58fc8d7b7757",
                                                                                                             "abb9e572-d422-453b-ae22-df0e4e235bff",
                                                                                                             "ed88455a-5e57-4e86-b663-e14fb06d83b4",
                                                                                                             "019dea71-9620-4774-bb81-cb04ca217449",
                                                                                                             "3792d347-3157-466b-b3ee-2dc7b44d4c5f",
                                                                                                             "013b036b-29f7-479e-b846-9370abe57465"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1559745301641L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1559745304871L),
                                                                                                           new Date(1559745304357L),
                                                                                                           new Date(1559745299165L),
                                                                                                           new Date(1559745305310L)))
                                                                            .lessThanCreatedAt(new Date(1559745297800L))
                                                                            .greaterThanCreatedAt(new Date(1559745296511L))
                                                                            .equalToDatafileUrl("ba90744c-60ad-427f-8aad-317a8499e6f7")
                                                                            .notEqualToDatafileUrl("fdc775ee-68fa-46e4-a925-0d00e189ae21")
                                                                            .inDatafileUrls(Arrays.asList("45dc85fb-b338-41a7-9d8f-72320747a6b5",
                                                                                                          "4eaefc61-ffeb-47d8-99b3-7cb93c3c30ee",
                                                                                                          "af6c1fd9-13f5-45d6-b916-b6186a94ca2e"))
                                                                            .notInDatafileUrls(Arrays.asList("109d0554-a22f-4ffc-8db5-a68f5caac9cc",
                                                                                                             "822f0036-8594-43b9-a16f-9cd24f48bb48",
                                                                                                             "da34e598-744a-4a36-91f9-1fb3fa2fe471",
                                                                                                             "9ce1bc0a-831d-410e-b71d-a5ab63de6229",
                                                                                                             "f1ce7632-18ef-43c1-a405-b445d939cfe3",
                                                                                                             "f2db72fa-f10f-46d8-8d87-8fbac6192535",
                                                                                                             "c4bf74d3-bc92-4906-849d-8365f458157f"))
                                                                            .equalToDatafileSize(Long.valueOf(17))
                                                                            .notEqualToDatafileSize(Long.valueOf(49))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(88),
                                                                                                           Long.valueOf(21),
                                                                                                           Long.valueOf(-62)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(-60),
                                                                                                              Long.valueOf(-20),
                                                                                                              Long.valueOf(6),
                                                                                                              Long.valueOf(-34),
                                                                                                              Long.valueOf(-66),
                                                                                                              Long.valueOf(93),
                                                                                                              Long.valueOf(76)))
                                                                            .equalToDatafileChecksum("c37f4395-2539-46e7-982e-67ca341e53c3")
                                                                            .notEqualToDatafileChecksum("eea10809-293c-4f70-b8ec-81ec558426ad")
                                                                            .inDatafileChecksums(Arrays.asList("6f240b90-9f63-41ef-99b8-bb4557515c84",
                                                                                                               "dc765fd6-f12f-4a6c-b781-3a8e4732130c",
                                                                                                               "8d39c85f-752b-4ac7-b0b6-47333d350547",
                                                                                                               "ca633270-a70e-43b6-a36e-9ee2ce9e6ed3",
                                                                                                               "c4fe7596-52c4-4be7-b45d-6b2ca6585d07"))
                                                                            .notInDatafileChecksums(Arrays.asList("144bfca3-f6e9-4241-8e52-3b4be56c6562",
                                                                                                                  "03110a19-1f49-4a2d-8757-2b595ad6af67",
                                                                                                                  "a9a34ce3-fdb5-4ae3-adcd-a026fa0d00b5",
                                                                                                                  "a98d9a62-4d8b-406e-bbc6-a68035471048",
                                                                                                                  "7fdf6ed4-6493-4304-879c-bb58f98c93d3",
                                                                                                                  "46088314-b73e-4d57-a92e-8706f1eb72f2"))
                                                                            .equalToId("178a7471-adad-4c6e-8e5c-aa89909099df")
                                                                            .notEqualToId("f1257961-193b-4f7e-9eb5-cbcf53fcb5bb")
                                                                            .inIds(Arrays.asList("7ca9c7d7-c824-41e1-b0f0-4c1e6b341fec",
                                                                                                 "85630dcc-1691-4386-8fe8-a89eb0feb5a6",
                                                                                                 "d6b097f9-2e55-4df2-8fb5-fe436483f2f9",
                                                                                                 "3655ecc5-23c2-4495-9d76-c2502b544105"))
                                                                            .notInIds(Arrays.asList("0be6451d-1b79-45ed-b354-82bb75c6cbea"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745299736L), new Date(1559745301962L), new Date(1559745298528L),
                                       new Date(1559745302356L), new Date(1559745299820L), new Date(1559745296363L),
                                       new Date(1559745299448L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745302685L), new Date(1559745303658L), new Date(1559745300939L),
                                       new Date(1559745299962L), new Date(1559745300238L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559745304018L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559745297809L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("a72d1b0e-7412-4691-a81f-21ff7d0c9e02",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("f631d3c5-ef7a-412b-9950-eadc0d67b56d",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("9cf25d50-9d5b-45ec-9530-e967f6dc498d", "cba54c4c-b63e-411e-9b68-426540f1abf9",
                                       "f9e5bcb3-ea48-404f-af56-5ed9949811c0", "d903a8e8-e160-438a-b2ec-2e4144d65cbf",
                                       "071373fe-c883-4f26-9a50-c603a0a409af", "9352bd26-6cc6-46e6-be34-95dd00d083e0"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("1fa71066-3e11-4664-b635-5a41c61f5c6f", "66ff587c-0acc-4b31-878e-d75b9ba770ca"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("50cf9c67-302c-4eb6-ae93-e2097d9b2f5a",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("603230d6-51e3-4098-a9bf-601ce31b10de",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("34a77803-3ca8-4155-80c2-9159c56aba1e"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("fb71bc55-177e-4727-bced-58fc8d7b7757", "abb9e572-d422-453b-ae22-df0e4e235bff",
                                       "ed88455a-5e57-4e86-b663-e14fb06d83b4", "019dea71-9620-4774-bb81-cb04ca217449",
                                       "3792d347-3157-466b-b3ee-2dc7b44d4c5f", "013b036b-29f7-479e-b846-9370abe57465"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745301641L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745304871L), new Date(1559745304357L), new Date(1559745299165L),
                                       new Date(1559745305310L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559745297800L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559745296511L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("ba90744c-60ad-427f-8aad-317a8499e6f7",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("fdc775ee-68fa-46e4-a925-0d00e189ae21",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("45dc85fb-b338-41a7-9d8f-72320747a6b5", "4eaefc61-ffeb-47d8-99b3-7cb93c3c30ee",
                                       "af6c1fd9-13f5-45d6-b916-b6186a94ca2e"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("109d0554-a22f-4ffc-8db5-a68f5caac9cc", "822f0036-8594-43b9-a16f-9cd24f48bb48",
                                       "da34e598-744a-4a36-91f9-1fb3fa2fe471", "9ce1bc0a-831d-410e-b71d-a5ab63de6229",
                                       "f1ce7632-18ef-43c1-a405-b445d939cfe3", "f2db72fa-f10f-46d8-8d87-8fbac6192535",
                                       "c4bf74d3-bc92-4906-849d-8365f458157f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(17),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(49),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(88), Long.valueOf(21), Long.valueOf(-62)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-60), Long.valueOf(-20), Long.valueOf(6), Long.valueOf(-34),
                                       Long.valueOf(-66), Long.valueOf(93), Long.valueOf(76)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("c37f4395-2539-46e7-982e-67ca341e53c3",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("eea10809-293c-4f70-b8ec-81ec558426ad",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("6f240b90-9f63-41ef-99b8-bb4557515c84", "dc765fd6-f12f-4a6c-b781-3a8e4732130c",
                                       "8d39c85f-752b-4ac7-b0b6-47333d350547", "ca633270-a70e-43b6-a36e-9ee2ce9e6ed3",
                                       "c4fe7596-52c4-4be7-b45d-6b2ca6585d07"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("144bfca3-f6e9-4241-8e52-3b4be56c6562", "03110a19-1f49-4a2d-8757-2b595ad6af67",
                                       "a9a34ce3-fdb5-4ae3-adcd-a026fa0d00b5", "a98d9a62-4d8b-406e-bbc6-a68035471048",
                                       "7fdf6ed4-6493-4304-879c-bb58f98c93d3", "46088314-b73e-4d57-a92e-8706f1eb72f2"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("178a7471-adad-4c6e-8e5c-aa89909099df",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("f1257961-193b-4f7e-9eb5-cbcf53fcb5bb",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("7ca9c7d7-c824-41e1-b0f0-4c1e6b341fec", "85630dcc-1691-4386-8fe8-a89eb0feb5a6",
                                       "d6b097f9-2e55-4df2-8fb5-fe436483f2f9", "3655ecc5-23c2-4495-9d76-c2502b544105"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("0be6451d-1b79-45ed-b354-82bb75c6cbea"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-91),
                                                                                              Long.valueOf(-85),
                                                                                              Order.getDefault(),
                                                                                              "37de186c-d555-4bea-ac62-d269f9b7ff88",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-91),
                                                                                              Long.valueOf(-85),
                                                                                              Order.getDefault(),
                                                                                              "37de186c-d555-4bea-ac62-d269f9b7ff88",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-78),
                                                                                              Long.valueOf(114),
                                                                                              Order.getDefault(),
                                                                                              "f90f5ac4-a0c1-4465-b800-43bc49875139",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-78),
                                                                                              Long.valueOf(114),
                                                                                              Order.getDefault(),
                                                                                              "f90f5ac4-a0c1-4465-b800-43bc49875139",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(95),
                                                                                              Long.valueOf(-20),
                                                                                              Order.getDefault(),
                                                                                              "7f4f8887-804b-4fe9-b00d-45284630230b",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
