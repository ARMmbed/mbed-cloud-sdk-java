// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(65),
                                                                                           Long.valueOf(-120),
                                                                                           Order.getDefault(),
                                                                                           "ac37d8ad-3633-46db-881e-0da0f7858f9e",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("68da02d3-8202-4e30-969d-18055de97505")
                                                                          .notEqualToDeviceId("cab0ac2c-968c-44f3-9871-d9358601b7cc")
                                                                          .inDeviceIds(Arrays.asList("34e8d144-aafa-4fbc-9c9c-c72de9834837",
                                                                                                     "21397d6d-8590-4bd1-a405-9476b112acb3",
                                                                                                     "fa109e12-8761-4918-970f-14106fb39a69",
                                                                                                     "1034db5d-10eb-4e6a-a17f-3b84cbce0fea",
                                                                                                     "9d03f25b-bc2b-4ed4-a433-9fd09713c763",
                                                                                                     "cdb5b57e-1f24-4e47-84d2-f1040790e821"))
                                                                          .notInDeviceIds(Arrays.asList("5ded8a0a-3b40-4af5-9cfa-5bfa094e285d",
                                                                                                        "d1442d77-cdd1-4be4-b98e-8ec6843d6640",
                                                                                                        "7bbdb481-9671-4d7e-924c-33fd7a0f7366",
                                                                                                        "0dc8c326-2e7b-4c02-a9f8-64c82799d191",
                                                                                                        "129feaa4-b033-4c87-9d20-d6a8ce9aa29a",
                                                                                                        "b2220ba7-9202-4894-a441-ffb8f0aca6bd",
                                                                                                        "433614ee-52d1-44c2-b4c0-70c2e2a916ff"))
                                                                          .equalToDescription("5e3896c2-8c39-4568-9a25-c00497778006")
                                                                          .notEqualToDescription("c79f6080-0825-4d90-a4d8-52c24cfd8811")
                                                                          .inDescriptions(Arrays.asList("6bd1455e-cf92-4b3b-a081-e43b1043ebce",
                                                                                                        "86eee225-1e0a-457f-b395-e3d69ed0e3a9"))
                                                                          .notInDescriptions(Arrays.asList("8b0491a2-2810-4ed1-81ff-c68b4f4633f5",
                                                                                                           "541fac06-e365-463d-bf33-23243e9f6884",
                                                                                                           "f42cc220-fe6f-4ec8-9b2b-3542f5c1d56f",
                                                                                                           "cb3be659-df25-482b-abaf-1b61101b38f4",
                                                                                                           "e427c2f3-8796-4f04-af20-3d45a408db73",
                                                                                                           "22185586-3a71-47f6-910d-5a5fa18c5ed4",
                                                                                                           "86c5c7c9-85e5-4206-bc32-ec5e1a78194f"))
                                                                          .inDateTimes(Arrays.asList(new Date(1559752154767L),
                                                                                                     new Date(1559752146458L),
                                                                                                     new Date(1559752154432L),
                                                                                                     new Date(1559752150661L),
                                                                                                     new Date(1559752147662L),
                                                                                                     new Date(1559752151735L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1559752146708L)))
                                                                          .lessThanDateTime(new Date(1559752146510L))
                                                                          .greaterThanDateTime(new Date(1559752146585L))
                                                                          .equalToStateChange(Boolean.TRUE)
                                                                          .notEqualToStateChange(Boolean.FALSE)
                                                                          .equalToId("94658d3d-2630-4ae4-9057-7febe62817c1")
                                                                          .notEqualToId("2c5e584f-8921-4b05-92b6-5966a4d32358")
                                                                          .inIds(Arrays.asList("efb971e1-3972-406d-808b-1f523e8b1c21",
                                                                                               "a1eef3a1-0d93-452f-8acb-ceb2dd277165",
                                                                                               "60bc47fc-fec1-4553-8a2f-b9dbe39acbcd",
                                                                                               "e33a18ad-e1e0-4ecc-a135-0f7f109c01aa"))
                                                                          .notInIds(Arrays.asList("aec1d9bd-717d-4f7d-bde8-0a14861aa32d",
                                                                                                  "0ab8f58a-cd51-4f97-8950-6a993b3eeba8",
                                                                                                  "a68ab33f-a7a0-4879-bf6c-a20596575584"))
                                                                          .equalToEventType("112c296c-5113-4569-b796-d12c71f6b93d")
                                                                          .notEqualToEventType("77b38b2f-ca36-40bd-abb8-4261aa5b5ff6")
                                                                          .inEventTypes(Arrays.asList("2b8ede1a-c7fa-4be8-9e56-48a16dbc236d",
                                                                                                      "45c3b34d-a7d5-4e3c-9ba8-2725cb2d2ac2"))
                                                                          .notInEventTypes(Arrays.asList("350a06a3-f85c-411c-bef8-68f1777372a7",
                                                                                                         "72ff7e23-2032-4cd7-ae2f-008edc2604dc"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("68da02d3-8202-4e30-969d-18055de97505",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("cab0ac2c-968c-44f3-9871-d9358601b7cc",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("34e8d144-aafa-4fbc-9c9c-c72de9834837", "21397d6d-8590-4bd1-a405-9476b112acb3",
                                       "fa109e12-8761-4918-970f-14106fb39a69", "1034db5d-10eb-4e6a-a17f-3b84cbce0fea",
                                       "9d03f25b-bc2b-4ed4-a433-9fd09713c763", "cdb5b57e-1f24-4e47-84d2-f1040790e821"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("5ded8a0a-3b40-4af5-9cfa-5bfa094e285d", "d1442d77-cdd1-4be4-b98e-8ec6843d6640",
                                       "7bbdb481-9671-4d7e-924c-33fd7a0f7366", "0dc8c326-2e7b-4c02-a9f8-64c82799d191",
                                       "129feaa4-b033-4c87-9d20-d6a8ce9aa29a", "b2220ba7-9202-4894-a441-ffb8f0aca6bd",
                                       "433614ee-52d1-44c2-b4c0-70c2e2a916ff"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("5e3896c2-8c39-4568-9a25-c00497778006",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("c79f6080-0825-4d90-a4d8-52c24cfd8811",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("6bd1455e-cf92-4b3b-a081-e43b1043ebce", "86eee225-1e0a-457f-b395-e3d69ed0e3a9"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("8b0491a2-2810-4ed1-81ff-c68b4f4633f5", "541fac06-e365-463d-bf33-23243e9f6884",
                                       "f42cc220-fe6f-4ec8-9b2b-3542f5c1d56f", "cb3be659-df25-482b-abaf-1b61101b38f4",
                                       "e427c2f3-8796-4f04-af20-3d45a408db73", "22185586-3a71-47f6-910d-5a5fa18c5ed4",
                                       "86c5c7c9-85e5-4206-bc32-ec5e1a78194f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559752154767L), new Date(1559752146458L), new Date(1559752154432L),
                                       new Date(1559752150661L), new Date(1559752147662L), new Date(1559752151735L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559752146708L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559752146510L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559752146585L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("94658d3d-2630-4ae4-9057-7febe62817c1",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("2c5e584f-8921-4b05-92b6-5966a4d32358",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("efb971e1-3972-406d-808b-1f523e8b1c21", "a1eef3a1-0d93-452f-8acb-ceb2dd277165",
                                       "60bc47fc-fec1-4553-8a2f-b9dbe39acbcd", "e33a18ad-e1e0-4ecc-a135-0f7f109c01aa"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("aec1d9bd-717d-4f7d-bde8-0a14861aa32d", "0ab8f58a-cd51-4f97-8950-6a993b3eeba8",
                                       "a68ab33f-a7a0-4879-bf6c-a20596575584"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("112c296c-5113-4569-b796-d12c71f6b93d",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("77b38b2f-ca36-40bd-abb8-4261aa5b5ff6",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("2b8ede1a-c7fa-4be8-9e56-48a16dbc236d", "45c3b34d-a7d5-4e3c-9ba8-2725cb2d2ac2"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("350a06a3-f85c-411c-bef8-68f1777372a7", "72ff7e23-2032-4cd7-ae2f-008edc2604dc"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-7),
                                                                                           Long.valueOf(78),
                                                                                           Order.getDefault(),
                                                                                           "dbc12382-336f-46d8-a266-b68c88708048",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-7),
                                                                                           Long.valueOf(78),
                                                                                           Order.getDefault(),
                                                                                           "dbc12382-336f-46d8-a266-b68c88708048",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(70),
                                                                                           Long.valueOf(120),
                                                                                           Order.getDefault(),
                                                                                           "776bf92d-5b3f-41fe-9a3b-e2f47cee85e2",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(70),
                                                                                           Long.valueOf(120),
                                                                                           Order.getDefault(),
                                                                                           "776bf92d-5b3f-41fe-9a3b-e2f47cee85e2",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(20),
                                                                                           Long.valueOf(-48),
                                                                                           Order.getDefault(),
                                                                                           "a1e4d0c3-a395-4d94-a7d2-fb8faf76c842",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
