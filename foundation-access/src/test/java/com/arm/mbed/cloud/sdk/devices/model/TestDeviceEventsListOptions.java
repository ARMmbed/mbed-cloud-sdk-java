// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(40),
                                                                                           Long.valueOf(-64),
                                                                                           Order.getDefault(),
                                                                                           "058d6bdd-2c4a-40f9-941f-947433628139",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("2601e497-8296-4816-a0a6-01be24b46a47")
                                                                          .notEqualToDeviceId("6b3edc41-dc28-4e07-91ba-7e375c179971")
                                                                          .inDeviceIds(Arrays.asList("9173d89a-4c53-466d-a887-ffea8ea18af4",
                                                                                                     "b888cc1f-dfe9-45ec-897e-ddf93af77913",
                                                                                                     "81a10428-ca56-4195-89bb-6dc68d8accfd",
                                                                                                     "11068dad-5163-4b96-92fe-1ec3add1d0d8",
                                                                                                     "1a7dade8-b85d-4fc2-afb0-956c879181ac",
                                                                                                     "5184b63b-62fe-49f9-b8fc-4459bdc5d125",
                                                                                                     "daf54dd5-d5cb-449e-9452-90acaeb29516",
                                                                                                     "c26b14c4-eed8-48ca-8311-009d0778c1e3",
                                                                                                     "f3a43c9c-c55e-4ac2-a2a8-92316c1e060e"))
                                                                          .notInDeviceIds(Arrays.asList("e3ae0052-cf9f-4186-ad99-8253e283fd2e",
                                                                                                        "3d897598-c914-4c6a-8809-016f7e84db28",
                                                                                                        "b8ae6983-d684-47a7-b9cd-3502620aed78"))
                                                                          .equalToDescription("9662aa04-e966-431f-993b-71ffc43cc0b8")
                                                                          .notEqualToDescription("e3f23167-9523-456c-86fe-29a00f05f306")
                                                                          .inDescriptions(Arrays.asList("a133a019-14b8-4443-84ba-8afb9208c134",
                                                                                                        "a4c1365c-d10c-4137-8836-90b8b8746468",
                                                                                                        "c1d2ee11-a805-45b4-8ed1-f8f0dc856b14",
                                                                                                        "c0b717dd-fc41-4789-ad82-6e1263e7637f",
                                                                                                        "4bde49cd-9147-4aa6-810e-4558304b9c5a",
                                                                                                        "722842cd-7d7e-4bb0-abeb-ebdd7fbc07f6",
                                                                                                        "c10c1c03-a102-43c8-a0ab-749e59364582",
                                                                                                        "88ac6f44-7652-4c6a-8924-bdd3b7060e5b"))
                                                                          .notInDescriptions(Arrays.asList("f5e35fee-a780-4150-a98a-6b51ea93ecbb",
                                                                                                           "2d51dbb8-ca69-41e1-8aef-ad1af6b064b9",
                                                                                                           "f1b9987b-ec29-49db-a03e-7a884b2fbb60",
                                                                                                           "2c54a491-3b4a-4680-9187-2b088b6ae161",
                                                                                                           "3595ec59-de96-4223-8f36-caf0a5e0501a"))
                                                                          .inDateTimes(Arrays.asList(new Date(1559758612176L),
                                                                                                     new Date(1559758613395L),
                                                                                                     new Date(1559758613131L),
                                                                                                     new Date(1559758610858L),
                                                                                                     new Date(1559758614857L),
                                                                                                     new Date(1559758605773L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1559758611223L),
                                                                                                        new Date(1559758607696L),
                                                                                                        new Date(1559758606908L),
                                                                                                        new Date(1559758608453L),
                                                                                                        new Date(1559758609118L),
                                                                                                        new Date(1559758606253L)))
                                                                          .lessThanDateTime(new Date(1559758614855L))
                                                                          .greaterThanDateTime(new Date(1559758611085L))
                                                                          .equalToStateChange(Boolean.TRUE)
                                                                          .notEqualToStateChange(Boolean.FALSE)
                                                                          .equalToId("5d393647-8df4-4c13-bb85-444cc111e024")
                                                                          .notEqualToId("0f33204b-6fb5-45af-a8ba-16b487acaced")
                                                                          .inIds(Arrays.asList("fc58825a-95aa-47c1-80fa-6ac60b6473ed",
                                                                                               "3219ceb2-8b90-4b52-a9e5-4b95c885baa0",
                                                                                               "016d46c9-4d23-4fa9-b637-67b549637c81",
                                                                                               "c02029f8-055f-4e70-ac88-e76ca9d3f7ca"))
                                                                          .notInIds(Arrays.asList("f363a26f-ded0-497c-bf74-aa546381909c",
                                                                                                  "74fdccc7-ebb9-4ca6-b60c-64f6ce47d2d3"))
                                                                          .equalToEventType("56c5def9-98d6-4644-9c0d-9045cef87bea")
                                                                          .notEqualToEventType("5b4690fa-3b21-4a44-a39c-65f4d838cc24")
                                                                          .inEventTypes(Arrays.asList("1c4a13bc-971d-42d6-a7a0-49e1387acbbe",
                                                                                                      "728901bc-9ee8-45d7-92cc-41c3896e15f2",
                                                                                                      "baa0298b-6824-4330-b561-ea579d993110"))
                                                                          .notInEventTypes(Arrays.asList("9df9062e-b5e1-4df5-9d01-dcb9b08a25f0",
                                                                                                         "9b1bf04e-ffce-450c-8fdc-8f707a26314d",
                                                                                                         "e6f374ff-3d89-4f63-921c-eff8b8bd16a9",
                                                                                                         "d4bdeafa-d3a8-48b8-9f07-1f8d3477ed7c",
                                                                                                         "dbe79fee-0a84-4f95-b3c9-be868f412d3d",
                                                                                                         "07655ab8-b238-4b15-a86c-46039149607f"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("2601e497-8296-4816-a0a6-01be24b46a47",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("6b3edc41-dc28-4e07-91ba-7e375c179971",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("9173d89a-4c53-466d-a887-ffea8ea18af4", "b888cc1f-dfe9-45ec-897e-ddf93af77913",
                                       "81a10428-ca56-4195-89bb-6dc68d8accfd", "11068dad-5163-4b96-92fe-1ec3add1d0d8",
                                       "1a7dade8-b85d-4fc2-afb0-956c879181ac", "5184b63b-62fe-49f9-b8fc-4459bdc5d125",
                                       "daf54dd5-d5cb-449e-9452-90acaeb29516", "c26b14c4-eed8-48ca-8311-009d0778c1e3",
                                       "f3a43c9c-c55e-4ac2-a2a8-92316c1e060e"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("e3ae0052-cf9f-4186-ad99-8253e283fd2e", "3d897598-c914-4c6a-8809-016f7e84db28",
                                       "b8ae6983-d684-47a7-b9cd-3502620aed78"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("9662aa04-e966-431f-993b-71ffc43cc0b8",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("e3f23167-9523-456c-86fe-29a00f05f306",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("a133a019-14b8-4443-84ba-8afb9208c134", "a4c1365c-d10c-4137-8836-90b8b8746468",
                                       "c1d2ee11-a805-45b4-8ed1-f8f0dc856b14", "c0b717dd-fc41-4789-ad82-6e1263e7637f",
                                       "4bde49cd-9147-4aa6-810e-4558304b9c5a", "722842cd-7d7e-4bb0-abeb-ebdd7fbc07f6",
                                       "c10c1c03-a102-43c8-a0ab-749e59364582", "88ac6f44-7652-4c6a-8924-bdd3b7060e5b"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("f5e35fee-a780-4150-a98a-6b51ea93ecbb", "2d51dbb8-ca69-41e1-8aef-ad1af6b064b9",
                                       "f1b9987b-ec29-49db-a03e-7a884b2fbb60", "2c54a491-3b4a-4680-9187-2b088b6ae161",
                                       "3595ec59-de96-4223-8f36-caf0a5e0501a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559758612176L), new Date(1559758613395L), new Date(1559758613131L),
                                       new Date(1559758610858L), new Date(1559758614857L), new Date(1559758605773L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559758611223L), new Date(1559758607696L), new Date(1559758606908L),
                                       new Date(1559758608453L), new Date(1559758609118L), new Date(1559758606253L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559758614855L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559758611085L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("5d393647-8df4-4c13-bb85-444cc111e024",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("0f33204b-6fb5-45af-a8ba-16b487acaced",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("fc58825a-95aa-47c1-80fa-6ac60b6473ed", "3219ceb2-8b90-4b52-a9e5-4b95c885baa0",
                                       "016d46c9-4d23-4fa9-b637-67b549637c81", "c02029f8-055f-4e70-ac88-e76ca9d3f7ca"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("f363a26f-ded0-497c-bf74-aa546381909c", "74fdccc7-ebb9-4ca6-b60c-64f6ce47d2d3"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("56c5def9-98d6-4644-9c0d-9045cef87bea",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("5b4690fa-3b21-4a44-a39c-65f4d838cc24",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("1c4a13bc-971d-42d6-a7a0-49e1387acbbe", "728901bc-9ee8-45d7-92cc-41c3896e15f2",
                                       "baa0298b-6824-4330-b561-ea579d993110"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("9df9062e-b5e1-4df5-9d01-dcb9b08a25f0", "9b1bf04e-ffce-450c-8fdc-8f707a26314d",
                                       "e6f374ff-3d89-4f63-921c-eff8b8bd16a9", "d4bdeafa-d3a8-48b8-9f07-1f8d3477ed7c",
                                       "dbe79fee-0a84-4f95-b3c9-be868f412d3d", "07655ab8-b238-4b15-a86c-46039149607f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-53),
                                                                                           Long.valueOf(99),
                                                                                           Order.getDefault(),
                                                                                           "7dceaf29-5676-4dfd-b710-4b9f61d2b0d6",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-53),
                                                                                           Long.valueOf(99),
                                                                                           Order.getDefault(),
                                                                                           "7dceaf29-5676-4dfd-b710-4b9f61d2b0d6",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(39),
                                                                                           Long.valueOf(38),
                                                                                           Order.getDefault(),
                                                                                           "8df4be3d-9c01-4733-91da-8d2083aafb71",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(39),
                                                                                           Long.valueOf(38),
                                                                                           Order.getDefault(),
                                                                                           "8df4be3d-9c01-4733-91da-8d2083aafb71",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(89),
                                                                                           Long.valueOf(-30),
                                                                                           Order.getDefault(),
                                                                                           "74c1f218-1de2-4c64-bc52-5a976582b703",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
