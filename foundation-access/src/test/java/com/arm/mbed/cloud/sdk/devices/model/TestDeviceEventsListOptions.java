// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(27),
                                                                                           Long.valueOf(109),
                                                                                           Order.getDefault(),
                                                                                           "eb9aac4d-251d-4aad-8ca6-16cf5b160559",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("ec357863-25ed-4be0-827e-4381542f3f70")
                                                                          .notEqualToDeviceId("582469a3-e937-42bc-8624-bcf617aecfad")
                                                                          .inDeviceIds(Arrays.asList("4118a487-3cb8-4d5a-9f7f-0c213f407b1e",
                                                                                                     "f634abb1-42bd-4447-bf9c-9ab2b138384b",
                                                                                                     "a62df710-7392-4069-b063-9c0636f22498",
                                                                                                     "6487406f-d6f6-46d6-8528-e8bb6ab0175a",
                                                                                                     "a4562bbb-0a35-4912-bd6d-a063f236fbab",
                                                                                                     "8737dc45-2833-4262-a68d-0d8c568e5f8f"))
                                                                          .notInDeviceIds(Arrays.asList("78322db1-8a53-46b0-8c54-3e6212a27136",
                                                                                                        "b844d85d-ac91-4c03-92ca-ad93f49d1e09",
                                                                                                        "38f74f06-8b44-4ca7-948a-bcb3b2c7348f"))
                                                                          .equalToDescription("4eb826ce-5f46-4545-ace2-5b9b48015ae6")
                                                                          .notEqualToDescription("c7380677-709a-4fc6-b141-2e552deac439")
                                                                          .inDescriptions(Arrays.asList("4243a606-7c94-489c-b088-a0186c616d40",
                                                                                                        "31cfaff1-6458-4d74-976c-6499f58a7d18"))
                                                                          .notInDescriptions(Arrays.asList("183d8765-0817-4746-a157-255bb623d386"))
                                                                          .inDateTimes(Arrays.asList(new Date(1559833682738L),
                                                                                                     new Date(1559833685398L),
                                                                                                     new Date(1559833682606L),
                                                                                                     new Date(1559833686260L),
                                                                                                     new Date(1559833687791L),
                                                                                                     new Date(1559833682192L),
                                                                                                     new Date(1559833687981L),
                                                                                                     new Date(1559833678963L),
                                                                                                     new Date(1559833687789L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1559833686430L),
                                                                                                        new Date(1559833684462L),
                                                                                                        new Date(1559833683591L),
                                                                                                        new Date(1559833681274L),
                                                                                                        new Date(1559833683603L),
                                                                                                        new Date(1559833681009L)))
                                                                          .lessThanDateTime(new Date(1559833685722L))
                                                                          .greaterThanDateTime(new Date(1559833679258L))
                                                                          .equalToStateChange(Boolean.FALSE)
                                                                          .notEqualToStateChange(Boolean.TRUE)
                                                                          .equalToId("a7656a67-6124-4a1e-a7f7-b78c60d1a3d2")
                                                                          .notEqualToId("f8278890-6dd2-49c1-ad14-f12135575bf1")
                                                                          .inIds(Arrays.asList("f1e07ba1-0451-4003-8d59-21dc1aabe14b"))
                                                                          .notInIds(Arrays.asList("3637e47e-d111-4e83-88c1-4a87ebc8b934",
                                                                                                  "a79ab1ea-c6e0-4297-881a-424454fa7c7a"))
                                                                          .equalToEventType("cff97504-ed99-4202-a104-042a8005677a")
                                                                          .notEqualToEventType("c95523ab-155e-44c2-b39f-ec47d0b52da9")
                                                                          .inEventTypes(Arrays.asList("9dca3777-acd5-4a4c-8ce6-0bc44ae54c88",
                                                                                                      "2bf58df2-3fad-4f5d-a384-abd72bb9d945",
                                                                                                      "ba288863-97be-4fb3-a0b0-7c84768b2365",
                                                                                                      "abe5d44c-599b-4387-99e1-a0d0b17fcc2c",
                                                                                                      "e6dafe79-bd68-43a2-949b-afe5866af7e3",
                                                                                                      "833d8ff3-691e-4896-b3b1-b9d12be38f36",
                                                                                                      "d33708f3-616b-445a-9c9d-d893603c6f54",
                                                                                                      "054728cf-a12b-4072-8bf7-7a91bd35a981"))
                                                                          .notInEventTypes(Arrays.asList("bdb133f4-6c78-401c-a45b-0418ffa64112",
                                                                                                         "570d730f-9d4d-4aef-843c-2add211334a8"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("ec357863-25ed-4be0-827e-4381542f3f70",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("582469a3-e937-42bc-8624-bcf617aecfad",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("4118a487-3cb8-4d5a-9f7f-0c213f407b1e", "f634abb1-42bd-4447-bf9c-9ab2b138384b",
                                       "a62df710-7392-4069-b063-9c0636f22498", "6487406f-d6f6-46d6-8528-e8bb6ab0175a",
                                       "a4562bbb-0a35-4912-bd6d-a063f236fbab", "8737dc45-2833-4262-a68d-0d8c568e5f8f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("78322db1-8a53-46b0-8c54-3e6212a27136", "b844d85d-ac91-4c03-92ca-ad93f49d1e09",
                                       "38f74f06-8b44-4ca7-948a-bcb3b2c7348f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("4eb826ce-5f46-4545-ace2-5b9b48015ae6",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("c7380677-709a-4fc6-b141-2e552deac439",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("4243a606-7c94-489c-b088-a0186c616d40", "31cfaff1-6458-4d74-976c-6499f58a7d18"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("183d8765-0817-4746-a157-255bb623d386"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559833682738L), new Date(1559833685398L), new Date(1559833682606L),
                                       new Date(1559833686260L), new Date(1559833687791L), new Date(1559833682192L),
                                       new Date(1559833687981L), new Date(1559833678963L), new Date(1559833687789L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1559833686430L), new Date(1559833684462L), new Date(1559833683591L),
                                       new Date(1559833681274L), new Date(1559833683603L), new Date(1559833681009L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559833685722L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1559833679258L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a7656a67-6124-4a1e-a7f7-b78c60d1a3d2",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("f8278890-6dd2-49c1-ad14-f12135575bf1",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("f1e07ba1-0451-4003-8d59-21dc1aabe14b"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("3637e47e-d111-4e83-88c1-4a87ebc8b934", "a79ab1ea-c6e0-4297-881a-424454fa7c7a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("cff97504-ed99-4202-a104-042a8005677a",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("c95523ab-155e-44c2-b39f-ec47d0b52da9",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("9dca3777-acd5-4a4c-8ce6-0bc44ae54c88", "2bf58df2-3fad-4f5d-a384-abd72bb9d945",
                                       "ba288863-97be-4fb3-a0b0-7c84768b2365", "abe5d44c-599b-4387-99e1-a0d0b17fcc2c",
                                       "e6dafe79-bd68-43a2-949b-afe5866af7e3", "833d8ff3-691e-4896-b3b1-b9d12be38f36",
                                       "d33708f3-616b-445a-9c9d-d893603c6f54", "054728cf-a12b-4072-8bf7-7a91bd35a981"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("bdb133f4-6c78-401c-a45b-0418ffa64112", "570d730f-9d4d-4aef-843c-2add211334a8"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(71),
                                                                                           Long.valueOf(51),
                                                                                           Order.getDefault(),
                                                                                           "c6a4b603-375c-4dda-9c2e-b6dcefb9847b",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(71),
                                                                                           Long.valueOf(51),
                                                                                           Order.getDefault(),
                                                                                           "c6a4b603-375c-4dda-9c2e-b6dcefb9847b",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-20),
                                                                                           Long.valueOf(-127),
                                                                                           Order.getDefault(),
                                                                                           "5f4f51c1-0beb-41be-b4fb-40d14f14b2be",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-20),
                                                                                           Long.valueOf(-127),
                                                                                           Order.getDefault(),
                                                                                           "5f4f51c1-0beb-41be-b4fb-40d14f14b2be",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(62),
                                                                                           Long.valueOf(115),
                                                                                           Order.getDefault(),
                                                                                           "f0b7b3ce-53f3-4e36-be72-a1847ca897c5",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
