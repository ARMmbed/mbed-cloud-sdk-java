// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(56),
                                                                                        Long.valueOf(27),
                                                                                        Order.getDefault(),
                                                                                        "794772af-1c13-4b10-adb6-14cff50107af",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1559754639476L),
                                                                                                    new Date(1559754638393L),
                                                                                                    new Date(1559754646384L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1559754644798L),
                                                                                                       new Date(1559754643778L),
                                                                                                       new Date(1559754638322L),
                                                                                                       new Date(1559754645082L),
                                                                                                       new Date(1559754641747L),
                                                                                                       new Date(1559754641539L),
                                                                                                       new Date(1559754641429L)))
                                                                        .lessThanUpdatedAt(new Date(1559754646279L))
                                                                        .greaterThanUpdatedAt(new Date(1559754639490L))
                                                                        .equalToName("840631d8-dace-4e65-ba2b-520c212fa245")
                                                                        .notEqualToName("b5620ca5-ec26-4f46-852f-fbb7a99059f9")
                                                                        .inNames(Arrays.asList("970b914d-3321-49cb-ae72-7feb5fdc3562",
                                                                                               "792ed374-3ae9-4bc0-ae00-d592f3cb7611"))
                                                                        .notInNames(Arrays.asList("54034a53-83f9-4a07-8f50-f8cbdcc72694"))
                                                                        .equalToDevicesCount(Integer.valueOf(3))
                                                                        .notEqualToDevicesCount(Integer.valueOf(97))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(126),
                                                                                                       Integer.valueOf(39),
                                                                                                       Integer.valueOf(-83),
                                                                                                       Integer.valueOf(1),
                                                                                                       Integer.valueOf(-10),
                                                                                                       Integer.valueOf(-58),
                                                                                                       Integer.valueOf(11),
                                                                                                       Integer.valueOf(75),
                                                                                                       Integer.valueOf(9)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-74),
                                                                                                          Integer.valueOf(51),
                                                                                                          Integer.valueOf(-126),
                                                                                                          Integer.valueOf(121),
                                                                                                          Integer.valueOf(-8),
                                                                                                          Integer.valueOf(-45),
                                                                                                          Integer.valueOf(113),
                                                                                                          Integer.valueOf(21)))
                                                                        .lessThanDevicesCount(Integer.valueOf(109))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-39))
                                                                        .inCreatedAts(Arrays.asList(new Date(1559754641799L),
                                                                                                    new Date(1559754644004L),
                                                                                                    new Date(1559754641929L),
                                                                                                    new Date(1559754638153L),
                                                                                                    new Date(1559754639839L),
                                                                                                    new Date(1559754644386L),
                                                                                                    new Date(1559754638709L),
                                                                                                    new Date(1559754638045L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1559754641713L),
                                                                                                       new Date(1559754637585L),
                                                                                                       new Date(1559754640183L),
                                                                                                       new Date(1559754641137L),
                                                                                                       new Date(1559754645722L),
                                                                                                       new Date(1559754642512L),
                                                                                                       new Date(1559754638368L),
                                                                                                       new Date(1559754638149L),
                                                                                                       new Date(1559754642790L)))
                                                                        .lessThanCreatedAt(new Date(1559754644113L))
                                                                        .greaterThanCreatedAt(new Date(1559754641344L))
                                                                        .equalToId("07ca84e0-bf90-426d-b239-60ac7ea650fe")
                                                                        .notEqualToId("37267bd5-8ae5-49d4-a6cd-a3d0bb393705")
                                                                        .inIds(Arrays.asList("74c5ac6b-8971-423f-802f-35730892a5f3",
                                                                                             "51e3b136-84c7-43f5-84ec-f5807a3ba8f2"))
                                                                        .notInIds(Arrays.asList("c13ea79f-26bf-4a08-9516-59aa3788fb51",
                                                                                                "4abee48d-8da1-4515-a12c-4ab325a2f269",
                                                                                                "6cad88c5-a206-43d2-a3ab-672bfe4345ef"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559754639476L), new Date(1559754638393L), new Date(1559754646384L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559754644798L), new Date(1559754643778L), new Date(1559754638322L),
                                       new Date(1559754645082L), new Date(1559754641747L), new Date(1559754641539L),
                                       new Date(1559754641429L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559754646279L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559754639490L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("840631d8-dace-4e65-ba2b-520c212fa245",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("b5620ca5-ec26-4f46-852f-fbb7a99059f9",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("970b914d-3321-49cb-ae72-7feb5fdc3562", "792ed374-3ae9-4bc0-ae00-d592f3cb7611"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("54034a53-83f9-4a07-8f50-f8cbdcc72694"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(3),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(97),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(126), Integer.valueOf(39), Integer.valueOf(-83),
                                       Integer.valueOf(1), Integer.valueOf(-10), Integer.valueOf(-58),
                                       Integer.valueOf(11), Integer.valueOf(75), Integer.valueOf(9)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-74), Integer.valueOf(51), Integer.valueOf(-126),
                                       Integer.valueOf(121), Integer.valueOf(-8), Integer.valueOf(-45),
                                       Integer.valueOf(113), Integer.valueOf(21)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(109),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-39),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559754641799L), new Date(1559754644004L), new Date(1559754641929L),
                                       new Date(1559754638153L), new Date(1559754639839L), new Date(1559754644386L),
                                       new Date(1559754638709L), new Date(1559754638045L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559754641713L), new Date(1559754637585L), new Date(1559754640183L),
                                       new Date(1559754641137L), new Date(1559754645722L), new Date(1559754642512L),
                                       new Date(1559754638368L), new Date(1559754638149L), new Date(1559754642790L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559754644113L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559754641344L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("07ca84e0-bf90-426d-b239-60ac7ea650fe",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("37267bd5-8ae5-49d4-a6cd-a3d0bb393705",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("74c5ac6b-8971-423f-802f-35730892a5f3", "51e3b136-84c7-43f5-84ec-f5807a3ba8f2"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("c13ea79f-26bf-4a08-9516-59aa3788fb51", "4abee48d-8da1-4515-a12c-4ab325a2f269",
                                       "6cad88c5-a206-43d2-a3ab-672bfe4345ef"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-76),
                                                                                        Long.valueOf(113),
                                                                                        Order.getDefault(),
                                                                                        "c7b04359-3dab-45d3-8278-ff1e8c093cca",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-76),
                                                                                        Long.valueOf(113),
                                                                                        Order.getDefault(),
                                                                                        "c7b04359-3dab-45d3-8278-ff1e8c093cca",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-8),
                                                                                        Long.valueOf(-104),
                                                                                        Order.getDefault(),
                                                                                        "d5328d74-0c2e-46e4-be34-6feaf4d0a67a",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-8),
                                                                                        Long.valueOf(-104),
                                                                                        Order.getDefault(),
                                                                                        "d5328d74-0c2e-46e4-be34-6feaf4d0a67a",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(105),
                                                                                        Long.valueOf(-76),
                                                                                        Order.getDefault(),
                                                                                        "a63a712b-41df-41dc-9a90-116064be1432",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
