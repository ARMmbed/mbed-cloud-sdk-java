// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(111),
                                                                                        Long.valueOf(62),
                                                                                        Order.getDefault(),
                                                                                        "dc398ac9-dc06-4445-ac9b-e0d6ad597b47",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=not equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1559560670650L),
                                                                                                    new Date(1559560672076L),
                                                                                                    new Date(1559560670807L),
                                                                                                    new Date(1559560673817L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1559560668363L),
                                                                                                       new Date(1559560675645L),
                                                                                                       new Date(1559560674352L),
                                                                                                       new Date(1559560675282L),
                                                                                                       new Date(1559560674392L)))
                                                                        .lessThanUpdatedAt(new Date(1559560667984L))
                                                                        .greaterThanUpdatedAt(new Date(1559560675147L))
                                                                        .equalToName("8ec89e7a-37e7-4ff0-9f03-b434206ef7c8")
                                                                        .notEqualToName("42c0809d-5dbe-4085-a6cd-1be70867e5bc")
                                                                        .inNames(Arrays.asList("bc3e29f9-843a-49cd-b5ae-8bc178d851b5",
                                                                                               "c8c58efb-1d99-4135-a19e-631dd25c380a",
                                                                                               "19c4db49-8af9-40cb-9a20-f2994a67c2b4",
                                                                                               "255c8b49-ea3a-4857-9bce-5050dd4f8355",
                                                                                               "3d7ae2a8-387e-4c1a-b32a-8bf5952ed7f2"))
                                                                        .notInNames(Arrays.asList("13f9d32f-47f6-4445-bfa8-5b1eb5bae89d",
                                                                                                  "b778d7c4-0d2f-4ac3-bdf3-dcb6470e7629",
                                                                                                  "e3ff28df-66a7-4e6d-9eab-28fa46d979cc",
                                                                                                  "366af409-ee09-4d72-9b91-c935bb4d8dab"))
                                                                        .equalToDevicesCount(Integer.valueOf(81))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-80))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(53),
                                                                                                       Integer.valueOf(64),
                                                                                                       Integer.valueOf(74),
                                                                                                       Integer.valueOf(-63),
                                                                                                       Integer.valueOf(98),
                                                                                                       Integer.valueOf(-86)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(105),
                                                                                                          Integer.valueOf(126),
                                                                                                          Integer.valueOf(-27),
                                                                                                          Integer.valueOf(67),
                                                                                                          Integer.valueOf(-113)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-4))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-83))
                                                                        .inCreatedAts(Arrays.asList(new Date(1559560670736L),
                                                                                                    new Date(1559560673721L),
                                                                                                    new Date(1559560666144L),
                                                                                                    new Date(1559560675063L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1559560673187L),
                                                                                                       new Date(1559560672357L),
                                                                                                       new Date(1559560668903L),
                                                                                                       new Date(1559560671266L),
                                                                                                       new Date(1559560672806L),
                                                                                                       new Date(1559560665975L),
                                                                                                       new Date(1559560671113L)))
                                                                        .lessThanCreatedAt(new Date(1559560675024L))
                                                                        .greaterThanCreatedAt(new Date(1559560673927L))
                                                                        .equalToId("ffcfc78d-5a3f-4de7-94f9-7b02bf780a5f")
                                                                        .notEqualToId("90777802-86b1-4777-9faa-080a4c3301d2")
                                                                        .inIds(Arrays.asList("22f053ee-02a2-4a9e-a2e0-4a8d107bfe38"))
                                                                        .notInIds(Arrays.asList("05a7156c-6104-409b-b8fa-0adcde4ad5a4",
                                                                                                "a30376bf-4ad3-492e-b8de-a6e5fc48df6c",
                                                                                                "ac31385a-201d-4746-9ee7-3a520a3897f1",
                                                                                                "30314436-82ab-40bd-8c0d-d14a09e0591c",
                                                                                                "c4a51a5a-289f-42bf-a6e8-f5e3fed5086c",
                                                                                                "d47028ac-09ef-4f0a-90fc-a5fd853d33eb",
                                                                                                "e6b0d08b-168f-4c5a-9a6f-e7220bbf6de5",
                                                                                                "26a392bc-5aaf-40fc-8ef1-e0e424be6ec6"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559560670650L), new Date(1559560672076L), new Date(1559560670807L),
                                       new Date(1559560673817L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559560668363L), new Date(1559560675645L), new Date(1559560674352L),
                                       new Date(1559560675282L), new Date(1559560674392L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559560667984L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559560675147L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("8ec89e7a-37e7-4ff0-9f03-b434206ef7c8",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("42c0809d-5dbe-4085-a6cd-1be70867e5bc",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("bc3e29f9-843a-49cd-b5ae-8bc178d851b5", "c8c58efb-1d99-4135-a19e-631dd25c380a",
                                       "19c4db49-8af9-40cb-9a20-f2994a67c2b4", "255c8b49-ea3a-4857-9bce-5050dd4f8355",
                                       "3d7ae2a8-387e-4c1a-b32a-8bf5952ed7f2"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("13f9d32f-47f6-4445-bfa8-5b1eb5bae89d", "b778d7c4-0d2f-4ac3-bdf3-dcb6470e7629",
                                       "e3ff28df-66a7-4e6d-9eab-28fa46d979cc", "366af409-ee09-4d72-9b91-c935bb4d8dab"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(81),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-80),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(53), Integer.valueOf(64), Integer.valueOf(74),
                                       Integer.valueOf(-63), Integer.valueOf(98), Integer.valueOf(-86)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(105), Integer.valueOf(126), Integer.valueOf(-27),
                                       Integer.valueOf(67), Integer.valueOf(-113)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-4),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-83),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559560670736L), new Date(1559560673721L), new Date(1559560666144L),
                                       new Date(1559560675063L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559560673187L), new Date(1559560672357L), new Date(1559560668903L),
                                       new Date(1559560671266L), new Date(1559560672806L), new Date(1559560665975L),
                                       new Date(1559560671113L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559560675024L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559560673927L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=not equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("ffcfc78d-5a3f-4de7-94f9-7b02bf780a5f",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("90777802-86b1-4777-9faa-080a4c3301d2",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("22f053ee-02a2-4a9e-a2e0-4a8d107bfe38"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("05a7156c-6104-409b-b8fa-0adcde4ad5a4", "a30376bf-4ad3-492e-b8de-a6e5fc48df6c",
                                       "ac31385a-201d-4746-9ee7-3a520a3897f1", "30314436-82ab-40bd-8c0d-d14a09e0591c",
                                       "c4a51a5a-289f-42bf-a6e8-f5e3fed5086c", "d47028ac-09ef-4f0a-90fc-a5fd853d33eb",
                                       "e6b0d08b-168f-4c5a-9a6f-e7220bbf6de5", "26a392bc-5aaf-40fc-8ef1-e0e424be6ec6"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-9),
                                                                                        Long.valueOf(44),
                                                                                        Order.getDefault(),
                                                                                        "98b2de11-55e9-4049-9cbb-414753be4d96",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-9),
                                                                                        Long.valueOf(44),
                                                                                        Order.getDefault(),
                                                                                        "98b2de11-55e9-4049-9cbb-414753be4d96",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-34),
                                                                                        Long.valueOf(64),
                                                                                        Order.getDefault(),
                                                                                        "a5994d90-493a-4651-8d16-1ba75cb4bca0",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-34),
                                                                                        Long.valueOf(64),
                                                                                        Order.getDefault(),
                                                                                        "a5994d90-493a-4651-8d16-1ba75cb4bca0",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-40),
                                                                                        Long.valueOf(-37),
                                                                                        Order.getDefault(),
                                                                                        "b91c4585-b2a1-435e-ba23-f1caa596b860",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
