// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-6),
                                                                                        Long.valueOf(53),
                                                                                        Order.getDefault(),
                                                                                        "ae876b47-0a43-4aab-a6ab-9ec76b16a23e",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1559745303806L),
                                                                                                    new Date(1559745301008L),
                                                                                                    new Date(1559745298141L),
                                                                                                    new Date(1559745296997L),
                                                                                                    new Date(1559745301925L),
                                                                                                    new Date(1559745297206L),
                                                                                                    new Date(1559745302651L),
                                                                                                    new Date(1559745299843L),
                                                                                                    new Date(1559745305000L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1559745299274L),
                                                                                                       new Date(1559745303700L),
                                                                                                       new Date(1559745296915L)))
                                                                        .lessThanUpdatedAt(new Date(1559745304250L))
                                                                        .greaterThanUpdatedAt(new Date(1559745302770L))
                                                                        .equalToName("198bef4f-9469-4ff9-824c-8c0dc1294b08")
                                                                        .notEqualToName("25965914-dd76-4b47-8267-e5a1ff5b203c")
                                                                        .inNames(Arrays.asList("fd86b719-a5a4-44d9-a70f-5f8843af5d5f",
                                                                                               "e21c8b42-5f86-48e9-b8ff-d35cb4f0717e",
                                                                                               "bcd032a4-e34f-4d69-a0aa-7982398d3768"))
                                                                        .notInNames(Arrays.asList("88d584cf-e7f1-4749-bb1c-86478edeed24",
                                                                                                  "31db0ea2-5861-4bb3-bb8e-572be07a6d07",
                                                                                                  "a0f9a2b9-fbd0-4aed-a2ee-f47c5ed54e33",
                                                                                                  "0458bf0c-81bc-4768-aafb-985fb99e17a5"))
                                                                        .equalToDevicesCount(Integer.valueOf(-84))
                                                                        .notEqualToDevicesCount(Integer.valueOf(102))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(24),
                                                                                                       Integer.valueOf(53)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(3),
                                                                                                          Integer.valueOf(-68),
                                                                                                          Integer.valueOf(-44),
                                                                                                          Integer.valueOf(101),
                                                                                                          Integer.valueOf(-69),
                                                                                                          Integer.valueOf(12)))
                                                                        .lessThanDevicesCount(Integer.valueOf(52))
                                                                        .greaterThanDevicesCount(Integer.valueOf(101))
                                                                        .inCreatedAts(Arrays.asList(new Date(1559745300194L),
                                                                                                    new Date(1559745300054L),
                                                                                                    new Date(1559745303665L),
                                                                                                    new Date(1559745298074L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1559745304665L),
                                                                                                       new Date(1559745299304L),
                                                                                                       new Date(1559745297831L),
                                                                                                       new Date(1559745303590L)))
                                                                        .lessThanCreatedAt(new Date(1559745301033L))
                                                                        .greaterThanCreatedAt(new Date(1559745297827L))
                                                                        .equalToId("3ab4048b-c6e9-44d6-821e-53098a727952")
                                                                        .notEqualToId("4074d5aa-a52e-4c51-813b-681c37067e74")
                                                                        .inIds(Arrays.asList("10ed8d44-e1e3-45c2-8003-8e4f189c51dc",
                                                                                             "db14ae04-a9f3-41a8-8508-8b52a0965f50",
                                                                                             "dff84cef-5cb2-40e2-8b08-654684c93488",
                                                                                             "b6fe9a88-f8e3-4c5a-b321-1a2680346fc6",
                                                                                             "d121e7dc-30eb-419d-b7b3-19db8d646b8f",
                                                                                             "d68e5cbf-5299-4884-9ee3-3ba8cde36777",
                                                                                             "30250668-49dd-4a5d-8809-0d6cccbf571c",
                                                                                             "97014ac9-392f-46e8-887d-dcee6687c97b",
                                                                                             "5a75fae3-94d6-411d-a7bd-eb7e971d5bcf"))
                                                                        .notInIds(Arrays.asList("cd444286-65b4-4991-91cc-aab3a240a26f",
                                                                                                "bc738b77-6509-490a-a994-823801098ec0",
                                                                                                "4f5fdb8f-0923-42cf-8090-987c84520c1c"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745303806L), new Date(1559745301008L), new Date(1559745298141L),
                                       new Date(1559745296997L), new Date(1559745301925L), new Date(1559745297206L),
                                       new Date(1559745302651L), new Date(1559745299843L), new Date(1559745305000L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745299274L), new Date(1559745303700L), new Date(1559745296915L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559745304250L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559745302770L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("198bef4f-9469-4ff9-824c-8c0dc1294b08",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("25965914-dd76-4b47-8267-e5a1ff5b203c",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("fd86b719-a5a4-44d9-a70f-5f8843af5d5f", "e21c8b42-5f86-48e9-b8ff-d35cb4f0717e",
                                       "bcd032a4-e34f-4d69-a0aa-7982398d3768"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("88d584cf-e7f1-4749-bb1c-86478edeed24", "31db0ea2-5861-4bb3-bb8e-572be07a6d07",
                                       "a0f9a2b9-fbd0-4aed-a2ee-f47c5ed54e33", "0458bf0c-81bc-4768-aafb-985fb99e17a5"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-84),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(102),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(24), Integer.valueOf(53)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(3), Integer.valueOf(-68), Integer.valueOf(-44),
                                       Integer.valueOf(101), Integer.valueOf(-69), Integer.valueOf(12)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(52),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(101),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745300194L), new Date(1559745300054L), new Date(1559745303665L),
                                       new Date(1559745298074L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559745304665L), new Date(1559745299304L), new Date(1559745297831L),
                                       new Date(1559745303590L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559745301033L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559745297827L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("3ab4048b-c6e9-44d6-821e-53098a727952",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("4074d5aa-a52e-4c51-813b-681c37067e74",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("10ed8d44-e1e3-45c2-8003-8e4f189c51dc", "db14ae04-a9f3-41a8-8508-8b52a0965f50",
                                       "dff84cef-5cb2-40e2-8b08-654684c93488", "b6fe9a88-f8e3-4c5a-b321-1a2680346fc6",
                                       "d121e7dc-30eb-419d-b7b3-19db8d646b8f", "d68e5cbf-5299-4884-9ee3-3ba8cde36777",
                                       "30250668-49dd-4a5d-8809-0d6cccbf571c", "97014ac9-392f-46e8-887d-dcee6687c97b",
                                       "5a75fae3-94d6-411d-a7bd-eb7e971d5bcf"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("cd444286-65b4-4991-91cc-aab3a240a26f", "bc738b77-6509-490a-a994-823801098ec0",
                                       "4f5fdb8f-0923-42cf-8090-987c84520c1c"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(113),
                                                                                        Long.valueOf(-95),
                                                                                        Order.getDefault(),
                                                                                        "8f151419-bf00-4711-8233-1a2d81233a43",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(113),
                                                                                        Long.valueOf(-95),
                                                                                        Order.getDefault(),
                                                                                        "8f151419-bf00-4711-8233-1a2d81233a43",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(73),
                                                                                        Long.valueOf(47),
                                                                                        Order.getDefault(),
                                                                                        "73f13e0e-344f-4734-8685-6b37d1b174f5",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(73),
                                                                                        Long.valueOf(47),
                                                                                        Order.getDefault(),
                                                                                        "73f13e0e-344f-4734-8685-6b37d1b174f5",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(87),
                                                                                        Long.valueOf(56),
                                                                                        Order.getDefault(),
                                                                                        "d5c0dd90-a0e8-464c-9e2a-8dfddde8865d",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
