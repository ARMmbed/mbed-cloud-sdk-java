// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-57),
                                                                                        Long.valueOf(-72),
                                                                                        Order.getDefault(),
                                                                                        "38339fd2-e20d-4551-a86a-2740c00300f6",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=not equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1559655034919L),
                                                                                                    new Date(1559655034122L),
                                                                                                    new Date(1559655038338L),
                                                                                                    new Date(1559655032619L),
                                                                                                    new Date(1559655033087L),
                                                                                                    new Date(1559655033056L),
                                                                                                    new Date(1559655037428L),
                                                                                                    new Date(1559655030769L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1559655032387L),
                                                                                                       new Date(1559655030677L)))
                                                                        .lessThanUpdatedAt(new Date(1559655039340L))
                                                                        .greaterThanUpdatedAt(new Date(1559655029859L))
                                                                        .equalToName("375f2886-3e1a-4270-961e-e640223ac978")
                                                                        .notEqualToName("45cc9c70-a4e6-490a-b3ba-b0466b8d206f")
                                                                        .inNames(Arrays.asList("bbe2712f-dd61-4c05-9e78-dbd3080fe4c7",
                                                                                               "29b2bf40-0f6f-41ef-b6c5-e3d559d5d73c",
                                                                                               "ab5d9346-674a-408b-ae5e-b123bb2bdc57",
                                                                                               "a8496ba9-414c-4209-b132-c29a88713591",
                                                                                               "ccd252c8-4bbc-4ec5-a89d-6dc6e96e0348",
                                                                                               "c70e41d6-c343-4872-a653-b0f6651fa2b3",
                                                                                               "cceab6d0-a551-4997-9ec3-8106644d4d63",
                                                                                               "aa70981c-b3a6-48bc-a366-c458fa0b095c"))
                                                                        .notInNames(Arrays.asList("ec4ed08f-c8e6-4b89-bf70-0fd5efd5c3d3",
                                                                                                  "32e5ae3a-d62b-46c5-a04e-4098868408bf",
                                                                                                  "9a53e332-c266-414a-9a42-b5c1fd7dccd1",
                                                                                                  "bc1f4cb9-f338-4016-aa07-a9e2ee482f4d",
                                                                                                  "00622d21-6c28-49a6-9e3d-b21f7345dfef"))
                                                                        .equalToDevicesCount(Integer.valueOf(-95))
                                                                        .notEqualToDevicesCount(Integer.valueOf(69))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(-62),
                                                                                                       Integer.valueOf(34),
                                                                                                       Integer.valueOf(67),
                                                                                                       Integer.valueOf(-29),
                                                                                                       Integer.valueOf(-63),
                                                                                                       Integer.valueOf(-29)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-24)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-111))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-36))
                                                                        .inCreatedAts(Arrays.asList(new Date(1559655036121L),
                                                                                                    new Date(1559655029767L),
                                                                                                    new Date(1559655036069L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1559655034809L),
                                                                                                       new Date(1559655030284L),
                                                                                                       new Date(1559655031661L),
                                                                                                       new Date(1559655034856L),
                                                                                                       new Date(1559655038558L),
                                                                                                       new Date(1559655031694L)))
                                                                        .lessThanCreatedAt(new Date(1559655031009L))
                                                                        .greaterThanCreatedAt(new Date(1559655030767L))
                                                                        .equalToId("7493d906-6047-41a0-8744-d2199183129c")
                                                                        .notEqualToId("d0c7d657-feaf-4569-91fd-a4452033d891")
                                                                        .inIds(Arrays.asList("cad209c0-2a0d-4b0c-b99e-a7a8c7d3e447",
                                                                                             "21fd3d07-b421-47ec-8a9b-9a50df4c0a7d"))
                                                                        .notInIds(Arrays.asList("0448d830-f066-4404-8111-879a3fa9fede",
                                                                                                "55102b0f-5f47-4f03-8665-a5cb9347de35",
                                                                                                "dd008b91-ba8e-4235-85de-aa704a8ab129",
                                                                                                "dc3ee577-728c-43f3-83be-cad32f56116d",
                                                                                                "8f5df315-05c6-4073-8064-30a80ec47bd5",
                                                                                                "c47c0b8b-f763-44c6-8fa9-ba90e6309089",
                                                                                                "f54b1aef-6548-439a-b3be-9c2559c9cade"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559655034919L), new Date(1559655034122L), new Date(1559655038338L),
                                       new Date(1559655032619L), new Date(1559655033087L), new Date(1559655033056L),
                                       new Date(1559655037428L), new Date(1559655030769L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559655032387L), new Date(1559655030677L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559655039340L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559655029859L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("375f2886-3e1a-4270-961e-e640223ac978",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("45cc9c70-a4e6-490a-b3ba-b0466b8d206f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("bbe2712f-dd61-4c05-9e78-dbd3080fe4c7", "29b2bf40-0f6f-41ef-b6c5-e3d559d5d73c",
                                       "ab5d9346-674a-408b-ae5e-b123bb2bdc57", "a8496ba9-414c-4209-b132-c29a88713591",
                                       "ccd252c8-4bbc-4ec5-a89d-6dc6e96e0348", "c70e41d6-c343-4872-a653-b0f6651fa2b3",
                                       "cceab6d0-a551-4997-9ec3-8106644d4d63", "aa70981c-b3a6-48bc-a366-c458fa0b095c"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("ec4ed08f-c8e6-4b89-bf70-0fd5efd5c3d3", "32e5ae3a-d62b-46c5-a04e-4098868408bf",
                                       "9a53e332-c266-414a-9a42-b5c1fd7dccd1", "bc1f4cb9-f338-4016-aa07-a9e2ee482f4d",
                                       "00622d21-6c28-49a6-9e3d-b21f7345dfef"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-95),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(69),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-62), Integer.valueOf(34), Integer.valueOf(67),
                                       Integer.valueOf(-29), Integer.valueOf(-63), Integer.valueOf(-29)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-24)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-111),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-36),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559655036121L), new Date(1559655029767L), new Date(1559655036069L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559655034809L), new Date(1559655030284L), new Date(1559655031661L),
                                       new Date(1559655034856L), new Date(1559655038558L), new Date(1559655031694L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559655031009L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559655030767L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            // Cannot test Filter [field=customAttributes, spec field=customAttributes,
            // tag=TAG_FILTER_BY_CUSTOM_ATTRIBUTES, operator=not equal to, type=Map<String, String>, isVerified=true]
            // because the field is a hashtable
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("7493d906-6047-41a0-8744-d2199183129c",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("d0c7d657-feaf-4569-91fd-a4452033d891",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("cad209c0-2a0d-4b0c-b99e-a7a8c7d3e447", "21fd3d07-b421-47ec-8a9b-9a50df4c0a7d"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("0448d830-f066-4404-8111-879a3fa9fede", "55102b0f-5f47-4f03-8665-a5cb9347de35",
                                       "dd008b91-ba8e-4235-85de-aa704a8ab129", "dc3ee577-728c-43f3-83be-cad32f56116d",
                                       "8f5df315-05c6-4073-8064-30a80ec47bd5", "c47c0b8b-f763-44c6-8fa9-ba90e6309089",
                                       "f54b1aef-6548-439a-b3be-9c2559c9cade"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(118),
                                                                                        Long.valueOf(-41),
                                                                                        Order.getDefault(),
                                                                                        "28412151-0c69-4dab-9c1c-5ade3956004f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(118),
                                                                                        Long.valueOf(-41),
                                                                                        Order.getDefault(),
                                                                                        "28412151-0c69-4dab-9c1c-5ade3956004f",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(48),
                                                                                        Long.valueOf(56),
                                                                                        Order.getDefault(),
                                                                                        "8682eb92-72f9-4563-b290-46a89d9f7e17",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(48),
                                                                                        Long.valueOf(56),
                                                                                        Order.getDefault(),
                                                                                        "8682eb92-72f9-4563-b290-46a89d9f7e17",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-45),
                                                                                        Long.valueOf(-99),
                                                                                        Order.getDefault(),
                                                                                        "9af18326-17ef-455b-b79a-ab6e3b2243cf",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
